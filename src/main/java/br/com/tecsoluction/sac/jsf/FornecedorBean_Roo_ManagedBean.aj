// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Fornecedor;
import br.com.tecsoluction.sac.Produto;
import br.com.tecsoluction.sac.jsf.FornecedorBean;
import br.com.tecsoluction.sac.jsf.converter.ProdutoConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect FornecedorBean_Roo_ManagedBean {
    
    declare @type: FornecedorBean: @ManagedBean(name = "fornecedorBean");
    
    declare @type: FornecedorBean: @SessionScoped;
    
    private String FornecedorBean.name = "Fornecedors";
    
    private Fornecedor FornecedorBean.fornecedor;
    
    private List<Fornecedor> FornecedorBean.allFornecedors;
    
    private boolean FornecedorBean.dataVisible = false;
    
    private List<String> FornecedorBean.columns;
    
    private HtmlPanelGrid FornecedorBean.createPanelGrid;
    
    private HtmlPanelGrid FornecedorBean.editPanelGrid;
    
    private HtmlPanelGrid FornecedorBean.viewPanelGrid;
    
    private boolean FornecedorBean.createDialogVisible = false;
    
    private List<Produto> FornecedorBean.selectedProdutos;
    
    @PostConstruct
    public void FornecedorBean.init() {
        columns = new ArrayList<String>();
        columns.add("nomefantasia");
        columns.add("cnpj");
        columns.add("razaosocial");
        columns.add("inscricaoestadual");
        columns.add("dataabertura");
    }
    
    public String FornecedorBean.getName() {
        return name;
    }
    
    public List<String> FornecedorBean.getColumns() {
        return columns;
    }
    
    public List<Fornecedor> FornecedorBean.getAllFornecedors() {
        return allFornecedors;
    }
    
    public void FornecedorBean.setAllFornecedors(List<Fornecedor> allFornecedors) {
        this.allFornecedors = allFornecedors;
    }
    
    public String FornecedorBean.findAllFornecedors() {
        allFornecedors = Fornecedor.findAllFornecedors();
        dataVisible = !allFornecedors.isEmpty();
        return null;
    }
    
    public boolean FornecedorBean.isDataVisible() {
        return dataVisible;
    }
    
    public void FornecedorBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FornecedorBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FornecedorBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FornecedorBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FornecedorBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FornecedorBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FornecedorBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FornecedorBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomefantasiaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomefantasiaCreateOutput.setFor("nomefantasiaCreateInput");
        nomefantasiaCreateOutput.setId("nomefantasiaCreateOutput");
        nomefantasiaCreateOutput.setValue("Nomefantasia:");
        htmlPanelGrid.getChildren().add(nomefantasiaCreateOutput);
        
        InputText nomefantasiaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomefantasiaCreateInput.setId("nomefantasiaCreateInput");
        nomefantasiaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.nomefantasia}", String.class));
        nomefantasiaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomefantasiaCreateInput);
        
        Message nomefantasiaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomefantasiaCreateInputMessage.setId("nomefantasiaCreateInputMessage");
        nomefantasiaCreateInputMessage.setFor("nomefantasiaCreateInput");
        nomefantasiaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomefantasiaCreateInputMessage);
        
        OutputLabel cnpjCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cnpjCreateOutput.setFor("cnpjCreateInput");
        cnpjCreateOutput.setId("cnpjCreateOutput");
        cnpjCreateOutput.setValue("Cnpj:");
        htmlPanelGrid.getChildren().add(cnpjCreateOutput);
        
        InputText cnpjCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cnpjCreateInput.setId("cnpjCreateInput");
        cnpjCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.cnpj}", String.class));
        cnpjCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cnpjCreateInput);
        
        Message cnpjCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cnpjCreateInputMessage.setId("cnpjCreateInputMessage");
        cnpjCreateInputMessage.setFor("cnpjCreateInput");
        cnpjCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cnpjCreateInputMessage);
        
        OutputLabel razaosocialCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        razaosocialCreateOutput.setFor("razaosocialCreateInput");
        razaosocialCreateOutput.setId("razaosocialCreateOutput");
        razaosocialCreateOutput.setValue("Razaosocial:");
        htmlPanelGrid.getChildren().add(razaosocialCreateOutput);
        
        InputText razaosocialCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        razaosocialCreateInput.setId("razaosocialCreateInput");
        razaosocialCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.razaosocial}", String.class));
        razaosocialCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(razaosocialCreateInput);
        
        Message razaosocialCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        razaosocialCreateInputMessage.setId("razaosocialCreateInputMessage");
        razaosocialCreateInputMessage.setFor("razaosocialCreateInput");
        razaosocialCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(razaosocialCreateInputMessage);
        
        OutputLabel inscricaoestadualCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        inscricaoestadualCreateOutput.setFor("inscricaoestadualCreateInput");
        inscricaoestadualCreateOutput.setId("inscricaoestadualCreateOutput");
        inscricaoestadualCreateOutput.setValue("Inscricaoestadual:");
        htmlPanelGrid.getChildren().add(inscricaoestadualCreateOutput);
        
        InputText inscricaoestadualCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        inscricaoestadualCreateInput.setId("inscricaoestadualCreateInput");
        inscricaoestadualCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.inscricaoestadual}", String.class));
        inscricaoestadualCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(inscricaoestadualCreateInput);
        
        Message inscricaoestadualCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        inscricaoestadualCreateInputMessage.setId("inscricaoestadualCreateInputMessage");
        inscricaoestadualCreateInputMessage.setFor("inscricaoestadualCreateInput");
        inscricaoestadualCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(inscricaoestadualCreateInputMessage);
        
        OutputLabel dataaberturaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dataaberturaCreateOutput.setFor("dataaberturaCreateInput");
        dataaberturaCreateOutput.setId("dataaberturaCreateOutput");
        dataaberturaCreateOutput.setValue("Dataabertura:");
        htmlPanelGrid.getChildren().add(dataaberturaCreateOutput);
        
        Calendar dataaberturaCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dataaberturaCreateInput.setId("dataaberturaCreateInput");
        dataaberturaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.dataabertura}", Date.class));
        dataaberturaCreateInput.setNavigator(true);
        dataaberturaCreateInput.setEffect("slideDown");
        dataaberturaCreateInput.setPattern("dd/MM/yyyy");
        dataaberturaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dataaberturaCreateInput);
        
        Message dataaberturaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dataaberturaCreateInputMessage.setId("dataaberturaCreateInputMessage");
        dataaberturaCreateInputMessage.setFor("dataaberturaCreateInput");
        dataaberturaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dataaberturaCreateInputMessage);
        
        OutputLabel produtosCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        produtosCreateOutput.setFor("produtosCreateInput");
        produtosCreateOutput.setId("produtosCreateOutput");
        produtosCreateOutput.setValue("Produtos:");
        htmlPanelGrid.getChildren().add(produtosCreateOutput);
        
        SelectManyMenu produtosCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        produtosCreateInput.setId("produtosCreateInput");
        produtosCreateInput.setConverter(new ProdutoConverter());
        produtosCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.selectedProdutos}", List.class));
        UISelectItems produtosCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        produtosCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.allProdutoes}", List.class));
        produtosCreateInput.setRequired(false);
        produtosCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "produto", String.class));
        produtosCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{produto}", String.class));
        produtosCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{produto}", Produto.class));
        produtosCreateInput.getChildren().add(produtosCreateInputItems);
        htmlPanelGrid.getChildren().add(produtosCreateInput);
        
        Message produtosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        produtosCreateInputMessage.setId("produtosCreateInputMessage");
        produtosCreateInputMessage.setFor("produtosCreateInput");
        produtosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(produtosCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FornecedorBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomefantasiaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomefantasiaEditOutput.setFor("nomefantasiaEditInput");
        nomefantasiaEditOutput.setId("nomefantasiaEditOutput");
        nomefantasiaEditOutput.setValue("Nomefantasia:");
        htmlPanelGrid.getChildren().add(nomefantasiaEditOutput);
        
        InputText nomefantasiaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomefantasiaEditInput.setId("nomefantasiaEditInput");
        nomefantasiaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.nomefantasia}", String.class));
        nomefantasiaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomefantasiaEditInput);
        
        Message nomefantasiaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomefantasiaEditInputMessage.setId("nomefantasiaEditInputMessage");
        nomefantasiaEditInputMessage.setFor("nomefantasiaEditInput");
        nomefantasiaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomefantasiaEditInputMessage);
        
        OutputLabel cnpjEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cnpjEditOutput.setFor("cnpjEditInput");
        cnpjEditOutput.setId("cnpjEditOutput");
        cnpjEditOutput.setValue("Cnpj:");
        htmlPanelGrid.getChildren().add(cnpjEditOutput);
        
        InputText cnpjEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cnpjEditInput.setId("cnpjEditInput");
        cnpjEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.cnpj}", String.class));
        cnpjEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cnpjEditInput);
        
        Message cnpjEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cnpjEditInputMessage.setId("cnpjEditInputMessage");
        cnpjEditInputMessage.setFor("cnpjEditInput");
        cnpjEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cnpjEditInputMessage);
        
        OutputLabel razaosocialEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        razaosocialEditOutput.setFor("razaosocialEditInput");
        razaosocialEditOutput.setId("razaosocialEditOutput");
        razaosocialEditOutput.setValue("Razaosocial:");
        htmlPanelGrid.getChildren().add(razaosocialEditOutput);
        
        InputText razaosocialEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        razaosocialEditInput.setId("razaosocialEditInput");
        razaosocialEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.razaosocial}", String.class));
        razaosocialEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(razaosocialEditInput);
        
        Message razaosocialEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        razaosocialEditInputMessage.setId("razaosocialEditInputMessage");
        razaosocialEditInputMessage.setFor("razaosocialEditInput");
        razaosocialEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(razaosocialEditInputMessage);
        
        OutputLabel inscricaoestadualEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        inscricaoestadualEditOutput.setFor("inscricaoestadualEditInput");
        inscricaoestadualEditOutput.setId("inscricaoestadualEditOutput");
        inscricaoestadualEditOutput.setValue("Inscricaoestadual:");
        htmlPanelGrid.getChildren().add(inscricaoestadualEditOutput);
        
        InputText inscricaoestadualEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        inscricaoestadualEditInput.setId("inscricaoestadualEditInput");
        inscricaoestadualEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.inscricaoestadual}", String.class));
        inscricaoestadualEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(inscricaoestadualEditInput);
        
        Message inscricaoestadualEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        inscricaoestadualEditInputMessage.setId("inscricaoestadualEditInputMessage");
        inscricaoestadualEditInputMessage.setFor("inscricaoestadualEditInput");
        inscricaoestadualEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(inscricaoestadualEditInputMessage);
        
        OutputLabel dataaberturaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dataaberturaEditOutput.setFor("dataaberturaEditInput");
        dataaberturaEditOutput.setId("dataaberturaEditOutput");
        dataaberturaEditOutput.setValue("Dataabertura:");
        htmlPanelGrid.getChildren().add(dataaberturaEditOutput);
        
        Calendar dataaberturaEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dataaberturaEditInput.setId("dataaberturaEditInput");
        dataaberturaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.dataabertura}", Date.class));
        dataaberturaEditInput.setNavigator(true);
        dataaberturaEditInput.setEffect("slideDown");
        dataaberturaEditInput.setPattern("dd/MM/yyyy");
        dataaberturaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dataaberturaEditInput);
        
        Message dataaberturaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dataaberturaEditInputMessage.setId("dataaberturaEditInputMessage");
        dataaberturaEditInputMessage.setFor("dataaberturaEditInput");
        dataaberturaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dataaberturaEditInputMessage);
        
        OutputLabel produtosEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        produtosEditOutput.setFor("produtosEditInput");
        produtosEditOutput.setId("produtosEditOutput");
        produtosEditOutput.setValue("Produtos:");
        htmlPanelGrid.getChildren().add(produtosEditOutput);
        
        SelectManyMenu produtosEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        produtosEditInput.setId("produtosEditInput");
        produtosEditInput.setConverter(new ProdutoConverter());
        produtosEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.selectedProdutos}", List.class));
        UISelectItems produtosEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        produtosEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.allProdutoes}", List.class));
        produtosEditInput.setRequired(false);
        produtosEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "produto", String.class));
        produtosEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{produto}", String.class));
        produtosEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{produto}", Produto.class));
        produtosEditInput.getChildren().add(produtosEditInputItems);
        htmlPanelGrid.getChildren().add(produtosEditInput);
        
        Message produtosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        produtosEditInputMessage.setId("produtosEditInputMessage");
        produtosEditInputMessage.setFor("produtosEditInput");
        produtosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(produtosEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FornecedorBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomefantasiaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomefantasiaLabel.setId("nomefantasiaLabel");
        nomefantasiaLabel.setValue("Nomefantasia:");
        htmlPanelGrid.getChildren().add(nomefantasiaLabel);
        
        HtmlOutputText nomefantasiaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomefantasiaValue.setId("nomefantasiaValue");
        nomefantasiaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.nomefantasia}", String.class));
        htmlPanelGrid.getChildren().add(nomefantasiaValue);
        
        HtmlOutputText cnpjLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cnpjLabel.setId("cnpjLabel");
        cnpjLabel.setValue("Cnpj:");
        htmlPanelGrid.getChildren().add(cnpjLabel);
        
        HtmlOutputText cnpjValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cnpjValue.setId("cnpjValue");
        cnpjValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.cnpj}", String.class));
        htmlPanelGrid.getChildren().add(cnpjValue);
        
        HtmlOutputText razaosocialLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        razaosocialLabel.setId("razaosocialLabel");
        razaosocialLabel.setValue("Razaosocial:");
        htmlPanelGrid.getChildren().add(razaosocialLabel);
        
        HtmlOutputText razaosocialValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        razaosocialValue.setId("razaosocialValue");
        razaosocialValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.razaosocial}", String.class));
        htmlPanelGrid.getChildren().add(razaosocialValue);
        
        HtmlOutputText inscricaoestadualLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        inscricaoestadualLabel.setId("inscricaoestadualLabel");
        inscricaoestadualLabel.setValue("Inscricaoestadual:");
        htmlPanelGrid.getChildren().add(inscricaoestadualLabel);
        
        HtmlOutputText inscricaoestadualValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        inscricaoestadualValue.setId("inscricaoestadualValue");
        inscricaoestadualValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.inscricaoestadual}", String.class));
        htmlPanelGrid.getChildren().add(inscricaoestadualValue);
        
        HtmlOutputText dataaberturaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dataaberturaLabel.setId("dataaberturaLabel");
        dataaberturaLabel.setValue("Dataabertura:");
        htmlPanelGrid.getChildren().add(dataaberturaLabel);
        
        HtmlOutputText dataaberturaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dataaberturaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.dataabertura}", Date.class));
        DateTimeConverter dataaberturaValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dataaberturaValueConverter.setPattern("dd/MM/yyyy");
        dataaberturaValue.setConverter(dataaberturaValueConverter);
        htmlPanelGrid.getChildren().add(dataaberturaValue);
        
        HtmlOutputText produtosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        produtosLabel.setId("produtosLabel");
        produtosLabel.setValue("Produtos:");
        htmlPanelGrid.getChildren().add(produtosLabel);
        
        SelectManyMenu produtosValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        produtosValue.setId("produtosValue");
        produtosValue.setConverter(new ProdutoConverter());
        produtosValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.selectedProdutos}", List.class));
        UISelectItems produtosValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        produtosValue.setReadonly(true);
        produtosValue.setDisabled(true);
        produtosValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{fornecedorBean.fornecedor.produtos}", Set.class));
        produtosValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "produto", String.class));
        produtosValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{produto}", String.class));
        produtosValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{produto}", Produto.class));
        produtosValue.getChildren().add(produtosValueItems);
        htmlPanelGrid.getChildren().add(produtosValue);
        
        return htmlPanelGrid;
    }
    
    public Fornecedor FornecedorBean.getFornecedor() {
        if (fornecedor == null) {
            fornecedor = new Fornecedor();
        }
        return fornecedor;
    }
    
    public void FornecedorBean.setFornecedor(Fornecedor fornecedor) {
        this.fornecedor = fornecedor;
    }
    
    public List<Produto> FornecedorBean.getSelectedProdutos() {
        return selectedProdutos;
    }
    
    public void FornecedorBean.setSelectedProdutos(List<Produto> selectedProdutos) {
        if (selectedProdutos != null) {
            fornecedor.setProdutos(new HashSet<Produto>(selectedProdutos));
        }
        this.selectedProdutos = selectedProdutos;
    }
    
    public String FornecedorBean.onEdit() {
        if (fornecedor != null && fornecedor.getProdutos() != null) {
            selectedProdutos = new ArrayList<Produto>(fornecedor.getProdutos());
        }
        return null;
    }
    
    public boolean FornecedorBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FornecedorBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FornecedorBean.displayList() {
        createDialogVisible = false;
        findAllFornecedors();
        return "fornecedor";
    }
    
    public String FornecedorBean.displayCreateDialog() {
        fornecedor = new Fornecedor();
        createDialogVisible = true;
        return "fornecedor";
    }
    
    public String FornecedorBean.persist() {
        String message = "";
        if (fornecedor.getId() != null) {
            fornecedor.merge();
            message = "message_successfully_updated";
        } else {
            fornecedor.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Fornecedor");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFornecedors();
    }
    
    public String FornecedorBean.delete() {
        fornecedor.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Fornecedor");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFornecedors();
    }
    
    public void FornecedorBean.reset() {
        fornecedor = null;
        selectedProdutos = null;
        createDialogVisible = false;
    }
    
    public void FornecedorBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
