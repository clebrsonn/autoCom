// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.PedidoCompra;
import br.com.tecsoluction.sac.Recebimento;
import br.com.tecsoluction.sac.jsf.RecebimentoBean;
import br.com.tecsoluction.sac.jsf.converter.ItemConverter;
import br.com.tecsoluction.sac.jsf.converter.PedidoCompraConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect RecebimentoBean_Roo_ManagedBean {
    
    declare @type: RecebimentoBean: @ManagedBean(name = "recebimentoBean");
    
    declare @type: RecebimentoBean: @SessionScoped;
    
    private String RecebimentoBean.name = "Recebimentoes";
    
    private Recebimento RecebimentoBean.recebimento;
    
    private List<Recebimento> RecebimentoBean.allRecebimentoes;
    
    private boolean RecebimentoBean.dataVisible = false;
    
    private List<String> RecebimentoBean.columns;
    
    private HtmlPanelGrid RecebimentoBean.createPanelGrid;
    
    private HtmlPanelGrid RecebimentoBean.editPanelGrid;
    
    private HtmlPanelGrid RecebimentoBean.viewPanelGrid;
    
    private boolean RecebimentoBean.createDialogVisible = false;
    
    private List<Item> RecebimentoBean.selectedItens;
    
    @PostConstruct
    public void RecebimentoBean.init() {
        columns = new ArrayList<String>();
        columns.add("datarecebimento");
        columns.add("status");
    }
    
    public String RecebimentoBean.getName() {
        return name;
    }
    
    public List<String> RecebimentoBean.getColumns() {
        return columns;
    }
    
    public List<Recebimento> RecebimentoBean.getAllRecebimentoes() {
        return allRecebimentoes;
    }
    
    public void RecebimentoBean.setAllRecebimentoes(List<Recebimento> allRecebimentoes) {
        this.allRecebimentoes = allRecebimentoes;
    }
    
    public String RecebimentoBean.findAllRecebimentoes() {
        allRecebimentoes = Recebimento.findAllRecebimentoes();
        dataVisible = !allRecebimentoes.isEmpty();
        return null;
    }
    
    public boolean RecebimentoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void RecebimentoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid RecebimentoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void RecebimentoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid RecebimentoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void RecebimentoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid RecebimentoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void RecebimentoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid RecebimentoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datarecebimentoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datarecebimentoCreateOutput.setFor("datarecebimentoCreateInput");
        datarecebimentoCreateOutput.setId("datarecebimentoCreateOutput");
        datarecebimentoCreateOutput.setValue("Datarecebimento:");
        htmlPanelGrid.getChildren().add(datarecebimentoCreateOutput);
        
        Calendar datarecebimentoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datarecebimentoCreateInput.setId("datarecebimentoCreateInput");
        datarecebimentoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.datarecebimento}", Date.class));
        datarecebimentoCreateInput.setNavigator(true);
        datarecebimentoCreateInput.setEffect("slideDown");
        datarecebimentoCreateInput.setPattern("dd/MM/yyyy");
        datarecebimentoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datarecebimentoCreateInput);
        
        Message datarecebimentoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datarecebimentoCreateInputMessage.setId("datarecebimentoCreateInputMessage");
        datarecebimentoCreateInputMessage.setFor("datarecebimentoCreateInput");
        datarecebimentoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datarecebimentoCreateInputMessage);
        
        OutputLabel pedidocompraCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidocompraCreateOutput.setFor("pedidocompraCreateInput");
        pedidocompraCreateOutput.setId("pedidocompraCreateOutput");
        pedidocompraCreateOutput.setValue("Pedidocompra:");
        htmlPanelGrid.getChildren().add(pedidocompraCreateOutput);
        
        AutoComplete pedidocompraCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidocompraCreateInput.setId("pedidocompraCreateInput");
        pedidocompraCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.pedidocompra}", PedidoCompra.class));
        pedidocompraCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{recebimentoBean.completePedidocompra}", List.class, new Class[] { String.class }));
        pedidocompraCreateInput.setDropdown(true);
        pedidocompraCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidocompra", String.class));
        pedidocompraCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidocompra.datapedidocompra} #{pedidocompra.total}", String.class));
        pedidocompraCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidocompra}", PedidoCompra.class));
        pedidocompraCreateInput.setConverter(new PedidoCompraConverter());
        pedidocompraCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidocompraCreateInput);
        
        Message pedidocompraCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidocompraCreateInputMessage.setId("pedidocompraCreateInputMessage");
        pedidocompraCreateInputMessage.setFor("pedidocompraCreateInput");
        pedidocompraCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidocompraCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        InputText statusCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.status}", String.class));
        statusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel itensCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensCreateOutput.setFor("itensCreateInput");
        itensCreateOutput.setId("itensCreateOutput");
        itensCreateOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensCreateOutput);
        
        SelectManyMenu itensCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensCreateInput.setId("itensCreateInput");
        itensCreateInput.setConverter(new ItemConverter());
        itensCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.selectedItens}", List.class));
        UISelectItems itensCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensCreateInput.setRequired(false);
        itensCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensCreateInput.getChildren().add(itensCreateInputItems);
        htmlPanelGrid.getChildren().add(itensCreateInput);
        
        Message itensCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensCreateInputMessage.setId("itensCreateInputMessage");
        itensCreateInputMessage.setFor("itensCreateInput");
        itensCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid RecebimentoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datarecebimentoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datarecebimentoEditOutput.setFor("datarecebimentoEditInput");
        datarecebimentoEditOutput.setId("datarecebimentoEditOutput");
        datarecebimentoEditOutput.setValue("Datarecebimento:");
        htmlPanelGrid.getChildren().add(datarecebimentoEditOutput);
        
        Calendar datarecebimentoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datarecebimentoEditInput.setId("datarecebimentoEditInput");
        datarecebimentoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.datarecebimento}", Date.class));
        datarecebimentoEditInput.setNavigator(true);
        datarecebimentoEditInput.setEffect("slideDown");
        datarecebimentoEditInput.setPattern("dd/MM/yyyy");
        datarecebimentoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datarecebimentoEditInput);
        
        Message datarecebimentoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datarecebimentoEditInputMessage.setId("datarecebimentoEditInputMessage");
        datarecebimentoEditInputMessage.setFor("datarecebimentoEditInput");
        datarecebimentoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datarecebimentoEditInputMessage);
        
        OutputLabel pedidocompraEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidocompraEditOutput.setFor("pedidocompraEditInput");
        pedidocompraEditOutput.setId("pedidocompraEditOutput");
        pedidocompraEditOutput.setValue("Pedidocompra:");
        htmlPanelGrid.getChildren().add(pedidocompraEditOutput);
        
        AutoComplete pedidocompraEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidocompraEditInput.setId("pedidocompraEditInput");
        pedidocompraEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.pedidocompra}", PedidoCompra.class));
        pedidocompraEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{recebimentoBean.completePedidocompra}", List.class, new Class[] { String.class }));
        pedidocompraEditInput.setDropdown(true);
        pedidocompraEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidocompra", String.class));
        pedidocompraEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidocompra.datapedidocompra} #{pedidocompra.total}", String.class));
        pedidocompraEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidocompra}", PedidoCompra.class));
        pedidocompraEditInput.setConverter(new PedidoCompraConverter());
        pedidocompraEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidocompraEditInput);
        
        Message pedidocompraEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidocompraEditInputMessage.setId("pedidocompraEditInputMessage");
        pedidocompraEditInputMessage.setFor("pedidocompraEditInput");
        pedidocompraEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidocompraEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        InputText statusEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.status}", String.class));
        statusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel itensEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensEditOutput.setFor("itensEditInput");
        itensEditOutput.setId("itensEditOutput");
        itensEditOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensEditOutput);
        
        SelectManyMenu itensEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensEditInput.setId("itensEditInput");
        itensEditInput.setConverter(new ItemConverter());
        itensEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.selectedItens}", List.class));
        UISelectItems itensEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensEditInput.setRequired(false);
        itensEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensEditInput.getChildren().add(itensEditInputItems);
        htmlPanelGrid.getChildren().add(itensEditInput);
        
        Message itensEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensEditInputMessage.setId("itensEditInputMessage");
        itensEditInputMessage.setFor("itensEditInput");
        itensEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid RecebimentoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText datarecebimentoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datarecebimentoLabel.setId("datarecebimentoLabel");
        datarecebimentoLabel.setValue("Datarecebimento:");
        htmlPanelGrid.getChildren().add(datarecebimentoLabel);
        
        HtmlOutputText datarecebimentoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datarecebimentoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.datarecebimento}", Date.class));
        DateTimeConverter datarecebimentoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datarecebimentoValueConverter.setPattern("dd/MM/yyyy");
        datarecebimentoValue.setConverter(datarecebimentoValueConverter);
        htmlPanelGrid.getChildren().add(datarecebimentoValue);
        
        HtmlOutputText pedidocompraLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidocompraLabel.setId("pedidocompraLabel");
        pedidocompraLabel.setValue("Pedidocompra:");
        htmlPanelGrid.getChildren().add(pedidocompraLabel);
        
        HtmlOutputText pedidocompraValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidocompraValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.pedidocompra}", PedidoCompra.class));
        pedidocompraValue.setConverter(new PedidoCompraConverter());
        htmlPanelGrid.getChildren().add(pedidocompraValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setId("statusValue");
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.status}", String.class));
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText itensLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itensLabel.setId("itensLabel");
        itensLabel.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensLabel);
        
        SelectManyMenu itensValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensValue.setId("itensValue");
        itensValue.setConverter(new ItemConverter());
        itensValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.selectedItens}", List.class));
        UISelectItems itensValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensValue.setReadonly(true);
        itensValue.setDisabled(true);
        itensValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{recebimentoBean.recebimento.itens}", Set.class));
        itensValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensValue.getChildren().add(itensValueItems);
        htmlPanelGrid.getChildren().add(itensValue);
        
        return htmlPanelGrid;
    }
    
    public Recebimento RecebimentoBean.getRecebimento() {
        if (recebimento == null) {
            recebimento = new Recebimento();
        }
        return recebimento;
    }
    
    public void RecebimentoBean.setRecebimento(Recebimento recebimento) {
        this.recebimento = recebimento;
    }
    
    public List<PedidoCompra> RecebimentoBean.completePedidocompra(String query) {
        List<PedidoCompra> suggestions = new ArrayList<PedidoCompra>();
        for (PedidoCompra pedidoCompra : PedidoCompra.findAllPedidoCompras()) {
            String pedidoCompraStr = String.valueOf(pedidoCompra.getDatapedidocompra() +  " "  + pedidoCompra.getTotal());
            if (pedidoCompraStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pedidoCompra);
            }
        }
        return suggestions;
    }
    
    public List<Item> RecebimentoBean.getSelectedItens() {
        return selectedItens;
    }
    
    public void RecebimentoBean.setSelectedItens(List<Item> selectedItens) {
        if (selectedItens != null) {
            recebimento.setItens(new HashSet<Item>(selectedItens));
        }
        this.selectedItens = selectedItens;
    }
    
    public String RecebimentoBean.onEdit() {
        if (recebimento != null && recebimento.getItens() != null) {
            selectedItens = new ArrayList<Item>(recebimento.getItens());
        }
        return null;
    }
    
    public boolean RecebimentoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void RecebimentoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String RecebimentoBean.displayList() {
        createDialogVisible = false;
        findAllRecebimentoes();
        return "recebimento";
    }
    
    public String RecebimentoBean.displayCreateDialog() {
        recebimento = new Recebimento();
        createDialogVisible = true;
        return "recebimento";
    }
    
    public String RecebimentoBean.persist() {
        String message = "";
        if (recebimento.getId() != null) {
            recebimento.merge();
            message = "message_successfully_updated";
        } else {
            recebimento.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Recebimento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRecebimentoes();
    }
    
    public String RecebimentoBean.delete() {
        recebimento.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Recebimento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRecebimentoes();
    }
    
    public void RecebimentoBean.reset() {
        recebimento = null;
        selectedItens = null;
        createDialogVisible = false;
    }
    
    public void RecebimentoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
