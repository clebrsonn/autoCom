// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Cliente;
import br.com.tecsoluction.sac.jsf.ClienteBean;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ClienteBean_Roo_ManagedBean {
    
    declare @type: ClienteBean: @ManagedBean(name = "clienteBean");
    
    declare @type: ClienteBean: @SessionScoped;
    
    private String ClienteBean.name = "Clientes";
    
    private Cliente ClienteBean.cliente;
    
    private List<Cliente> ClienteBean.allClientes;
    
    private boolean ClienteBean.dataVisible = false;
    
    private List<String> ClienteBean.columns;
    
    private HtmlPanelGrid ClienteBean.createPanelGrid;
    
    private HtmlPanelGrid ClienteBean.editPanelGrid;
    
    private HtmlPanelGrid ClienteBean.viewPanelGrid;
    
    private boolean ClienteBean.createDialogVisible = false;
    
    @PostConstruct
    public void ClienteBean.init() {
        columns = new ArrayList<String>();
        columns.add("nome");
        columns.add("cpf");
        columns.add("email");
        columns.add("facebook");
        columns.add("datanascimento");
    }
    
    public String ClienteBean.getName() {
        return name;
    }
    
    public List<String> ClienteBean.getColumns() {
        return columns;
    }
    
    public List<Cliente> ClienteBean.getAllClientes() {
        return allClientes;
    }
    
    public void ClienteBean.setAllClientes(List<Cliente> allClientes) {
        this.allClientes = allClientes;
    }
    
    public String ClienteBean.findAllClientes() {
        allClientes = Cliente.findAllClientes();
        dataVisible = !allClientes.isEmpty();
        return null;
    }
    
    public boolean ClienteBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ClienteBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ClienteBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ClienteBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ClienteBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ClienteBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeCreateOutput.setFor("nomeCreateInput");
        nomeCreateOutput.setId("nomeCreateOutput");
        nomeCreateOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeCreateOutput);
        
        InputText nomeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeCreateInput.setId("nomeCreateInput");
        nomeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nome}", String.class));
        nomeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeCreateInput);
        
        Message nomeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeCreateInputMessage.setId("nomeCreateInputMessage");
        nomeCreateInputMessage.setFor("nomeCreateInput");
        nomeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeCreateInputMessage);
        
        OutputLabel cpfCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cpfCreateOutput.setFor("cpfCreateInput");
        cpfCreateOutput.setId("cpfCreateOutput");
        cpfCreateOutput.setValue("Cpf:");
        htmlPanelGrid.getChildren().add(cpfCreateOutput);
        
        InputText cpfCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cpfCreateInput.setId("cpfCreateInput");
        cpfCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.cpf}", String.class));
        cpfCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cpfCreateInput);
        
        Message cpfCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cpfCreateInputMessage.setId("cpfCreateInputMessage");
        cpfCreateInputMessage.setFor("cpfCreateInput");
        cpfCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cpfCreateInputMessage);
        
        OutputLabel emailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailCreateOutput.setFor("emailCreateInput");
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.email}", String.class));
        emailCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        OutputLabel facebookCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        facebookCreateOutput.setFor("facebookCreateInput");
        facebookCreateOutput.setId("facebookCreateOutput");
        facebookCreateOutput.setValue("Facebook:");
        htmlPanelGrid.getChildren().add(facebookCreateOutput);
        
        InputText facebookCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        facebookCreateInput.setId("facebookCreateInput");
        facebookCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.facebook}", String.class));
        facebookCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(facebookCreateInput);
        
        Message facebookCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        facebookCreateInputMessage.setId("facebookCreateInputMessage");
        facebookCreateInputMessage.setFor("facebookCreateInput");
        facebookCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(facebookCreateInputMessage);
        
        OutputLabel datanascimentoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datanascimentoCreateOutput.setFor("datanascimentoCreateInput");
        datanascimentoCreateOutput.setId("datanascimentoCreateOutput");
        datanascimentoCreateOutput.setValue("Datanascimento:");
        htmlPanelGrid.getChildren().add(datanascimentoCreateOutput);
        
        Calendar datanascimentoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datanascimentoCreateInput.setId("datanascimentoCreateInput");
        datanascimentoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.datanascimento}", Date.class));
        datanascimentoCreateInput.setNavigator(true);
        datanascimentoCreateInput.setEffect("slideDown");
        datanascimentoCreateInput.setPattern("dd/MM/yyyy");
        datanascimentoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datanascimentoCreateInput);
        
        Message datanascimentoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datanascimentoCreateInputMessage.setId("datanascimentoCreateInputMessage");
        datanascimentoCreateInputMessage.setFor("datanascimentoCreateInput");
        datanascimentoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datanascimentoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeEditOutput.setFor("nomeEditInput");
        nomeEditOutput.setId("nomeEditOutput");
        nomeEditOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeEditOutput);
        
        InputText nomeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeEditInput.setId("nomeEditInput");
        nomeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nome}", String.class));
        nomeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeEditInput);
        
        Message nomeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeEditInputMessage.setId("nomeEditInputMessage");
        nomeEditInputMessage.setFor("nomeEditInput");
        nomeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeEditInputMessage);
        
        OutputLabel cpfEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cpfEditOutput.setFor("cpfEditInput");
        cpfEditOutput.setId("cpfEditOutput");
        cpfEditOutput.setValue("Cpf:");
        htmlPanelGrid.getChildren().add(cpfEditOutput);
        
        InputText cpfEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cpfEditInput.setId("cpfEditInput");
        cpfEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.cpf}", String.class));
        cpfEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cpfEditInput);
        
        Message cpfEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cpfEditInputMessage.setId("cpfEditInputMessage");
        cpfEditInputMessage.setFor("cpfEditInput");
        cpfEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cpfEditInputMessage);
        
        OutputLabel emailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailEditOutput.setFor("emailEditInput");
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.email}", String.class));
        emailEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        OutputLabel facebookEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        facebookEditOutput.setFor("facebookEditInput");
        facebookEditOutput.setId("facebookEditOutput");
        facebookEditOutput.setValue("Facebook:");
        htmlPanelGrid.getChildren().add(facebookEditOutput);
        
        InputText facebookEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        facebookEditInput.setId("facebookEditInput");
        facebookEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.facebook}", String.class));
        facebookEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(facebookEditInput);
        
        Message facebookEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        facebookEditInputMessage.setId("facebookEditInputMessage");
        facebookEditInputMessage.setFor("facebookEditInput");
        facebookEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(facebookEditInputMessage);
        
        OutputLabel datanascimentoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datanascimentoEditOutput.setFor("datanascimentoEditInput");
        datanascimentoEditOutput.setId("datanascimentoEditOutput");
        datanascimentoEditOutput.setValue("Datanascimento:");
        htmlPanelGrid.getChildren().add(datanascimentoEditOutput);
        
        Calendar datanascimentoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datanascimentoEditInput.setId("datanascimentoEditInput");
        datanascimentoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.datanascimento}", Date.class));
        datanascimentoEditInput.setNavigator(true);
        datanascimentoEditInput.setEffect("slideDown");
        datanascimentoEditInput.setPattern("dd/MM/yyyy");
        datanascimentoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datanascimentoEditInput);
        
        Message datanascimentoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datanascimentoEditInputMessage.setId("datanascimentoEditInputMessage");
        datanascimentoEditInputMessage.setFor("datanascimentoEditInput");
        datanascimentoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datanascimentoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ClienteBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeLabel.setId("nomeLabel");
        nomeLabel.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeLabel);
        
        HtmlOutputText nomeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeValue.setId("nomeValue");
        nomeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.nome}", String.class));
        htmlPanelGrid.getChildren().add(nomeValue);
        
        HtmlOutputText cpfLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cpfLabel.setId("cpfLabel");
        cpfLabel.setValue("Cpf:");
        htmlPanelGrid.getChildren().add(cpfLabel);
        
        HtmlOutputText cpfValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cpfValue.setId("cpfValue");
        cpfValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.cpf}", String.class));
        htmlPanelGrid.getChildren().add(cpfValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText facebookLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        facebookLabel.setId("facebookLabel");
        facebookLabel.setValue("Facebook:");
        htmlPanelGrid.getChildren().add(facebookLabel);
        
        HtmlOutputText facebookValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        facebookValue.setId("facebookValue");
        facebookValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.facebook}", String.class));
        htmlPanelGrid.getChildren().add(facebookValue);
        
        HtmlOutputText datanascimentoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datanascimentoLabel.setId("datanascimentoLabel");
        datanascimentoLabel.setValue("Datanascimento:");
        htmlPanelGrid.getChildren().add(datanascimentoLabel);
        
        HtmlOutputText datanascimentoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datanascimentoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{clienteBean.cliente.datanascimento}", Date.class));
        DateTimeConverter datanascimentoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datanascimentoValueConverter.setPattern("dd/MM/yyyy");
        datanascimentoValue.setConverter(datanascimentoValueConverter);
        htmlPanelGrid.getChildren().add(datanascimentoValue);
        
        return htmlPanelGrid;
    }
    
    public Cliente ClienteBean.getCliente() {
        if (cliente == null) {
            cliente = new Cliente();
        }
        return cliente;
    }
    
    public void ClienteBean.setCliente(Cliente cliente) {
        this.cliente = cliente;
    }
    
    public String ClienteBean.onEdit() {
        return null;
    }
    
    public boolean ClienteBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ClienteBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ClienteBean.displayList() {
        createDialogVisible = false;
        findAllClientes();
        return "cliente";
    }
    
    public String ClienteBean.displayCreateDialog() {
        cliente = new Cliente();
        createDialogVisible = true;
        return "cliente";
    }
    
    public String ClienteBean.persist() {
        String message = "";
        if (cliente.getId() != null) {
            cliente.merge();
            message = "message_successfully_updated";
        } else {
            cliente.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Cliente");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClientes();
    }
    
    public String ClienteBean.delete() {
        cliente.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Cliente");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllClientes();
    }
    
    public void ClienteBean.reset() {
        cliente = null;
        createDialogVisible = false;
    }
    
    public void ClienteBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
