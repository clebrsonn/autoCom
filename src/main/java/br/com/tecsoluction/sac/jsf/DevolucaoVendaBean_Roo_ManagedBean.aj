// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.DevolucaoVenda;
import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.PedidoVenda;
import br.com.tecsoluction.sac.jsf.DevolucaoVendaBean;
import br.com.tecsoluction.sac.jsf.converter.ItemConverter;
import br.com.tecsoluction.sac.jsf.converter.PedidoVendaConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect DevolucaoVendaBean_Roo_ManagedBean {
    
    declare @type: DevolucaoVendaBean: @ManagedBean(name = "devolucaoVendaBean");
    
    declare @type: DevolucaoVendaBean: @SessionScoped;
    
    private String DevolucaoVendaBean.name = "DevolucaoVendas";
    
    private DevolucaoVenda DevolucaoVendaBean.devolucaoVenda;
    
    private List<DevolucaoVenda> DevolucaoVendaBean.allDevolucaoVendas;
    
    private boolean DevolucaoVendaBean.dataVisible = false;
    
    private List<String> DevolucaoVendaBean.columns;
    
    private HtmlPanelGrid DevolucaoVendaBean.createPanelGrid;
    
    private HtmlPanelGrid DevolucaoVendaBean.editPanelGrid;
    
    private HtmlPanelGrid DevolucaoVendaBean.viewPanelGrid;
    
    private boolean DevolucaoVendaBean.createDialogVisible = false;
    
    private List<Item> DevolucaoVendaBean.selectedItens;
    
    @PostConstruct
    public void DevolucaoVendaBean.init() {
        columns = new ArrayList<String>();
        columns.add("datarecebimento");
        columns.add("status");
    }
    
    public String DevolucaoVendaBean.getName() {
        return name;
    }
    
    public List<String> DevolucaoVendaBean.getColumns() {
        return columns;
    }
    
    public List<DevolucaoVenda> DevolucaoVendaBean.getAllDevolucaoVendas() {
        return allDevolucaoVendas;
    }
    
    public void DevolucaoVendaBean.setAllDevolucaoVendas(List<DevolucaoVenda> allDevolucaoVendas) {
        this.allDevolucaoVendas = allDevolucaoVendas;
    }
    
    public String DevolucaoVendaBean.findAllDevolucaoVendas() {
        allDevolucaoVendas = DevolucaoVenda.findAllDevolucaoVendas();
        dataVisible = !allDevolucaoVendas.isEmpty();
        return null;
    }
    
    public boolean DevolucaoVendaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DevolucaoVendaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DevolucaoVendaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DevolucaoVendaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DevolucaoVendaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DevolucaoVendaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DevolucaoVendaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DevolucaoVendaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DevolucaoVendaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datarecebimentoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datarecebimentoCreateOutput.setFor("datarecebimentoCreateInput");
        datarecebimentoCreateOutput.setId("datarecebimentoCreateOutput");
        datarecebimentoCreateOutput.setValue("Datarecebimento:");
        htmlPanelGrid.getChildren().add(datarecebimentoCreateOutput);
        
        Calendar datarecebimentoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datarecebimentoCreateInput.setId("datarecebimentoCreateInput");
        datarecebimentoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.datarecebimento}", Date.class));
        datarecebimentoCreateInput.setNavigator(true);
        datarecebimentoCreateInput.setEffect("slideDown");
        datarecebimentoCreateInput.setPattern("dd/MM/yyyy");
        datarecebimentoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datarecebimentoCreateInput);
        
        Message datarecebimentoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datarecebimentoCreateInputMessage.setId("datarecebimentoCreateInputMessage");
        datarecebimentoCreateInputMessage.setFor("datarecebimentoCreateInput");
        datarecebimentoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datarecebimentoCreateInputMessage);
        
        OutputLabel pedidovendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidovendaCreateOutput.setFor("pedidovendaCreateInput");
        pedidovendaCreateOutput.setId("pedidovendaCreateOutput");
        pedidovendaCreateOutput.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaCreateOutput);
        
        AutoComplete pedidovendaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidovendaCreateInput.setId("pedidovendaCreateInput");
        pedidovendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.pedidovenda}", PedidoVenda.class));
        pedidovendaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{devolucaoVendaBean.completePedidovenda}", List.class, new Class[] { String.class }));
        pedidovendaCreateInput.setDropdown(true);
        pedidovendaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidovenda", String.class));
        pedidovendaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidovenda.datavenda}", String.class));
        pedidovendaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidovenda}", PedidoVenda.class));
        pedidovendaCreateInput.setConverter(new PedidoVendaConverter());
        pedidovendaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidovendaCreateInput);
        
        Message pedidovendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidovendaCreateInputMessage.setId("pedidovendaCreateInputMessage");
        pedidovendaCreateInputMessage.setFor("pedidovendaCreateInput");
        pedidovendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidovendaCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        InputText statusCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.status}", String.class));
        statusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel itensCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensCreateOutput.setFor("itensCreateInput");
        itensCreateOutput.setId("itensCreateOutput");
        itensCreateOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensCreateOutput);
        
        SelectManyMenu itensCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensCreateInput.setId("itensCreateInput");
        itensCreateInput.setConverter(new ItemConverter());
        itensCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.selectedItens}", List.class));
        UISelectItems itensCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensCreateInput.setRequired(false);
        itensCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensCreateInput.getChildren().add(itensCreateInputItems);
        htmlPanelGrid.getChildren().add(itensCreateInput);
        
        Message itensCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensCreateInputMessage.setId("itensCreateInputMessage");
        itensCreateInputMessage.setFor("itensCreateInput");
        itensCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DevolucaoVendaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datarecebimentoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datarecebimentoEditOutput.setFor("datarecebimentoEditInput");
        datarecebimentoEditOutput.setId("datarecebimentoEditOutput");
        datarecebimentoEditOutput.setValue("Datarecebimento:");
        htmlPanelGrid.getChildren().add(datarecebimentoEditOutput);
        
        Calendar datarecebimentoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datarecebimentoEditInput.setId("datarecebimentoEditInput");
        datarecebimentoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.datarecebimento}", Date.class));
        datarecebimentoEditInput.setNavigator(true);
        datarecebimentoEditInput.setEffect("slideDown");
        datarecebimentoEditInput.setPattern("dd/MM/yyyy");
        datarecebimentoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datarecebimentoEditInput);
        
        Message datarecebimentoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datarecebimentoEditInputMessage.setId("datarecebimentoEditInputMessage");
        datarecebimentoEditInputMessage.setFor("datarecebimentoEditInput");
        datarecebimentoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datarecebimentoEditInputMessage);
        
        OutputLabel pedidovendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidovendaEditOutput.setFor("pedidovendaEditInput");
        pedidovendaEditOutput.setId("pedidovendaEditOutput");
        pedidovendaEditOutput.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaEditOutput);
        
        AutoComplete pedidovendaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidovendaEditInput.setId("pedidovendaEditInput");
        pedidovendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.pedidovenda}", PedidoVenda.class));
        pedidovendaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{devolucaoVendaBean.completePedidovenda}", List.class, new Class[] { String.class }));
        pedidovendaEditInput.setDropdown(true);
        pedidovendaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidovenda", String.class));
        pedidovendaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidovenda.datavenda}", String.class));
        pedidovendaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidovenda}", PedidoVenda.class));
        pedidovendaEditInput.setConverter(new PedidoVendaConverter());
        pedidovendaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidovendaEditInput);
        
        Message pedidovendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidovendaEditInputMessage.setId("pedidovendaEditInputMessage");
        pedidovendaEditInputMessage.setFor("pedidovendaEditInput");
        pedidovendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidovendaEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        InputText statusEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.status}", String.class));
        statusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel itensEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensEditOutput.setFor("itensEditInput");
        itensEditOutput.setId("itensEditOutput");
        itensEditOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensEditOutput);
        
        SelectManyMenu itensEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensEditInput.setId("itensEditInput");
        itensEditInput.setConverter(new ItemConverter());
        itensEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.selectedItens}", List.class));
        UISelectItems itensEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensEditInput.setRequired(false);
        itensEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensEditInput.getChildren().add(itensEditInputItems);
        htmlPanelGrid.getChildren().add(itensEditInput);
        
        Message itensEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensEditInputMessage.setId("itensEditInputMessage");
        itensEditInputMessage.setFor("itensEditInput");
        itensEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DevolucaoVendaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText datarecebimentoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datarecebimentoLabel.setId("datarecebimentoLabel");
        datarecebimentoLabel.setValue("Datarecebimento:");
        htmlPanelGrid.getChildren().add(datarecebimentoLabel);
        
        HtmlOutputText datarecebimentoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datarecebimentoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.datarecebimento}", Date.class));
        DateTimeConverter datarecebimentoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datarecebimentoValueConverter.setPattern("dd/MM/yyyy");
        datarecebimentoValue.setConverter(datarecebimentoValueConverter);
        htmlPanelGrid.getChildren().add(datarecebimentoValue);
        
        HtmlOutputText pedidovendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidovendaLabel.setId("pedidovendaLabel");
        pedidovendaLabel.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaLabel);
        
        HtmlOutputText pedidovendaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidovendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.pedidovenda}", PedidoVenda.class));
        pedidovendaValue.setConverter(new PedidoVendaConverter());
        htmlPanelGrid.getChildren().add(pedidovendaValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setId("statusValue");
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.status}", String.class));
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText itensLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itensLabel.setId("itensLabel");
        itensLabel.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensLabel);
        
        SelectManyMenu itensValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensValue.setId("itensValue");
        itensValue.setConverter(new ItemConverter());
        itensValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.selectedItens}", List.class));
        UISelectItems itensValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensValue.setReadonly(true);
        itensValue.setDisabled(true);
        itensValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{devolucaoVendaBean.devolucaoVenda.itens}", Set.class));
        itensValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensValue.getChildren().add(itensValueItems);
        htmlPanelGrid.getChildren().add(itensValue);
        
        return htmlPanelGrid;
    }
    
    public DevolucaoVenda DevolucaoVendaBean.getDevolucaoVenda() {
        if (devolucaoVenda == null) {
            devolucaoVenda = new DevolucaoVenda();
        }
        return devolucaoVenda;
    }
    
    public void DevolucaoVendaBean.setDevolucaoVenda(DevolucaoVenda devolucaoVenda) {
        this.devolucaoVenda = devolucaoVenda;
    }
    
    public List<PedidoVenda> DevolucaoVendaBean.completePedidovenda(String query) {
        List<PedidoVenda> suggestions = new ArrayList<PedidoVenda>();
        for (PedidoVenda pedidoVenda : PedidoVenda.findAllPedidoVendas()) {
            String pedidoVendaStr = String.valueOf(pedidoVenda.getDatavenda());
            if (pedidoVendaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pedidoVenda);
            }
        }
        return suggestions;
    }
    
    public List<Item> DevolucaoVendaBean.getSelectedItens() {
        return selectedItens;
    }
    
    public void DevolucaoVendaBean.setSelectedItens(List<Item> selectedItens) {
        if (selectedItens != null) {
            devolucaoVenda.setItens(new HashSet<Item>(selectedItens));
        }
        this.selectedItens = selectedItens;
    }
    
    public String DevolucaoVendaBean.onEdit() {
        if (devolucaoVenda != null && devolucaoVenda.getItens() != null) {
            selectedItens = new ArrayList<Item>(devolucaoVenda.getItens());
        }
        return null;
    }
    
    public boolean DevolucaoVendaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DevolucaoVendaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DevolucaoVendaBean.displayList() {
        createDialogVisible = false;
        findAllDevolucaoVendas();
        return "devolucaoVenda";
    }
    
    public String DevolucaoVendaBean.displayCreateDialog() {
        devolucaoVenda = new DevolucaoVenda();
        createDialogVisible = true;
        return "devolucaoVenda";
    }
    
    public String DevolucaoVendaBean.persist() {
        String message = "";
        if (devolucaoVenda.getId() != null) {
            devolucaoVenda.merge();
            message = "message_successfully_updated";
        } else {
            devolucaoVenda.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "DevolucaoVenda");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDevolucaoVendas();
    }
    
    public String DevolucaoVendaBean.delete() {
        devolucaoVenda.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "DevolucaoVenda");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDevolucaoVendas();
    }
    
    public void DevolucaoVendaBean.reset() {
        devolucaoVenda = null;
        selectedItens = null;
        createDialogVisible = false;
    }
    
    public void DevolucaoVendaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
