// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Caixa;
import br.com.tecsoluction.sac.PedidoVenda;
import br.com.tecsoluction.sac.jsf.CaixaBean;
import br.com.tecsoluction.sac.jsf.converter.PedidoVendaConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CaixaBean_Roo_ManagedBean {
    
    declare @type: CaixaBean: @ManagedBean(name = "caixaBean");
    
    declare @type: CaixaBean: @SessionScoped;
    
    private String CaixaBean.name = "Caixas";
    
    private Caixa CaixaBean.caixa;
    
    private List<Caixa> CaixaBean.allCaixas;
    
    private boolean CaixaBean.dataVisible = false;
    
    private List<String> CaixaBean.columns;
    
    private HtmlPanelGrid CaixaBean.createPanelGrid;
    
    private HtmlPanelGrid CaixaBean.editPanelGrid;
    
    private HtmlPanelGrid CaixaBean.viewPanelGrid;
    
    private boolean CaixaBean.createDialogVisible = false;
    
    private List<PedidoVenda> CaixaBean.selectedPedidodevenda;
    
    @PostConstruct
    public void CaixaBean.init() {
        columns = new ArrayList<String>();
        columns.add("numero");
        columns.add("datacriacao");
        columns.add("total");
    }
    
    public String CaixaBean.getName() {
        return name;
    }
    
    public List<String> CaixaBean.getColumns() {
        return columns;
    }
    
    public List<Caixa> CaixaBean.getAllCaixas() {
        return allCaixas;
    }
    
    public void CaixaBean.setAllCaixas(List<Caixa> allCaixas) {
        this.allCaixas = allCaixas;
    }
    
    public String CaixaBean.findAllCaixas() {
        allCaixas = Caixa.findAllCaixas();
        dataVisible = !allCaixas.isEmpty();
        return null;
    }
    
    public boolean CaixaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CaixaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CaixaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CaixaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CaixaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CaixaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CaixaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CaixaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CaixaBean.populateCreatePanel() {
        
    	FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numeroCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroCreateOutput.setFor("numeroCreateInput");
        numeroCreateOutput.setId("numeroCreateOutput");
        numeroCreateOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroCreateOutput);
        
        InputText numeroCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numeroCreateInput.setId("numeroCreateInput");
        numeroCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.numero}", String.class));
        numeroCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numeroCreateInput);
        
        Message numeroCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroCreateInputMessage.setId("numeroCreateInputMessage");
        numeroCreateInputMessage.setFor("numeroCreateInput");
        numeroCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroCreateInputMessage);
        
        OutputLabel pedidodevendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidodevendaCreateOutput.setFor("pedidodevendaCreateInput");
        pedidodevendaCreateOutput.setId("pedidodevendaCreateOutput");
        pedidodevendaCreateOutput.setValue("Pedidodevenda:");
        htmlPanelGrid.getChildren().add(pedidodevendaCreateOutput);
        
        SelectManyMenu pedidodevendaCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        pedidodevendaCreateInput.setId("pedidodevendaCreateInput");
        pedidodevendaCreateInput.setConverter(new PedidoVendaConverter());
        pedidodevendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.selectedPedidodevenda}", List.class));
        UISelectItems pedidodevendaCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        pedidodevendaCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoVendaBean.allPedidoVendas}", List.class));
        pedidodevendaCreateInput.setRequired(false);
        pedidodevendaCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidoVenda", String.class));
        pedidodevendaCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", String.class));
        pedidodevendaCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", PedidoVenda.class));
        pedidodevendaCreateInput.getChildren().add(pedidodevendaCreateInputItems);
        htmlPanelGrid.getChildren().add(pedidodevendaCreateInput);
        
        Message pedidodevendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidodevendaCreateInputMessage.setId("pedidodevendaCreateInputMessage");
        pedidodevendaCreateInputMessage.setFor("pedidodevendaCreateInput");
        pedidodevendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidodevendaCreateInputMessage);
        
        OutputLabel datacriacaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoCreateOutput.setFor("datacriacaoCreateInput");
        datacriacaoCreateOutput.setId("datacriacaoCreateOutput");
        datacriacaoCreateOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoCreateOutput);
        
        Calendar datacriacaoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoCreateInput.setId("datacriacaoCreateInput");
        datacriacaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.datacriacao}", Date.class));
        datacriacaoCreateInput.setNavigator(true);
        datacriacaoCreateInput.setEffect("slideDown");
        datacriacaoCreateInput.setPattern("dd/MM/yyyy");
        datacriacaoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacriacaoCreateInput);
        
        Message datacriacaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoCreateInputMessage.setId("datacriacaoCreateInputMessage");
        datacriacaoCreateInputMessage.setFor("datacriacaoCreateInput");
        datacriacaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoCreateInputMessage);
        
        OutputLabel totalCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        totalCreateOutput.setFor("totalCreateInput");
        totalCreateOutput.setId("totalCreateOutput");
        totalCreateOutput.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalCreateOutput);
        
        InputText totalCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        totalCreateInput.setId("totalCreateInput");
        totalCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.total}", Double.class));
        totalCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(totalCreateInput);
        
        Message totalCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        totalCreateInputMessage.setId("totalCreateInputMessage");
        totalCreateInputMessage.setFor("totalCreateInput");
        totalCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(totalCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CaixaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numeroEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroEditOutput.setFor("numeroEditInput");
        numeroEditOutput.setId("numeroEditOutput");
        numeroEditOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroEditOutput);
        
        InputText numeroEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numeroEditInput.setId("numeroEditInput");
        numeroEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.numero}", String.class));
        numeroEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numeroEditInput);
        
        Message numeroEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroEditInputMessage.setId("numeroEditInputMessage");
        numeroEditInputMessage.setFor("numeroEditInput");
        numeroEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroEditInputMessage);
        
        OutputLabel pedidodevendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidodevendaEditOutput.setFor("pedidodevendaEditInput");
        pedidodevendaEditOutput.setId("pedidodevendaEditOutput");
        pedidodevendaEditOutput.setValue("Pedidodevenda:");
        htmlPanelGrid.getChildren().add(pedidodevendaEditOutput);
        
        SelectManyMenu pedidodevendaEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        pedidodevendaEditInput.setId("pedidodevendaEditInput");
        pedidodevendaEditInput.setConverter(new PedidoVendaConverter());
        pedidodevendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.selectedPedidodevenda}", List.class));
        UISelectItems pedidodevendaEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        pedidodevendaEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoVendaBean.allPedidoVendas}", List.class));
        pedidodevendaEditInput.setRequired(false);
        pedidodevendaEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidoVenda", String.class));
        pedidodevendaEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", String.class));
        pedidodevendaEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", PedidoVenda.class));
        pedidodevendaEditInput.getChildren().add(pedidodevendaEditInputItems);
        htmlPanelGrid.getChildren().add(pedidodevendaEditInput);
        
        Message pedidodevendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidodevendaEditInputMessage.setId("pedidodevendaEditInputMessage");
        pedidodevendaEditInputMessage.setFor("pedidodevendaEditInput");
        pedidodevendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidodevendaEditInputMessage);
        
        OutputLabel datacriacaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoEditOutput.setFor("datacriacaoEditInput");
        datacriacaoEditOutput.setId("datacriacaoEditOutput");
        datacriacaoEditOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoEditOutput);
        
        Calendar datacriacaoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoEditInput.setId("datacriacaoEditInput");
        datacriacaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.datacriacao}", Date.class));
        datacriacaoEditInput.setNavigator(true);
        datacriacaoEditInput.setEffect("slideDown");
        datacriacaoEditInput.setPattern("dd/MM/yyyy");
        datacriacaoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacriacaoEditInput);
        
        Message datacriacaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoEditInputMessage.setId("datacriacaoEditInputMessage");
        datacriacaoEditInputMessage.setFor("datacriacaoEditInput");
        datacriacaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoEditInputMessage);
        
        OutputLabel totalEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        totalEditOutput.setFor("totalEditInput");
        totalEditOutput.setId("totalEditOutput");
        totalEditOutput.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalEditOutput);
        
        InputText totalEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        totalEditInput.setId("totalEditInput");
        totalEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.total}", Double.class));
        totalEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(totalEditInput);
        
        Message totalEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        totalEditInputMessage.setId("totalEditInputMessage");
        totalEditInputMessage.setFor("totalEditInput");
        totalEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(totalEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CaixaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText numeroLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroLabel.setId("numeroLabel");
        numeroLabel.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroLabel);
        
        HtmlOutputText numeroValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroValue.setId("numeroValue");
        numeroValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.numero}", String.class));
        htmlPanelGrid.getChildren().add(numeroValue);
        
        HtmlOutputText pedidodevendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidodevendaLabel.setId("pedidodevendaLabel");
        pedidodevendaLabel.setValue("Pedidodevenda:");
        htmlPanelGrid.getChildren().add(pedidodevendaLabel);
        
        SelectManyMenu pedidodevendaValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        pedidodevendaValue.setId("pedidodevendaValue");
        pedidodevendaValue.setConverter(new PedidoVendaConverter());
        pedidodevendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.selectedPedidodevenda}", List.class));
        UISelectItems pedidodevendaValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        pedidodevendaValue.setReadonly(true);
        pedidodevendaValue.setDisabled(true);
        pedidodevendaValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.pedidodevenda}", Set.class));
        pedidodevendaValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidoVenda", String.class));
        pedidodevendaValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", String.class));
        pedidodevendaValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", PedidoVenda.class));
        pedidodevendaValue.getChildren().add(pedidodevendaValueItems);
        htmlPanelGrid.getChildren().add(pedidodevendaValue);
        
        HtmlOutputText datacriacaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoLabel.setId("datacriacaoLabel");
        datacriacaoLabel.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoLabel);
        
        HtmlOutputText datacriacaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.datacriacao}", Date.class));
        DateTimeConverter datacriacaoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datacriacaoValueConverter.setPattern("dd/MM/yyyy");
        datacriacaoValue.setConverter(datacriacaoValueConverter);
        htmlPanelGrid.getChildren().add(datacriacaoValue);
        
        HtmlOutputText totalLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        totalLabel.setId("totalLabel");
        totalLabel.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalLabel);
        
        HtmlOutputText totalValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        totalValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.caixa.total}", String.class));
        htmlPanelGrid.getChildren().add(totalValue);
        
        return htmlPanelGrid;
    }
    
    public Caixa CaixaBean.getCaixa() {
        if (caixa == null) {
            caixa = new Caixa();
        }
        return caixa;
    }
    
    public void CaixaBean.setCaixa(Caixa caixa) {
        this.caixa = caixa;
    }
    
    public List<PedidoVenda> CaixaBean.getSelectedPedidodevenda() {
        return selectedPedidodevenda;
    }
    
    public void CaixaBean.setSelectedPedidodevenda(List<PedidoVenda> selectedPedidodevenda) {
        if (selectedPedidodevenda != null) {
            caixa.setPedidodevenda(new HashSet<PedidoVenda>(selectedPedidodevenda));
        }
        this.selectedPedidodevenda = selectedPedidodevenda;
    }
    
    public String CaixaBean.onEdit() {
        if (caixa != null && caixa.getPedidodevenda() != null) {
            selectedPedidodevenda = new ArrayList<PedidoVenda>(caixa.getPedidodevenda());
        }
        return null;
    }
    
    public boolean CaixaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CaixaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CaixaBean.displayList() {
        createDialogVisible = false;
        findAllCaixas();
        return "caixa";
    }
    
    public String CaixaBean.displayCreateDialog() {
        caixa = new Caixa();
        createDialogVisible = true;
        return "caixa";
    }
    
    public String CaixaBean.persist() {
        String message = "";
        if (caixa.getId() != null) {
            caixa.merge();
            message = "message_successfully_updated";
        } else {
            caixa.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Caixa");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCaixas();
    }
    
    public String CaixaBean.delete() {
        caixa.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Caixa");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCaixas();
    }
    
    public void CaixaBean.reset() {
        caixa = null;
        selectedPedidodevenda = null;
        createDialogVisible = false;
    }
    
    public void CaixaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
