// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Cotacao;
import br.com.tecsoluction.sac.Fornecedor;
import br.com.tecsoluction.sac.jsf.CotacaoBean;
import br.com.tecsoluction.sac.jsf.converter.FornecedorConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CotacaoBean_Roo_ManagedBean {
    
    declare @type: CotacaoBean: @ManagedBean(name = "cotacaoBean");
    
    declare @type: CotacaoBean: @SessionScoped;
    
    private String CotacaoBean.name = "Cotacaos";
    
    private Cotacao CotacaoBean.cotacao;
    
    private List<Cotacao> CotacaoBean.allCotacaos;
    
    private boolean CotacaoBean.dataVisible = false;
    
    private List<String> CotacaoBean.columns;
    
    private HtmlPanelGrid CotacaoBean.createPanelGrid;
    
    private HtmlPanelGrid CotacaoBean.editPanelGrid;
    
    private HtmlPanelGrid CotacaoBean.viewPanelGrid;
    
    private boolean CotacaoBean.createDialogVisible = false;
    
    @PostConstruct
    public void CotacaoBean.init() {
        columns = new ArrayList<String>();
        columns.add("datacotacao");
        columns.add("status");
    }
    
    public String CotacaoBean.getName() {
        return name;
    }
    
    public List<String> CotacaoBean.getColumns() {
        return columns;
    }
    
    public List<Cotacao> CotacaoBean.getAllCotacaos() {
        return allCotacaos;
    }
    
    public void CotacaoBean.setAllCotacaos(List<Cotacao> allCotacaos) {
        this.allCotacaos = allCotacaos;
    }
    
    public String CotacaoBean.findAllCotacaos() {
        allCotacaos = Cotacao.findAllCotacaos();
        dataVisible = !allCotacaos.isEmpty();
        return null;
    }
    
    public boolean CotacaoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CotacaoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CotacaoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CotacaoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CotacaoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CotacaoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CotacaoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CotacaoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CotacaoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datacotacaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacotacaoCreateOutput.setFor("datacotacaoCreateInput");
        datacotacaoCreateOutput.setId("datacotacaoCreateOutput");
        datacotacaoCreateOutput.setValue("Datacotacao:");
        htmlPanelGrid.getChildren().add(datacotacaoCreateOutput);
        
        Calendar datacotacaoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacotacaoCreateInput.setId("datacotacaoCreateInput");
        datacotacaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.datacotacao}", Date.class));
        datacotacaoCreateInput.setNavigator(true);
        datacotacaoCreateInput.setEffect("slideDown");
        datacotacaoCreateInput.setPattern("dd/MM/yyyy");
        datacotacaoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacotacaoCreateInput);
        
        Message datacotacaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacotacaoCreateInputMessage.setId("datacotacaoCreateInputMessage");
        datacotacaoCreateInputMessage.setFor("datacotacaoCreateInput");
        datacotacaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacotacaoCreateInputMessage);
        
        OutputLabel fornecedorCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fornecedorCreateOutput.setFor("fornecedorCreateInput");
        fornecedorCreateOutput.setId("fornecedorCreateOutput");
        fornecedorCreateOutput.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorCreateOutput);
        
        AutoComplete fornecedorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        fornecedorCreateInput.setId("fornecedorCreateInput");
        fornecedorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.fornecedor}", Fornecedor.class));
        fornecedorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{cotacaoBean.completeFornecedor}", List.class, new Class[] { String.class }));
        fornecedorCreateInput.setDropdown(true);
        fornecedorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "fornecedor", String.class));
        fornecedorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{fornecedor.nomefantasia} #{fornecedor.cnpj} #{fornecedor.razaosocial} #{fornecedor.inscricaoestadual}", String.class));
        fornecedorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{fornecedor}", Fornecedor.class));
        fornecedorCreateInput.setConverter(new FornecedorConverter());
        fornecedorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fornecedorCreateInput);
        
        Message fornecedorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fornecedorCreateInputMessage.setId("fornecedorCreateInputMessage");
        fornecedorCreateInputMessage.setFor("fornecedorCreateInput");
        fornecedorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fornecedorCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        InputText statusCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.status}", String.class));
        statusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CotacaoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datacotacaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacotacaoEditOutput.setFor("datacotacaoEditInput");
        datacotacaoEditOutput.setId("datacotacaoEditOutput");
        datacotacaoEditOutput.setValue("Datacotacao:");
        htmlPanelGrid.getChildren().add(datacotacaoEditOutput);
        
        Calendar datacotacaoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacotacaoEditInput.setId("datacotacaoEditInput");
        datacotacaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.datacotacao}", Date.class));
        datacotacaoEditInput.setNavigator(true);
        datacotacaoEditInput.setEffect("slideDown");
        datacotacaoEditInput.setPattern("dd/MM/yyyy");
        datacotacaoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacotacaoEditInput);
        
        Message datacotacaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacotacaoEditInputMessage.setId("datacotacaoEditInputMessage");
        datacotacaoEditInputMessage.setFor("datacotacaoEditInput");
        datacotacaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacotacaoEditInputMessage);
        
        OutputLabel fornecedorEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fornecedorEditOutput.setFor("fornecedorEditInput");
        fornecedorEditOutput.setId("fornecedorEditOutput");
        fornecedorEditOutput.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorEditOutput);
        
        AutoComplete fornecedorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        fornecedorEditInput.setId("fornecedorEditInput");
        fornecedorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.fornecedor}", Fornecedor.class));
        fornecedorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{cotacaoBean.completeFornecedor}", List.class, new Class[] { String.class }));
        fornecedorEditInput.setDropdown(true);
        fornecedorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "fornecedor", String.class));
        fornecedorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{fornecedor.nomefantasia} #{fornecedor.cnpj} #{fornecedor.razaosocial} #{fornecedor.inscricaoestadual}", String.class));
        fornecedorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{fornecedor}", Fornecedor.class));
        fornecedorEditInput.setConverter(new FornecedorConverter());
        fornecedorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fornecedorEditInput);
        
        Message fornecedorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fornecedorEditInputMessage.setId("fornecedorEditInputMessage");
        fornecedorEditInputMessage.setFor("fornecedorEditInput");
        fornecedorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fornecedorEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        InputText statusEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.status}", String.class));
        statusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CotacaoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText datacotacaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacotacaoLabel.setId("datacotacaoLabel");
        datacotacaoLabel.setValue("Datacotacao:");
        htmlPanelGrid.getChildren().add(datacotacaoLabel);
        
        HtmlOutputText datacotacaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacotacaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.datacotacao}", Date.class));
        DateTimeConverter datacotacaoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datacotacaoValueConverter.setPattern("dd/MM/yyyy");
        datacotacaoValue.setConverter(datacotacaoValueConverter);
        htmlPanelGrid.getChildren().add(datacotacaoValue);
        
        HtmlOutputText fornecedorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fornecedorLabel.setId("fornecedorLabel");
        fornecedorLabel.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorLabel);
        
        HtmlOutputText fornecedorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fornecedorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.fornecedor}", Fornecedor.class));
        fornecedorValue.setConverter(new FornecedorConverter());
        htmlPanelGrid.getChildren().add(fornecedorValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setId("statusValue");
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{cotacaoBean.cotacao.status}", String.class));
        htmlPanelGrid.getChildren().add(statusValue);
        
        return htmlPanelGrid;
    }
    
    public Cotacao CotacaoBean.getCotacao() {
        if (cotacao == null) {
            cotacao = new Cotacao();
        }
        return cotacao;
    }
    
    public void CotacaoBean.setCotacao(Cotacao cotacao) {
        this.cotacao = cotacao;
    }
    
    public List<Fornecedor> CotacaoBean.completeFornecedor(String query) {
        List<Fornecedor> suggestions = new ArrayList<Fornecedor>();
        for (Fornecedor fornecedor : Fornecedor.findAllFornecedors()) {
            String fornecedorStr = String.valueOf(fornecedor.getNomefantasia() +  " "  + fornecedor.getCnpj() +  " "  + fornecedor.getRazaosocial() +  " "  + fornecedor.getInscricaoestadual());
            if (fornecedorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(fornecedor);
            }
        }
        return suggestions;
    }
    
    public String CotacaoBean.onEdit() {
        return null;
    }
    
    public boolean CotacaoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CotacaoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CotacaoBean.displayList() {
        createDialogVisible = false;
        findAllCotacaos();
        return "cotacao";
    }
    
    public String CotacaoBean.displayCreateDialog() {
        cotacao = new Cotacao();
        createDialogVisible = true;
        return "cotacao";
    }
    
    public String CotacaoBean.persist() {
        String message = "";
        if (cotacao.getId() != null) {
            cotacao.merge();
            message = "message_successfully_updated";
        } else {
            cotacao.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Cotacao");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCotacaos();
    }
    
    public String CotacaoBean.delete() {
        cotacao.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Cotacao");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCotacaos();
    }
    
    public void CotacaoBean.reset() {
        cotacao = null;
        createDialogVisible = false;
    }
    
    public void CotacaoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
