// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.NotaFiscal;
import br.com.tecsoluction.sac.jsf.NotaFiscalBean;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect NotaFiscalBean_Roo_ManagedBean {
    
    declare @type: NotaFiscalBean: @ManagedBean(name = "notaFiscalBean");
    
    declare @type: NotaFiscalBean: @SessionScoped;
    
    private String NotaFiscalBean.name = "NotaFiscals";
    
    private NotaFiscal NotaFiscalBean.notaFiscal;
    
    private List<NotaFiscal> NotaFiscalBean.allNotaFiscals;
    
    private boolean NotaFiscalBean.dataVisible = false;
    
    private List<String> NotaFiscalBean.columns;
    
    private HtmlPanelGrid NotaFiscalBean.createPanelGrid;
    
    private HtmlPanelGrid NotaFiscalBean.editPanelGrid;
    
    private HtmlPanelGrid NotaFiscalBean.viewPanelGrid;
    
    private boolean NotaFiscalBean.createDialogVisible = false;
    
    @PostConstruct
    public void NotaFiscalBean.init() {
        columns = new ArrayList<String>();
        columns.add("numero");
    }
    
    public String NotaFiscalBean.getName() {
        return name;
    }
    
    public List<String> NotaFiscalBean.getColumns() {
        return columns;
    }
    
    public List<NotaFiscal> NotaFiscalBean.getAllNotaFiscals() {
        return allNotaFiscals;
    }
    
    public void NotaFiscalBean.setAllNotaFiscals(List<NotaFiscal> allNotaFiscals) {
        this.allNotaFiscals = allNotaFiscals;
    }
    
    public String NotaFiscalBean.findAllNotaFiscals() {
        allNotaFiscals = NotaFiscal.findAllNotaFiscals();
        dataVisible = !allNotaFiscals.isEmpty();
        return null;
    }
    
    public boolean NotaFiscalBean.isDataVisible() {
        return dataVisible;
    }
    
    public void NotaFiscalBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid NotaFiscalBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void NotaFiscalBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid NotaFiscalBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void NotaFiscalBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid NotaFiscalBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void NotaFiscalBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid NotaFiscalBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numeroCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroCreateOutput.setFor("numeroCreateInput");
        numeroCreateOutput.setId("numeroCreateOutput");
        numeroCreateOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroCreateOutput);
        
        InputText numeroCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numeroCreateInput.setId("numeroCreateInput");
        numeroCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{notaFiscalBean.notaFiscal.numero}", String.class));
        numeroCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numeroCreateInput);
        
        Message numeroCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroCreateInputMessage.setId("numeroCreateInputMessage");
        numeroCreateInputMessage.setFor("numeroCreateInput");
        numeroCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid NotaFiscalBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numeroEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroEditOutput.setFor("numeroEditInput");
        numeroEditOutput.setId("numeroEditOutput");
        numeroEditOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroEditOutput);
        
        InputText numeroEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numeroEditInput.setId("numeroEditInput");
        numeroEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{notaFiscalBean.notaFiscal.numero}", String.class));
        numeroEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numeroEditInput);
        
        Message numeroEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroEditInputMessage.setId("numeroEditInputMessage");
        numeroEditInputMessage.setFor("numeroEditInput");
        numeroEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid NotaFiscalBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText numeroLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroLabel.setId("numeroLabel");
        numeroLabel.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroLabel);
        
        HtmlOutputText numeroValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroValue.setId("numeroValue");
        numeroValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{notaFiscalBean.notaFiscal.numero}", String.class));
        htmlPanelGrid.getChildren().add(numeroValue);
        
        return htmlPanelGrid;
    }
    
    public NotaFiscal NotaFiscalBean.getNotaFiscal() {
        if (notaFiscal == null) {
            notaFiscal = new NotaFiscal();
        }
        return notaFiscal;
    }
    
    public void NotaFiscalBean.setNotaFiscal(NotaFiscal notaFiscal) {
        this.notaFiscal = notaFiscal;
    }
    
    public String NotaFiscalBean.onEdit() {
        return null;
    }
    
    public boolean NotaFiscalBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void NotaFiscalBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String NotaFiscalBean.displayList() {
        createDialogVisible = false;
        findAllNotaFiscals();
        return "notaFiscal";
    }
    
    public String NotaFiscalBean.displayCreateDialog() {
        notaFiscal = new NotaFiscal();
        createDialogVisible = true;
        return "notaFiscal";
    }
    
    public String NotaFiscalBean.persist() {
        String message = "";
        if (notaFiscal.getId() != null) {
            notaFiscal.merge();
            message = "message_successfully_updated";
        } else {
            notaFiscal.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "NotaFiscal");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllNotaFiscals();
    }
    
    public String NotaFiscalBean.delete() {
        notaFiscal.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "NotaFiscal");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllNotaFiscals();
    }
    
    public void NotaFiscalBean.reset() {
        notaFiscal = null;
        createDialogVisible = false;
    }
    
    public void NotaFiscalBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
