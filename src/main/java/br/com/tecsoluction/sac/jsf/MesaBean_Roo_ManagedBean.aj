// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Mesa;
import br.com.tecsoluction.sac.PedidoVenda;
import br.com.tecsoluction.sac.jsf.MesaBean;
import br.com.tecsoluction.sac.jsf.converter.PedidoVendaConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect MesaBean_Roo_ManagedBean {
    
    declare @type: MesaBean: @ManagedBean(name = "mesaBean");
    
    declare @type: MesaBean: @SessionScoped;
    
    private String MesaBean.name = "Mesas";
    
    private Mesa MesaBean.mesa;
    
    private List<Mesa> MesaBean.allMesas;
    
    private boolean MesaBean.dataVisible = false;
    
    private List<String> MesaBean.columns;
    
    private HtmlPanelGrid MesaBean.createPanelGrid;
    
    private HtmlPanelGrid MesaBean.editPanelGrid;
    
    private HtmlPanelGrid MesaBean.viewPanelGrid;
    
    private boolean MesaBean.createDialogVisible = false;
    
    private List<PedidoVenda> MesaBean.selectedPedidosvenda;
    
    @PostConstruct
    public void MesaBean.init() {
        columns = new ArrayList<String>();
        columns.add("numero");
        columns.add("datacriacao");
        columns.add("status");
    }
    
    public String MesaBean.getName() {
        return name;
    }
    
    public List<String> MesaBean.getColumns() {
        return columns;
    }
    
    public List<Mesa> MesaBean.getAllMesas() {
        return allMesas;
    }
    
    public void MesaBean.setAllMesas(List<Mesa> allMesas) {
        this.allMesas = allMesas;
    }
    
    public String MesaBean.findAllMesas() {
        allMesas = Mesa.findAllMesas();
        dataVisible = !allMesas.isEmpty();
        return null;
    }
    
    public boolean MesaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void MesaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid MesaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void MesaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid MesaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void MesaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid MesaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void MesaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid MesaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numeroCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroCreateOutput.setFor("numeroCreateInput");
        numeroCreateOutput.setId("numeroCreateOutput");
        numeroCreateOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroCreateOutput);
        
        InputText numeroCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numeroCreateInput.setId("numeroCreateInput");
        numeroCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.numero}", String.class));
        numeroCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numeroCreateInput);
        
        Message numeroCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroCreateInputMessage.setId("numeroCreateInputMessage");
        numeroCreateInputMessage.setFor("numeroCreateInput");
        numeroCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroCreateInputMessage);
        
        OutputLabel datacriacaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoCreateOutput.setFor("datacriacaoCreateInput");
        datacriacaoCreateOutput.setId("datacriacaoCreateOutput");
        datacriacaoCreateOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoCreateOutput);
        
        Calendar datacriacaoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoCreateInput.setId("datacriacaoCreateInput");
        datacriacaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.datacriacao}", Date.class));
        datacriacaoCreateInput.setNavigator(true);
        datacriacaoCreateInput.setEffect("slideDown");
        datacriacaoCreateInput.setPattern("dd/MM/yyyy");
        datacriacaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(datacriacaoCreateInput);
        
        Message datacriacaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoCreateInputMessage.setId("datacriacaoCreateInputMessage");
        datacriacaoCreateInputMessage.setFor("datacriacaoCreateInput");
        datacriacaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoCreateInputMessage);
        
        OutputLabel statusCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusCreateOutput.setFor("statusCreateInput");
        statusCreateOutput.setId("statusCreateOutput");
        statusCreateOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusCreateOutput);
        
        InputText statusCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusCreateInput.setId("statusCreateInput");
        statusCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.status}", String.class));
        statusCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusCreateInput);
        
        Message statusCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusCreateInputMessage.setId("statusCreateInputMessage");
        statusCreateInputMessage.setFor("statusCreateInput");
        statusCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusCreateInputMessage);
        
        OutputLabel pedidosvendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidosvendaCreateOutput.setFor("pedidosvendaCreateInput");
        pedidosvendaCreateOutput.setId("pedidosvendaCreateOutput");
        pedidosvendaCreateOutput.setValue("Pedidosvenda:");
        htmlPanelGrid.getChildren().add(pedidosvendaCreateOutput);
        
        SelectManyMenu pedidosvendaCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        pedidosvendaCreateInput.setId("pedidosvendaCreateInput");
        pedidosvendaCreateInput.setConverter(new PedidoVendaConverter());
        pedidosvendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.selectedPedidosvenda}", List.class));
        UISelectItems pedidosvendaCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        pedidosvendaCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoVendaBean.allPedidoVendas}", List.class));
        pedidosvendaCreateInput.setRequired(false);
        pedidosvendaCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidoVenda", String.class));
        pedidosvendaCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", String.class));
        pedidosvendaCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", PedidoVenda.class));
        pedidosvendaCreateInput.getChildren().add(pedidosvendaCreateInputItems);
        htmlPanelGrid.getChildren().add(pedidosvendaCreateInput);
        
        Message pedidosvendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidosvendaCreateInputMessage.setId("pedidosvendaCreateInputMessage");
        pedidosvendaCreateInputMessage.setFor("pedidosvendaCreateInput");
        pedidosvendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidosvendaCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid MesaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel numeroEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        numeroEditOutput.setFor("numeroEditInput");
        numeroEditOutput.setId("numeroEditOutput");
        numeroEditOutput.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroEditOutput);
        
        InputText numeroEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        numeroEditInput.setId("numeroEditInput");
        numeroEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.numero}", String.class));
        numeroEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(numeroEditInput);
        
        Message numeroEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        numeroEditInputMessage.setId("numeroEditInputMessage");
        numeroEditInputMessage.setFor("numeroEditInput");
        numeroEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(numeroEditInputMessage);
        
        OutputLabel datacriacaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoEditOutput.setFor("datacriacaoEditInput");
        datacriacaoEditOutput.setId("datacriacaoEditOutput");
        datacriacaoEditOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoEditOutput);
        
        Calendar datacriacaoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoEditInput.setId("datacriacaoEditInput");
        datacriacaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.datacriacao}", Date.class));
        datacriacaoEditInput.setNavigator(true);
        datacriacaoEditInput.setEffect("slideDown");
        datacriacaoEditInput.setPattern("dd/MM/yyyy");
        datacriacaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(datacriacaoEditInput);
        
        Message datacriacaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoEditInputMessage.setId("datacriacaoEditInputMessage");
        datacriacaoEditInputMessage.setFor("datacriacaoEditInput");
        datacriacaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoEditInputMessage);
        
        OutputLabel statusEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        statusEditOutput.setFor("statusEditInput");
        statusEditOutput.setId("statusEditOutput");
        statusEditOutput.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusEditOutput);
        
        InputText statusEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        statusEditInput.setId("statusEditInput");
        statusEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.status}", String.class));
        statusEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(statusEditInput);
        
        Message statusEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        statusEditInputMessage.setId("statusEditInputMessage");
        statusEditInputMessage.setFor("statusEditInput");
        statusEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(statusEditInputMessage);
        
        OutputLabel pedidosvendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidosvendaEditOutput.setFor("pedidosvendaEditInput");
        pedidosvendaEditOutput.setId("pedidosvendaEditOutput");
        pedidosvendaEditOutput.setValue("Pedidosvenda:");
        htmlPanelGrid.getChildren().add(pedidosvendaEditOutput);
        
        SelectManyMenu pedidosvendaEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        pedidosvendaEditInput.setId("pedidosvendaEditInput");
        pedidosvendaEditInput.setConverter(new PedidoVendaConverter());
        pedidosvendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.selectedPedidosvenda}", List.class));
        UISelectItems pedidosvendaEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        pedidosvendaEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoVendaBean.allPedidoVendas}", List.class));
        pedidosvendaEditInput.setRequired(false);
        pedidosvendaEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidoVenda", String.class));
        pedidosvendaEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", String.class));
        pedidosvendaEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", PedidoVenda.class));
        pedidosvendaEditInput.getChildren().add(pedidosvendaEditInputItems);
        htmlPanelGrid.getChildren().add(pedidosvendaEditInput);
        
        Message pedidosvendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidosvendaEditInputMessage.setId("pedidosvendaEditInputMessage");
        pedidosvendaEditInputMessage.setFor("pedidosvendaEditInput");
        pedidosvendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidosvendaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid MesaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText numeroLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroLabel.setId("numeroLabel");
        numeroLabel.setValue("Numero:");
        htmlPanelGrid.getChildren().add(numeroLabel);
        
        HtmlOutputText numeroValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        numeroValue.setId("numeroValue");
        numeroValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.numero}", String.class));
        htmlPanelGrid.getChildren().add(numeroValue);
        
        HtmlOutputText datacriacaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoLabel.setId("datacriacaoLabel");
        datacriacaoLabel.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoLabel);
        
        HtmlOutputText datacriacaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.datacriacao}", Date.class));
        DateTimeConverter datacriacaoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datacriacaoValueConverter.setPattern("dd/MM/yyyy");
        datacriacaoValue.setConverter(datacriacaoValueConverter);
        htmlPanelGrid.getChildren().add(datacriacaoValue);
        
        HtmlOutputText statusLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusLabel.setId("statusLabel");
        statusLabel.setValue("Status:");
        htmlPanelGrid.getChildren().add(statusLabel);
        
        HtmlOutputText statusValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        statusValue.setId("statusValue");
        statusValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.status}", String.class));
        htmlPanelGrid.getChildren().add(statusValue);
        
        HtmlOutputText pedidosvendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidosvendaLabel.setId("pedidosvendaLabel");
        pedidosvendaLabel.setValue("Pedidosvenda:");
        htmlPanelGrid.getChildren().add(pedidosvendaLabel);
        
        SelectManyMenu pedidosvendaValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        pedidosvendaValue.setId("pedidosvendaValue");
        pedidosvendaValue.setConverter(new PedidoVendaConverter());
        pedidosvendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.selectedPedidosvenda}", List.class));
        UISelectItems pedidosvendaValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        pedidosvendaValue.setReadonly(true);
        pedidosvendaValue.setDisabled(true);
        pedidosvendaValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{mesaBean.mesa.pedidosvenda}", Set.class));
        pedidosvendaValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidoVenda", String.class));
        pedidosvendaValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", String.class));
        pedidosvendaValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidoVenda}", PedidoVenda.class));
        pedidosvendaValue.getChildren().add(pedidosvendaValueItems);
        htmlPanelGrid.getChildren().add(pedidosvendaValue);
        
        return htmlPanelGrid;
    }
    
    public Mesa MesaBean.getMesa() {
        if (mesa == null) {
            mesa = new Mesa();
        }
        return mesa;
    }
    
    public void MesaBean.setMesa(Mesa mesa) {
        this.mesa = mesa;
    }
    
    public List<PedidoVenda> MesaBean.getSelectedPedidosvenda() {
        return selectedPedidosvenda;
    }
    
    public void MesaBean.setSelectedPedidosvenda(List<PedidoVenda> selectedPedidosvenda) {
        if (selectedPedidosvenda != null) {
            mesa.setPedidosvenda(new HashSet<PedidoVenda>(selectedPedidosvenda));
        }
        this.selectedPedidosvenda = selectedPedidosvenda;
    }
    
    public String MesaBean.onEdit() {
        if (mesa != null && mesa.getPedidosvenda() != null) {
            selectedPedidosvenda = new ArrayList<PedidoVenda>(mesa.getPedidosvenda());
        }
        return null;
    }
    
    public boolean MesaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void MesaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String MesaBean.displayList() {
        createDialogVisible = false;
        findAllMesas();
        return "mesa";
    }
    
    public String MesaBean.displayCreateDialog() {
        mesa = new Mesa();
        createDialogVisible = true;
        return "mesa";
    }
    
    public String MesaBean.persist() {
        String message = "";
        if (mesa.getId() != null) {
            mesa.merge();
            message = "message_successfully_updated";
        } else {
            mesa.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Mesa");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMesas();
    }
    
    public String MesaBean.delete() {
        mesa.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Mesa");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllMesas();
    }
    
    public void MesaBean.reset() {
        mesa = null;
        selectedPedidosvenda = null;
        createDialogVisible = false;
    }
    
    public void MesaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
