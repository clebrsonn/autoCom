// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Categoria;
import br.com.tecsoluction.sac.Composto;
import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.jsf.CompostoBean;
import br.com.tecsoluction.sac.jsf.converter.CategoriaConverter;
import br.com.tecsoluction.sac.jsf.converter.ItemConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CompostoBean_Roo_ManagedBean {
    
    declare @type: CompostoBean: @ManagedBean(name = "compostoBean");
    
    declare @type: CompostoBean: @SessionScoped;
    
    private String CompostoBean.name = "Compostoes";
    
    private Composto CompostoBean.composto;
    
    private List<Composto> CompostoBean.allCompostoes;
    
    private boolean CompostoBean.dataVisible = false;
    
    private List<String> CompostoBean.columns;
    
    private HtmlPanelGrid CompostoBean.createPanelGrid;
    
    private HtmlPanelGrid CompostoBean.editPanelGrid;
    
    private HtmlPanelGrid CompostoBean.viewPanelGrid;
    
    private boolean CompostoBean.createDialogVisible = false;
    
    private List<Item> CompostoBean.selectedItens;
    
    @PostConstruct
    public void CompostoBean.init() {
        columns = new ArrayList<String>();
        columns.add("nome");
        columns.add("precocusto");
        columns.add("precovenda");
        columns.add("datacriacao");
        columns.add("qtditens");
    }
    
    public String CompostoBean.getName() {
        return name;
    }
    
    public List<String> CompostoBean.getColumns() {
        return columns;
    }
    
    public List<Composto> CompostoBean.getAllCompostoes() {
        return allCompostoes;
    }
    
    public void CompostoBean.setAllCompostoes(List<Composto> allCompostoes) {
        this.allCompostoes = allCompostoes;
    }
    
    public String CompostoBean.findAllCompostoes() {
        allCompostoes = Composto.findAllCompostoes();
        dataVisible = !allCompostoes.isEmpty();
        return null;
    }
    
    public boolean CompostoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CompostoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CompostoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CompostoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CompostoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CompostoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CompostoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CompostoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CompostoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeCreateOutput.setFor("nomeCreateInput");
        nomeCreateOutput.setId("nomeCreateOutput");
        nomeCreateOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeCreateOutput);
        
        InputText nomeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeCreateInput.setId("nomeCreateInput");
        nomeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.nome}", String.class));
        nomeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeCreateInput);
        
        Message nomeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeCreateInputMessage.setId("nomeCreateInputMessage");
        nomeCreateInputMessage.setFor("nomeCreateInput");
        nomeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeCreateInputMessage);
        
        OutputLabel itensCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensCreateOutput.setFor("itensCreateInput");
        itensCreateOutput.setId("itensCreateOutput");
        itensCreateOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensCreateOutput);
        
        SelectManyMenu itensCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensCreateInput.setId("itensCreateInput");
        itensCreateInput.setConverter(new ItemConverter());
        itensCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.selectedItens}", List.class));
        UISelectItems itensCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensCreateInput.setRequired(true);
        itensCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensCreateInput.getChildren().add(itensCreateInputItems);
        htmlPanelGrid.getChildren().add(itensCreateInput);
        
        Message itensCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensCreateInputMessage.setId("itensCreateInputMessage");
        itensCreateInputMessage.setFor("itensCreateInput");
        itensCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensCreateInputMessage);
        
        OutputLabel categoriaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoriaCreateOutput.setFor("categoriaCreateInput");
        categoriaCreateOutput.setId("categoriaCreateOutput");
        categoriaCreateOutput.setValue("Categoria:");
        htmlPanelGrid.getChildren().add(categoriaCreateOutput);
        
        AutoComplete categoriaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoriaCreateInput.setId("categoriaCreateInput");
        categoriaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.categoria}", Categoria.class));
        categoriaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{compostoBean.completeCategoria}", List.class, new Class[] { String.class }));
        categoriaCreateInput.setDropdown(true);
        categoriaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoria", String.class));
        categoriaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoria.nome}", String.class));
        categoriaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoria}", Categoria.class));
        categoriaCreateInput.setConverter(new CategoriaConverter());
        categoriaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoriaCreateInput);
        
        Message categoriaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriaCreateInputMessage.setId("categoriaCreateInputMessage");
        categoriaCreateInputMessage.setFor("categoriaCreateInput");
        categoriaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriaCreateInputMessage);
        
        OutputLabel precocustoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precocustoCreateOutput.setFor("precocustoCreateInput");
        precocustoCreateOutput.setId("precocustoCreateOutput");
        precocustoCreateOutput.setValue("Precocusto:");
        htmlPanelGrid.getChildren().add(precocustoCreateOutput);
        
        InputText precocustoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precocustoCreateInput.setId("precocustoCreateInput");
        precocustoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.precocusto}", Double.class));
        precocustoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precocustoCreateInput);
        
        Message precocustoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precocustoCreateInputMessage.setId("precocustoCreateInputMessage");
        precocustoCreateInputMessage.setFor("precocustoCreateInput");
        precocustoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precocustoCreateInputMessage);
        
        OutputLabel precovendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precovendaCreateOutput.setFor("precovendaCreateInput");
        precovendaCreateOutput.setId("precovendaCreateOutput");
        precovendaCreateOutput.setValue("Precovenda:");
        htmlPanelGrid.getChildren().add(precovendaCreateOutput);
        
        InputText precovendaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precovendaCreateInput.setId("precovendaCreateInput");
        precovendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.precovenda}", Double.class));
        precovendaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precovendaCreateInput);
        
        Message precovendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precovendaCreateInputMessage.setId("precovendaCreateInputMessage");
        precovendaCreateInputMessage.setFor("precovendaCreateInput");
        precovendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precovendaCreateInputMessage);
        
        OutputLabel datacriacaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoCreateOutput.setFor("datacriacaoCreateInput");
        datacriacaoCreateOutput.setId("datacriacaoCreateOutput");
        datacriacaoCreateOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoCreateOutput);
        
        Calendar datacriacaoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoCreateInput.setId("datacriacaoCreateInput");
        datacriacaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.datacriacao}", Date.class));
        datacriacaoCreateInput.setNavigator(true);
        datacriacaoCreateInput.setEffect("slideDown");
        datacriacaoCreateInput.setPattern("dd/MM/yyyy");
        datacriacaoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacriacaoCreateInput);
        
        Message datacriacaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoCreateInputMessage.setId("datacriacaoCreateInputMessage");
        datacriacaoCreateInputMessage.setFor("datacriacaoCreateInput");
        datacriacaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoCreateInputMessage);
        
        OutputLabel qtditensCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        qtditensCreateOutput.setFor("qtditensCreateInput");
        qtditensCreateOutput.setId("qtditensCreateOutput");
        qtditensCreateOutput.setValue("Qtditens:");
        htmlPanelGrid.getChildren().add(qtditensCreateOutput);
        
        InputText qtditensCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        qtditensCreateInput.setId("qtditensCreateInput");
        qtditensCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.qtditens}", String.class));
        qtditensCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(qtditensCreateInput);
        
        Message qtditensCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        qtditensCreateInputMessage.setId("qtditensCreateInputMessage");
        qtditensCreateInputMessage.setFor("qtditensCreateInput");
        qtditensCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(qtditensCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CompostoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeEditOutput.setFor("nomeEditInput");
        nomeEditOutput.setId("nomeEditOutput");
        nomeEditOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeEditOutput);
        
        InputText nomeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeEditInput.setId("nomeEditInput");
        nomeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.nome}", String.class));
        nomeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeEditInput);
        
        Message nomeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeEditInputMessage.setId("nomeEditInputMessage");
        nomeEditInputMessage.setFor("nomeEditInput");
        nomeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeEditInputMessage);
        
        OutputLabel itensEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensEditOutput.setFor("itensEditInput");
        itensEditOutput.setId("itensEditOutput");
        itensEditOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensEditOutput);
        
        SelectManyMenu itensEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensEditInput.setId("itensEditInput");
        itensEditInput.setConverter(new ItemConverter());
        itensEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.selectedItens}", List.class));
        UISelectItems itensEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensEditInput.setRequired(true);
        itensEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensEditInput.getChildren().add(itensEditInputItems);
        htmlPanelGrid.getChildren().add(itensEditInput);
        
        Message itensEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensEditInputMessage.setId("itensEditInputMessage");
        itensEditInputMessage.setFor("itensEditInput");
        itensEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensEditInputMessage);
        
        OutputLabel categoriaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoriaEditOutput.setFor("categoriaEditInput");
        categoriaEditOutput.setId("categoriaEditOutput");
        categoriaEditOutput.setValue("Categoria:");
        htmlPanelGrid.getChildren().add(categoriaEditOutput);
        
        AutoComplete categoriaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoriaEditInput.setId("categoriaEditInput");
        categoriaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.categoria}", Categoria.class));
        categoriaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{compostoBean.completeCategoria}", List.class, new Class[] { String.class }));
        categoriaEditInput.setDropdown(true);
        categoriaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoria", String.class));
        categoriaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoria.nome}", String.class));
        categoriaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoria}", Categoria.class));
        categoriaEditInput.setConverter(new CategoriaConverter());
        categoriaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoriaEditInput);
        
        Message categoriaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriaEditInputMessage.setId("categoriaEditInputMessage");
        categoriaEditInputMessage.setFor("categoriaEditInput");
        categoriaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriaEditInputMessage);
        
        OutputLabel precocustoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precocustoEditOutput.setFor("precocustoEditInput");
        precocustoEditOutput.setId("precocustoEditOutput");
        precocustoEditOutput.setValue("Precocusto:");
        htmlPanelGrid.getChildren().add(precocustoEditOutput);
        
        InputText precocustoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precocustoEditInput.setId("precocustoEditInput");
        precocustoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.precocusto}", Double.class));
        precocustoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precocustoEditInput);
        
        Message precocustoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precocustoEditInputMessage.setId("precocustoEditInputMessage");
        precocustoEditInputMessage.setFor("precocustoEditInput");
        precocustoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precocustoEditInputMessage);
        
        OutputLabel precovendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precovendaEditOutput.setFor("precovendaEditInput");
        precovendaEditOutput.setId("precovendaEditOutput");
        precovendaEditOutput.setValue("Precovenda:");
        htmlPanelGrid.getChildren().add(precovendaEditOutput);
        
        InputText precovendaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precovendaEditInput.setId("precovendaEditInput");
        precovendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.precovenda}", Double.class));
        precovendaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precovendaEditInput);
        
        Message precovendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precovendaEditInputMessage.setId("precovendaEditInputMessage");
        precovendaEditInputMessage.setFor("precovendaEditInput");
        precovendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precovendaEditInputMessage);
        
        OutputLabel datacriacaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoEditOutput.setFor("datacriacaoEditInput");
        datacriacaoEditOutput.setId("datacriacaoEditOutput");
        datacriacaoEditOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoEditOutput);
        
        Calendar datacriacaoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoEditInput.setId("datacriacaoEditInput");
        datacriacaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.datacriacao}", Date.class));
        datacriacaoEditInput.setNavigator(true);
        datacriacaoEditInput.setEffect("slideDown");
        datacriacaoEditInput.setPattern("dd/MM/yyyy");
        datacriacaoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacriacaoEditInput);
        
        Message datacriacaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoEditInputMessage.setId("datacriacaoEditInputMessage");
        datacriacaoEditInputMessage.setFor("datacriacaoEditInput");
        datacriacaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoEditInputMessage);
        
        OutputLabel qtditensEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        qtditensEditOutput.setFor("qtditensEditInput");
        qtditensEditOutput.setId("qtditensEditOutput");
        qtditensEditOutput.setValue("Qtditens:");
        htmlPanelGrid.getChildren().add(qtditensEditOutput);
        
        InputText qtditensEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        qtditensEditInput.setId("qtditensEditInput");
        qtditensEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.qtditens}", String.class));
        qtditensEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(qtditensEditInput);
        
        Message qtditensEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        qtditensEditInputMessage.setId("qtditensEditInputMessage");
        qtditensEditInputMessage.setFor("qtditensEditInput");
        qtditensEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(qtditensEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CompostoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeLabel.setId("nomeLabel");
        nomeLabel.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeLabel);
        
        HtmlOutputText nomeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeValue.setId("nomeValue");
        nomeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.nome}", String.class));
        htmlPanelGrid.getChildren().add(nomeValue);
        
        HtmlOutputText itensLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itensLabel.setId("itensLabel");
        itensLabel.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensLabel);
        
        SelectManyMenu itensValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensValue.setId("itensValue");
        itensValue.setConverter(new ItemConverter());
        itensValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.selectedItens}", List.class));
        UISelectItems itensValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensValue.setReadonly(true);
        itensValue.setDisabled(true);
        itensValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.itens}", Set.class));
        itensValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensValue.getChildren().add(itensValueItems);
        htmlPanelGrid.getChildren().add(itensValue);
        
        HtmlOutputText categoriaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriaLabel.setId("categoriaLabel");
        categoriaLabel.setValue("Categoria:");
        htmlPanelGrid.getChildren().add(categoriaLabel);
        
        HtmlOutputText categoriaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.categoria}", Categoria.class));
        categoriaValue.setConverter(new CategoriaConverter());
        htmlPanelGrid.getChildren().add(categoriaValue);
        
        HtmlOutputText precocustoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precocustoLabel.setId("precocustoLabel");
        precocustoLabel.setValue("Precocusto:");
        htmlPanelGrid.getChildren().add(precocustoLabel);
        
        HtmlOutputText precocustoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precocustoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.precocusto}", String.class));
        htmlPanelGrid.getChildren().add(precocustoValue);
        
        HtmlOutputText precovendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precovendaLabel.setId("precovendaLabel");
        precovendaLabel.setValue("Precovenda:");
        htmlPanelGrid.getChildren().add(precovendaLabel);
        
        HtmlOutputText precovendaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precovendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.precovenda}", String.class));
        htmlPanelGrid.getChildren().add(precovendaValue);
        
        HtmlOutputText datacriacaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoLabel.setId("datacriacaoLabel");
        datacriacaoLabel.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoLabel);
        
        HtmlOutputText datacriacaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.datacriacao}", Date.class));
        DateTimeConverter datacriacaoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datacriacaoValueConverter.setPattern("dd/MM/yyyy");
        datacriacaoValue.setConverter(datacriacaoValueConverter);
        htmlPanelGrid.getChildren().add(datacriacaoValue);
        
        HtmlOutputText qtditensLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        qtditensLabel.setId("qtditensLabel");
        qtditensLabel.setValue("Qtditens:");
        htmlPanelGrid.getChildren().add(qtditensLabel);
        
        HtmlOutputText qtditensValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        qtditensValue.setId("qtditensValue");
        qtditensValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{compostoBean.composto.qtditens}", String.class));
        htmlPanelGrid.getChildren().add(qtditensValue);
        
        return htmlPanelGrid;
    }
    
    public Composto CompostoBean.getComposto() {
        if (composto == null) {
            composto = new Composto();
        }
        return composto;
    }
    
    public void CompostoBean.setComposto(Composto composto) {
        this.composto = composto;
    }
    
    public List<Item> CompostoBean.getSelectedItens() {
        return selectedItens;
    }
    
    public void CompostoBean.setSelectedItens(List<Item> selectedItens) {
        if (selectedItens != null) {
            composto.setItens(new HashSet<Item>(selectedItens));
        }
        this.selectedItens = selectedItens;
    }
    
    public List<Categoria> CompostoBean.completeCategoria(String query) {
        List<Categoria> suggestions = new ArrayList<Categoria>();
        for (Categoria categoria : Categoria.findAllCategorias()) {
            String categoriaStr = String.valueOf(categoria.getNome());
            if (categoriaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(categoria);
            }
        }
        return suggestions;
    }
    
    public String CompostoBean.onEdit() {
        if (composto != null && composto.getItens() != null) {
            selectedItens = new ArrayList<Item>(composto.getItens());
        }
        return null;
    }
    
    public boolean CompostoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CompostoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CompostoBean.displayList() {
        createDialogVisible = false;
        findAllCompostoes();
        return "composto";
    }
    
    public String CompostoBean.displayCreateDialog() {
        composto = new Composto();
        createDialogVisible = true;
        return "composto";
    }
    
    public String CompostoBean.persist() {
        String message = "";
        if (composto.getId() != null) {
            composto.merge();
            message = "message_successfully_updated";
        } else {
            composto.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Composto");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCompostoes();
    }
    
    public String CompostoBean.delete() {
        composto.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Composto");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCompostoes();
    }
    
    public void CompostoBean.reset() {
        composto = null;
        selectedItens = null;
        createDialogVisible = false;
    }
    
    public void CompostoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
