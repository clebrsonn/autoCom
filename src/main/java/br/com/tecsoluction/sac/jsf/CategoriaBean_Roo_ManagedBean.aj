// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Categoria;
import br.com.tecsoluction.sac.jsf.CategoriaBean;
import br.com.tecsoluction.sac.jsf.converter.CategoriaConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect CategoriaBean_Roo_ManagedBean {
    
    declare @type: CategoriaBean: @ManagedBean(name = "categoriaBean");
    
    declare @type: CategoriaBean: @SessionScoped;
    
    private String CategoriaBean.name = "Categorias";
    
    private Categoria CategoriaBean.categoria;
    
    private List<Categoria> CategoriaBean.allCategorias;
    
    private boolean CategoriaBean.dataVisible = false;
    
    private List<String> CategoriaBean.columns;
    
    private HtmlPanelGrid CategoriaBean.createPanelGrid;
    
    private HtmlPanelGrid CategoriaBean.editPanelGrid;
    
    private HtmlPanelGrid CategoriaBean.viewPanelGrid;
    
    private boolean CategoriaBean.createDialogVisible = false;
    
    @PostConstruct
    public void CategoriaBean.init() {
        columns = new ArrayList<String>();
        columns.add("nome");
    }
    
    public String CategoriaBean.getName() {
        return name;
    }
    
    public List<String> CategoriaBean.getColumns() {
        return columns;
    }
    
    public List<Categoria> CategoriaBean.getAllCategorias() {
        return allCategorias;
    }
    
    public void CategoriaBean.setAllCategorias(List<Categoria> allCategorias) {
        this.allCategorias = allCategorias;
    }
    
    public String CategoriaBean.findAllCategorias() {
        allCategorias = Categoria.findAllCategorias();
        dataVisible = !allCategorias.isEmpty();
        return null;
    }
    
    public boolean CategoriaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void CategoriaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid CategoriaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void CategoriaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void CategoriaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void CategoriaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeCreateOutput.setFor("nomeCreateInput");
        nomeCreateOutput.setId("nomeCreateOutput");
        nomeCreateOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeCreateOutput);
        
        InputText nomeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeCreateInput.setId("nomeCreateInput");
        nomeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.nome}", String.class));
        nomeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeCreateInput);
        
        Message nomeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeCreateInputMessage.setId("nomeCreateInputMessage");
        nomeCreateInputMessage.setFor("nomeCreateInput");
        nomeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeCreateInputMessage);
        
        OutputLabel categoriapaiCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoriapaiCreateOutput.setFor("categoriapaiCreateInput");
        categoriapaiCreateOutput.setId("categoriapaiCreateOutput");
        categoriapaiCreateOutput.setValue("Categoriapai:");
        htmlPanelGrid.getChildren().add(categoriapaiCreateOutput);
        
        AutoComplete categoriapaiCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoriapaiCreateInput.setId("categoriapaiCreateInput");
        categoriapaiCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.categoriapai}", Categoria.class));
        categoriapaiCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{categoriaBean.completeCategoriapai}", List.class, new Class[] { String.class }));
        categoriapaiCreateInput.setDropdown(true);
        categoriapaiCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoriapai", String.class));
        categoriapaiCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoriapai.nome}", String.class));
        categoriapaiCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoriapai}", Categoria.class));
        categoriapaiCreateInput.setConverter(new CategoriaConverter());
        categoriapaiCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoriapaiCreateInput);
        
        Message categoriapaiCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriapaiCreateInputMessage.setId("categoriapaiCreateInputMessage");
        categoriapaiCreateInputMessage.setFor("categoriapaiCreateInput");
        categoriapaiCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriapaiCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeEditOutput.setFor("nomeEditInput");
        nomeEditOutput.setId("nomeEditOutput");
        nomeEditOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeEditOutput);
        
        InputText nomeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeEditInput.setId("nomeEditInput");
        nomeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.nome}", String.class));
        nomeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeEditInput);
        
        Message nomeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeEditInputMessage.setId("nomeEditInputMessage");
        nomeEditInputMessage.setFor("nomeEditInput");
        nomeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeEditInputMessage);
        
        OutputLabel categoriapaiEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoriapaiEditOutput.setFor("categoriapaiEditInput");
        categoriapaiEditOutput.setId("categoriapaiEditOutput");
        categoriapaiEditOutput.setValue("Categoriapai:");
        htmlPanelGrid.getChildren().add(categoriapaiEditOutput);
        
        AutoComplete categoriapaiEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoriapaiEditInput.setId("categoriapaiEditInput");
        categoriapaiEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.categoriapai}", Categoria.class));
        categoriapaiEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{categoriaBean.completeCategoriapai}", List.class, new Class[] { String.class }));
        categoriapaiEditInput.setDropdown(true);
        categoriapaiEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoriapai", String.class));
        categoriapaiEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoriapai.nome}", String.class));
        categoriapaiEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoriapai}", Categoria.class));
        categoriapaiEditInput.setConverter(new CategoriaConverter());
        categoriapaiEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoriapaiEditInput);
        
        Message categoriapaiEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriapaiEditInputMessage.setId("categoriapaiEditInputMessage");
        categoriapaiEditInputMessage.setFor("categoriapaiEditInput");
        categoriapaiEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriapaiEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid CategoriaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeLabel.setId("nomeLabel");
        nomeLabel.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeLabel);
        
        HtmlOutputText nomeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeValue.setId("nomeValue");
        nomeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.nome}", String.class));
        htmlPanelGrid.getChildren().add(nomeValue);
        
        HtmlOutputText categoriapaiLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriapaiLabel.setId("categoriapaiLabel");
        categoriapaiLabel.setValue("Categoriapai:");
        htmlPanelGrid.getChildren().add(categoriapaiLabel);
        
        HtmlOutputText categoriapaiValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriapaiValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{categoriaBean.categoria.categoriapai}", Categoria.class));
        categoriapaiValue.setConverter(new CategoriaConverter());
        htmlPanelGrid.getChildren().add(categoriapaiValue);
        
        return htmlPanelGrid;
    }
    
    public Categoria CategoriaBean.getCategoria() {
        if (categoria == null) {
            categoria = new Categoria();
        }
        return categoria;
    }
    
    public void CategoriaBean.setCategoria(Categoria categoria) {
        this.categoria = categoria;
    }
    
    public List<Categoria> CategoriaBean.completeCategoriapai(String query) {
        List<Categoria> suggestions = new ArrayList<Categoria>();
        for (Categoria categoria : Categoria.findAllCategorias()) {
            String categoriaStr = String.valueOf(categoria.getNome());
            if (categoriaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(categoria);
            }
        }
        return suggestions;
    }
    
    public String CategoriaBean.onEdit() {
        return null;
    }
    
    public boolean CategoriaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void CategoriaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String CategoriaBean.displayList() {
        createDialogVisible = false;
        findAllCategorias();
        return "categoria";
    }
    
    public String CategoriaBean.displayCreateDialog() {
        categoria = new Categoria();
        createDialogVisible = true;
        return "categoria";
    }
    
    public String CategoriaBean.persist() {
        String message = "";
        if (categoria.getId() != null) {
            categoria.merge();
            message = "message_successfully_updated";
        } else {
            categoria.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Categoria");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorias();
    }
    
    public String CategoriaBean.delete() {
        categoria.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Categoria");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllCategorias();
    }
    
    public void CategoriaBean.reset() {
        categoria = null;
        createDialogVisible = false;
    }
    
    public void CategoriaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
