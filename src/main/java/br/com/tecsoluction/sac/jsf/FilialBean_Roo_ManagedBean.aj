// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Caixa;
import br.com.tecsoluction.sac.Empresa;
import br.com.tecsoluction.sac.Filial;
import br.com.tecsoluction.sac.jsf.FilialBean;
import br.com.tecsoluction.sac.jsf.converter.CaixaConverter;
import br.com.tecsoluction.sac.jsf.converter.EmpresaConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect FilialBean_Roo_ManagedBean {
    
    declare @type: FilialBean: @ManagedBean(name = "filialBean");
    
    declare @type: FilialBean: @SessionScoped;
    
    private String FilialBean.name = "Filials";
    
    private Filial FilialBean.filial;
    
    private List<Filial> FilialBean.allFilials;
    
    private boolean FilialBean.dataVisible = false;
    
    private List<String> FilialBean.columns;
    
    private HtmlPanelGrid FilialBean.createPanelGrid;
    
    private HtmlPanelGrid FilialBean.editPanelGrid;
    
    private HtmlPanelGrid FilialBean.viewPanelGrid;
    
    private boolean FilialBean.createDialogVisible = false;
    
    private List<Caixa> FilialBean.selectedCaixas;
    
    @PostConstruct
    public void FilialBean.init() {
        columns = new ArrayList<String>();
        columns.add("nomefantasia");
        columns.add("cnpj");
        columns.add("razaosocial");
        columns.add("inscricaoestadual");
        columns.add("dataabertura");
    }
    
    public String FilialBean.getName() {
        return name;
    }
    
    public List<String> FilialBean.getColumns() {
        return columns;
    }
    
    public List<Filial> FilialBean.getAllFilials() {
        return allFilials;
    }
    
    public void FilialBean.setAllFilials(List<Filial> allFilials) {
        this.allFilials = allFilials;
    }
    
    public String FilialBean.findAllFilials() {
        allFilials = Filial.findAllFilials();
        dataVisible = !allFilials.isEmpty();
        return null;
    }
    
    public boolean FilialBean.isDataVisible() {
        return dataVisible;
    }
    
    public void FilialBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FilialBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FilialBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FilialBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FilialBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FilialBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FilialBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FilialBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomefantasiaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomefantasiaCreateOutput.setFor("nomefantasiaCreateInput");
        nomefantasiaCreateOutput.setId("nomefantasiaCreateOutput");
        nomefantasiaCreateOutput.setValue("Nomefantasia:");
        htmlPanelGrid.getChildren().add(nomefantasiaCreateOutput);
        
        InputText nomefantasiaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomefantasiaCreateInput.setId("nomefantasiaCreateInput");
        nomefantasiaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.nomefantasia}", String.class));
        nomefantasiaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomefantasiaCreateInput);
        
        Message nomefantasiaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomefantasiaCreateInputMessage.setId("nomefantasiaCreateInputMessage");
        nomefantasiaCreateInputMessage.setFor("nomefantasiaCreateInput");
        nomefantasiaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomefantasiaCreateInputMessage);
        
        OutputLabel cnpjCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cnpjCreateOutput.setFor("cnpjCreateInput");
        cnpjCreateOutput.setId("cnpjCreateOutput");
        cnpjCreateOutput.setValue("Cnpj:");
        htmlPanelGrid.getChildren().add(cnpjCreateOutput);
        
        InputText cnpjCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cnpjCreateInput.setId("cnpjCreateInput");
        cnpjCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.cnpj}", String.class));
        cnpjCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cnpjCreateInput);
        
        Message cnpjCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cnpjCreateInputMessage.setId("cnpjCreateInputMessage");
        cnpjCreateInputMessage.setFor("cnpjCreateInput");
        cnpjCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cnpjCreateInputMessage);
        
        OutputLabel razaosocialCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        razaosocialCreateOutput.setFor("razaosocialCreateInput");
        razaosocialCreateOutput.setId("razaosocialCreateOutput");
        razaosocialCreateOutput.setValue("Razaosocial:");
        htmlPanelGrid.getChildren().add(razaosocialCreateOutput);
        
        InputText razaosocialCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        razaosocialCreateInput.setId("razaosocialCreateInput");
        razaosocialCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.razaosocial}", String.class));
        razaosocialCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(razaosocialCreateInput);
        
        Message razaosocialCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        razaosocialCreateInputMessage.setId("razaosocialCreateInputMessage");
        razaosocialCreateInputMessage.setFor("razaosocialCreateInput");
        razaosocialCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(razaosocialCreateInputMessage);
        
        OutputLabel inscricaoestadualCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        inscricaoestadualCreateOutput.setFor("inscricaoestadualCreateInput");
        inscricaoestadualCreateOutput.setId("inscricaoestadualCreateOutput");
        inscricaoestadualCreateOutput.setValue("Inscricaoestadual:");
        htmlPanelGrid.getChildren().add(inscricaoestadualCreateOutput);
        
        InputText inscricaoestadualCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        inscricaoestadualCreateInput.setId("inscricaoestadualCreateInput");
        inscricaoestadualCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.inscricaoestadual}", String.class));
        inscricaoestadualCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(inscricaoestadualCreateInput);
        
        Message inscricaoestadualCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        inscricaoestadualCreateInputMessage.setId("inscricaoestadualCreateInputMessage");
        inscricaoestadualCreateInputMessage.setFor("inscricaoestadualCreateInput");
        inscricaoestadualCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(inscricaoestadualCreateInputMessage);
        
        OutputLabel dataaberturaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dataaberturaCreateOutput.setFor("dataaberturaCreateInput");
        dataaberturaCreateOutput.setId("dataaberturaCreateOutput");
        dataaberturaCreateOutput.setValue("Dataabertura:");
        htmlPanelGrid.getChildren().add(dataaberturaCreateOutput);
        
        Calendar dataaberturaCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dataaberturaCreateInput.setId("dataaberturaCreateInput");
        dataaberturaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.dataabertura}", Date.class));
        dataaberturaCreateInput.setNavigator(true);
        dataaberturaCreateInput.setEffect("slideDown");
        dataaberturaCreateInput.setPattern("dd/MM/yyyy");
        dataaberturaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dataaberturaCreateInput);
        
        Message dataaberturaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dataaberturaCreateInputMessage.setId("dataaberturaCreateInputMessage");
        dataaberturaCreateInputMessage.setFor("dataaberturaCreateInput");
        dataaberturaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dataaberturaCreateInputMessage);
        
        OutputLabel logoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        logoCreateOutput.setFor("logoCreateInput");
        logoCreateOutput.setId("logoCreateOutput");
        logoCreateOutput.setValue("Logo:");
        htmlPanelGrid.getChildren().add(logoCreateOutput);
        
        InputText logoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        logoCreateInput.setId("logoCreateInput");
        logoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.logo}", String.class));
        logoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(logoCreateInput);
        
        Message logoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        logoCreateInputMessage.setId("logoCreateInputMessage");
        logoCreateInputMessage.setFor("logoCreateInput");
        logoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(logoCreateInputMessage);
        
        OutputLabel caixasCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        caixasCreateOutput.setFor("caixasCreateInput");
        caixasCreateOutput.setId("caixasCreateOutput");
        caixasCreateOutput.setValue("Caixas:");
        htmlPanelGrid.getChildren().add(caixasCreateOutput);
        
        SelectManyMenu caixasCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        caixasCreateInput.setId("caixasCreateInput");
        caixasCreateInput.setConverter(new CaixaConverter());
        caixasCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.selectedCaixas}", List.class));
        UISelectItems caixasCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        caixasCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.allCaixas}", List.class));
        caixasCreateInput.setRequired(false);
        caixasCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "caixa", String.class));
        caixasCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{caixa}", String.class));
        caixasCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{caixa}", Caixa.class));
        caixasCreateInput.getChildren().add(caixasCreateInputItems);
        htmlPanelGrid.getChildren().add(caixasCreateInput);
        
        Message caixasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        caixasCreateInputMessage.setId("caixasCreateInputMessage");
        caixasCreateInputMessage.setFor("caixasCreateInput");
        caixasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(caixasCreateInputMessage);
        
        OutputLabel empresaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        empresaCreateOutput.setFor("empresaCreateInput");
        empresaCreateOutput.setId("empresaCreateOutput");
        empresaCreateOutput.setValue("Empresa:");
        htmlPanelGrid.getChildren().add(empresaCreateOutput);
        
        AutoComplete empresaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        empresaCreateInput.setId("empresaCreateInput");
        empresaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.empresa}", Empresa.class));
        empresaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{filialBean.completeEmpresa}", List.class, new Class[] { String.class }));
        empresaCreateInput.setDropdown(true);
        empresaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "empresa", String.class));
        empresaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{empresa.nomefantasia} #{empresa.cnpj} #{empresa.razaosocial} #{empresa.inscricaoestadual}", String.class));
        empresaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{empresa}", Empresa.class));
        empresaCreateInput.setConverter(new EmpresaConverter());
        empresaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(empresaCreateInput);
        
        Message empresaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        empresaCreateInputMessage.setId("empresaCreateInputMessage");
        empresaCreateInputMessage.setFor("empresaCreateInput");
        empresaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(empresaCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FilialBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomefantasiaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomefantasiaEditOutput.setFor("nomefantasiaEditInput");
        nomefantasiaEditOutput.setId("nomefantasiaEditOutput");
        nomefantasiaEditOutput.setValue("Nomefantasia:");
        htmlPanelGrid.getChildren().add(nomefantasiaEditOutput);
        
        InputText nomefantasiaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomefantasiaEditInput.setId("nomefantasiaEditInput");
        nomefantasiaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.nomefantasia}", String.class));
        nomefantasiaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomefantasiaEditInput);
        
        Message nomefantasiaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomefantasiaEditInputMessage.setId("nomefantasiaEditInputMessage");
        nomefantasiaEditInputMessage.setFor("nomefantasiaEditInput");
        nomefantasiaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomefantasiaEditInputMessage);
        
        OutputLabel cnpjEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cnpjEditOutput.setFor("cnpjEditInput");
        cnpjEditOutput.setId("cnpjEditOutput");
        cnpjEditOutput.setValue("Cnpj:");
        htmlPanelGrid.getChildren().add(cnpjEditOutput);
        
        InputText cnpjEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        cnpjEditInput.setId("cnpjEditInput");
        cnpjEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.cnpj}", String.class));
        cnpjEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(cnpjEditInput);
        
        Message cnpjEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cnpjEditInputMessage.setId("cnpjEditInputMessage");
        cnpjEditInputMessage.setFor("cnpjEditInput");
        cnpjEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cnpjEditInputMessage);
        
        OutputLabel razaosocialEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        razaosocialEditOutput.setFor("razaosocialEditInput");
        razaosocialEditOutput.setId("razaosocialEditOutput");
        razaosocialEditOutput.setValue("Razaosocial:");
        htmlPanelGrid.getChildren().add(razaosocialEditOutput);
        
        InputText razaosocialEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        razaosocialEditInput.setId("razaosocialEditInput");
        razaosocialEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.razaosocial}", String.class));
        razaosocialEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(razaosocialEditInput);
        
        Message razaosocialEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        razaosocialEditInputMessage.setId("razaosocialEditInputMessage");
        razaosocialEditInputMessage.setFor("razaosocialEditInput");
        razaosocialEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(razaosocialEditInputMessage);
        
        OutputLabel inscricaoestadualEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        inscricaoestadualEditOutput.setFor("inscricaoestadualEditInput");
        inscricaoestadualEditOutput.setId("inscricaoestadualEditOutput");
        inscricaoestadualEditOutput.setValue("Inscricaoestadual:");
        htmlPanelGrid.getChildren().add(inscricaoestadualEditOutput);
        
        InputText inscricaoestadualEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        inscricaoestadualEditInput.setId("inscricaoestadualEditInput");
        inscricaoestadualEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.inscricaoestadual}", String.class));
        inscricaoestadualEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(inscricaoestadualEditInput);
        
        Message inscricaoestadualEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        inscricaoestadualEditInputMessage.setId("inscricaoestadualEditInputMessage");
        inscricaoestadualEditInputMessage.setFor("inscricaoestadualEditInput");
        inscricaoestadualEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(inscricaoestadualEditInputMessage);
        
        OutputLabel dataaberturaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        dataaberturaEditOutput.setFor("dataaberturaEditInput");
        dataaberturaEditOutput.setId("dataaberturaEditOutput");
        dataaberturaEditOutput.setValue("Dataabertura:");
        htmlPanelGrid.getChildren().add(dataaberturaEditOutput);
        
        Calendar dataaberturaEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        dataaberturaEditInput.setId("dataaberturaEditInput");
        dataaberturaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.dataabertura}", Date.class));
        dataaberturaEditInput.setNavigator(true);
        dataaberturaEditInput.setEffect("slideDown");
        dataaberturaEditInput.setPattern("dd/MM/yyyy");
        dataaberturaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(dataaberturaEditInput);
        
        Message dataaberturaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        dataaberturaEditInputMessage.setId("dataaberturaEditInputMessage");
        dataaberturaEditInputMessage.setFor("dataaberturaEditInput");
        dataaberturaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(dataaberturaEditInputMessage);
        
        OutputLabel logoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        logoEditOutput.setFor("logoEditInput");
        logoEditOutput.setId("logoEditOutput");
        logoEditOutput.setValue("Logo:");
        htmlPanelGrid.getChildren().add(logoEditOutput);
        
        InputText logoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        logoEditInput.setId("logoEditInput");
        logoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.logo}", String.class));
        logoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(logoEditInput);
        
        Message logoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        logoEditInputMessage.setId("logoEditInputMessage");
        logoEditInputMessage.setFor("logoEditInput");
        logoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(logoEditInputMessage);
        
        OutputLabel caixasEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        caixasEditOutput.setFor("caixasEditInput");
        caixasEditOutput.setId("caixasEditOutput");
        caixasEditOutput.setValue("Caixas:");
        htmlPanelGrid.getChildren().add(caixasEditOutput);
        
        SelectManyMenu caixasEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        caixasEditInput.setId("caixasEditInput");
        caixasEditInput.setConverter(new CaixaConverter());
        caixasEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.selectedCaixas}", List.class));
        UISelectItems caixasEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        caixasEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{caixaBean.allCaixas}", List.class));
        caixasEditInput.setRequired(false);
        caixasEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "caixa", String.class));
        caixasEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{caixa}", String.class));
        caixasEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{caixa}", Caixa.class));
        caixasEditInput.getChildren().add(caixasEditInputItems);
        htmlPanelGrid.getChildren().add(caixasEditInput);
        
        Message caixasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        caixasEditInputMessage.setId("caixasEditInputMessage");
        caixasEditInputMessage.setFor("caixasEditInput");
        caixasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(caixasEditInputMessage);
        
        OutputLabel empresaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        empresaEditOutput.setFor("empresaEditInput");
        empresaEditOutput.setId("empresaEditOutput");
        empresaEditOutput.setValue("Empresa:");
        htmlPanelGrid.getChildren().add(empresaEditOutput);
        
        AutoComplete empresaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        empresaEditInput.setId("empresaEditInput");
        empresaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.empresa}", Empresa.class));
        empresaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{filialBean.completeEmpresa}", List.class, new Class[] { String.class }));
        empresaEditInput.setDropdown(true);
        empresaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "empresa", String.class));
        empresaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{empresa.nomefantasia} #{empresa.cnpj} #{empresa.razaosocial} #{empresa.inscricaoestadual}", String.class));
        empresaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{empresa}", Empresa.class));
        empresaEditInput.setConverter(new EmpresaConverter());
        empresaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(empresaEditInput);
        
        Message empresaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        empresaEditInputMessage.setId("empresaEditInputMessage");
        empresaEditInputMessage.setFor("empresaEditInput");
        empresaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(empresaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FilialBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomefantasiaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomefantasiaLabel.setId("nomefantasiaLabel");
        nomefantasiaLabel.setValue("Nomefantasia:");
        htmlPanelGrid.getChildren().add(nomefantasiaLabel);
        
        HtmlOutputText nomefantasiaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomefantasiaValue.setId("nomefantasiaValue");
        nomefantasiaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.nomefantasia}", String.class));
        htmlPanelGrid.getChildren().add(nomefantasiaValue);
        
        HtmlOutputText cnpjLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cnpjLabel.setId("cnpjLabel");
        cnpjLabel.setValue("Cnpj:");
        htmlPanelGrid.getChildren().add(cnpjLabel);
        
        HtmlOutputText cnpjValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cnpjValue.setId("cnpjValue");
        cnpjValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.cnpj}", String.class));
        htmlPanelGrid.getChildren().add(cnpjValue);
        
        HtmlOutputText razaosocialLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        razaosocialLabel.setId("razaosocialLabel");
        razaosocialLabel.setValue("Razaosocial:");
        htmlPanelGrid.getChildren().add(razaosocialLabel);
        
        HtmlOutputText razaosocialValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        razaosocialValue.setId("razaosocialValue");
        razaosocialValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.razaosocial}", String.class));
        htmlPanelGrid.getChildren().add(razaosocialValue);
        
        HtmlOutputText inscricaoestadualLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        inscricaoestadualLabel.setId("inscricaoestadualLabel");
        inscricaoestadualLabel.setValue("Inscricaoestadual:");
        htmlPanelGrid.getChildren().add(inscricaoestadualLabel);
        
        HtmlOutputText inscricaoestadualValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        inscricaoestadualValue.setId("inscricaoestadualValue");
        inscricaoestadualValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.inscricaoestadual}", String.class));
        htmlPanelGrid.getChildren().add(inscricaoestadualValue);
        
        HtmlOutputText dataaberturaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dataaberturaLabel.setId("dataaberturaLabel");
        dataaberturaLabel.setValue("Dataabertura:");
        htmlPanelGrid.getChildren().add(dataaberturaLabel);
        
        HtmlOutputText dataaberturaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        dataaberturaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.dataabertura}", Date.class));
        DateTimeConverter dataaberturaValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        dataaberturaValueConverter.setPattern("dd/MM/yyyy");
        dataaberturaValue.setConverter(dataaberturaValueConverter);
        htmlPanelGrid.getChildren().add(dataaberturaValue);
        
        HtmlOutputText logoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        logoLabel.setId("logoLabel");
        logoLabel.setValue("Logo:");
        htmlPanelGrid.getChildren().add(logoLabel);
        
        HtmlOutputText logoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        logoValue.setId("logoValue");
        logoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.logo}", String.class));
        htmlPanelGrid.getChildren().add(logoValue);
        
        HtmlOutputText caixasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        caixasLabel.setId("caixasLabel");
        caixasLabel.setValue("Caixas:");
        htmlPanelGrid.getChildren().add(caixasLabel);
        
        SelectManyMenu caixasValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        caixasValue.setId("caixasValue");
        caixasValue.setConverter(new CaixaConverter());
        caixasValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.selectedCaixas}", List.class));
        UISelectItems caixasValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        caixasValue.setReadonly(true);
        caixasValue.setDisabled(true);
        caixasValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.caixas}", Set.class));
        caixasValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "caixa", String.class));
        caixasValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{caixa}", String.class));
        caixasValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{caixa}", Caixa.class));
        caixasValue.getChildren().add(caixasValueItems);
        htmlPanelGrid.getChildren().add(caixasValue);
        
        HtmlOutputText empresaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        empresaLabel.setId("empresaLabel");
        empresaLabel.setValue("Empresa:");
        htmlPanelGrid.getChildren().add(empresaLabel);
        
        HtmlOutputText empresaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        empresaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{filialBean.filial.empresa}", Empresa.class));
        empresaValue.setConverter(new EmpresaConverter());
        htmlPanelGrid.getChildren().add(empresaValue);
        
        return htmlPanelGrid;
    }
    
    public Filial FilialBean.getFilial() {
        if (filial == null) {
            filial = new Filial();
        }
        return filial;
    }
    
    public void FilialBean.setFilial(Filial filial) {
        this.filial = filial;
    }
    
    public List<Caixa> FilialBean.getSelectedCaixas() {
        return selectedCaixas;
    }
    
    public void FilialBean.setSelectedCaixas(List<Caixa> selectedCaixas) {
        if (selectedCaixas != null) {
            filial.setCaixas(new HashSet<Caixa>(selectedCaixas));
        }
        this.selectedCaixas = selectedCaixas;
    }
    
    public List<Empresa> FilialBean.completeEmpresa(String query) {
        List<Empresa> suggestions = new ArrayList<Empresa>();
        for (Empresa empresa : Empresa.findAllEmpresas()) {
            String empresaStr = String.valueOf(empresa.getNomefantasia() +  " "  + empresa.getCnpj() +  " "  + empresa.getRazaosocial() +  " "  + empresa.getInscricaoestadual());
            if (empresaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(empresa);
            }
        }
        return suggestions;
    }
    
    public String FilialBean.onEdit() {
        if (filial != null && filial.getCaixas() != null) {
            selectedCaixas = new ArrayList<Caixa>(filial.getCaixas());
        }
        return null;
    }
    
    public boolean FilialBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FilialBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FilialBean.displayList() {
        createDialogVisible = false;
        findAllFilials();
        return "filial";
    }
    
    public String FilialBean.displayCreateDialog() {
        filial = new Filial();
        createDialogVisible = true;
        return "filial";
    }
    
    public String FilialBean.persist() {
        String message = "";
        if (filial.getId() != null) {
            filial.merge();
            message = "message_successfully_updated";
        } else {
            filial.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Filial");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFilials();
    }
    
    public String FilialBean.delete() {
        filial.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Filial");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFilials();
    }
    
    public void FilialBean.reset() {
        filial = null;
        selectedCaixas = null;
        createDialogVisible = false;
    }
    
    public void FilialBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
