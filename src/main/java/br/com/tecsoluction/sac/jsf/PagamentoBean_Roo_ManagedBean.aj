// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.FormaPagamento;
import br.com.tecsoluction.sac.Pagamento;
import br.com.tecsoluction.sac.PedidoVenda;
import br.com.tecsoluction.sac.jsf.PagamentoBean;
import br.com.tecsoluction.sac.jsf.converter.FormaPagamentoConverter;
import br.com.tecsoluction.sac.jsf.converter.PedidoVendaConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PagamentoBean_Roo_ManagedBean {
    
    declare @type: PagamentoBean: @ManagedBean(name = "pagamentoBean");
    
    declare @type: PagamentoBean: @SessionScoped;
    
    private String PagamentoBean.name = "Pagamentoes";
    
    private Pagamento PagamentoBean.pagamento;
    
    private List<Pagamento> PagamentoBean.allPagamentoes;
    
    private boolean PagamentoBean.dataVisible = false;
    
    private List<String> PagamentoBean.columns;
    
    private HtmlPanelGrid PagamentoBean.createPanelGrid;
    
    private HtmlPanelGrid PagamentoBean.editPanelGrid;
    
    private HtmlPanelGrid PagamentoBean.viewPanelGrid;
    
    private boolean PagamentoBean.createDialogVisible = false;
    
    private List<FormaPagamento> PagamentoBean.selectedFormaspagamento;
    
    @PostConstruct
    public void PagamentoBean.init() {
        columns = new ArrayList<String>();
        columns.add("total");
        columns.add("datapagamento");
    }
    
    public String PagamentoBean.getName() {
        return name;
    }
    
    public List<String> PagamentoBean.getColumns() {
        return columns;
    }
    
    public List<Pagamento> PagamentoBean.getAllPagamentoes() {
        return allPagamentoes;
    }
    
    public void PagamentoBean.setAllPagamentoes(List<Pagamento> allPagamentoes) {
        this.allPagamentoes = allPagamentoes;
    }
    
    public String PagamentoBean.findAllPagamentoes() {
        allPagamentoes = Pagamento.findAllPagamentoes();
        dataVisible = !allPagamentoes.isEmpty();
        return null;
    }
    
    public boolean PagamentoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PagamentoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PagamentoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PagamentoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PagamentoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PagamentoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PagamentoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PagamentoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PagamentoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel pedidovendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidovendaCreateOutput.setFor("pedidovendaCreateInput");
        pedidovendaCreateOutput.setId("pedidovendaCreateOutput");
        pedidovendaCreateOutput.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaCreateOutput);
        
        AutoComplete pedidovendaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidovendaCreateInput.setId("pedidovendaCreateInput");
        pedidovendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.pedidovenda}", PedidoVenda.class));
        pedidovendaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pagamentoBean.completePedidovenda}", List.class, new Class[] { String.class }));
        pedidovendaCreateInput.setDropdown(true);
        pedidovendaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidovenda", String.class));
        pedidovendaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidovenda.datavenda}", String.class));
        pedidovendaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidovenda}", PedidoVenda.class));
        pedidovendaCreateInput.setConverter(new PedidoVendaConverter());
        pedidovendaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidovendaCreateInput);
        
        Message pedidovendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidovendaCreateInputMessage.setId("pedidovendaCreateInputMessage");
        pedidovendaCreateInputMessage.setFor("pedidovendaCreateInput");
        pedidovendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidovendaCreateInputMessage);
        
        OutputLabel formaspagamentoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        formaspagamentoCreateOutput.setFor("formaspagamentoCreateInput");
        formaspagamentoCreateOutput.setId("formaspagamentoCreateOutput");
        formaspagamentoCreateOutput.setValue("Formaspagamento:");
        htmlPanelGrid.getChildren().add(formaspagamentoCreateOutput);
        
        SelectManyMenu formaspagamentoCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        formaspagamentoCreateInput.setId("formaspagamentoCreateInput");
        formaspagamentoCreateInput.setConverter(new FormaPagamentoConverter());
        formaspagamentoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.selectedFormaspagamento}", List.class));
        UISelectItems formaspagamentoCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        formaspagamentoCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.allFormaPagamentoes}", List.class));
        formaspagamentoCreateInput.setRequired(false);
        formaspagamentoCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "formaPagamento", String.class));
        formaspagamentoCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{formaPagamento}", String.class));
        formaspagamentoCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{formaPagamento}", FormaPagamento.class));
        formaspagamentoCreateInput.getChildren().add(formaspagamentoCreateInputItems);
        htmlPanelGrid.getChildren().add(formaspagamentoCreateInput);
        
        Message formaspagamentoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        formaspagamentoCreateInputMessage.setId("formaspagamentoCreateInputMessage");
        formaspagamentoCreateInputMessage.setFor("formaspagamentoCreateInput");
        formaspagamentoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(formaspagamentoCreateInputMessage);
        
        OutputLabel totalCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        totalCreateOutput.setFor("totalCreateInput");
        totalCreateOutput.setId("totalCreateOutput");
        totalCreateOutput.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalCreateOutput);
        
        InputText totalCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        totalCreateInput.setId("totalCreateInput");
        totalCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.total}", Double.class));
        totalCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(totalCreateInput);
        
        Message totalCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        totalCreateInputMessage.setId("totalCreateInputMessage");
        totalCreateInputMessage.setFor("totalCreateInput");
        totalCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(totalCreateInputMessage);
        
        OutputLabel datapagamentoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datapagamentoCreateOutput.setFor("datapagamentoCreateInput");
        datapagamentoCreateOutput.setId("datapagamentoCreateOutput");
        datapagamentoCreateOutput.setValue("Datapagamento:");
        htmlPanelGrid.getChildren().add(datapagamentoCreateOutput);
        
        Calendar datapagamentoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datapagamentoCreateInput.setId("datapagamentoCreateInput");
        datapagamentoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.datapagamento}", Date.class));
        datapagamentoCreateInput.setNavigator(true);
        datapagamentoCreateInput.setEffect("slideDown");
        datapagamentoCreateInput.setPattern("dd/MM/yyyy");
        datapagamentoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datapagamentoCreateInput);
        
        Message datapagamentoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datapagamentoCreateInputMessage.setId("datapagamentoCreateInputMessage");
        datapagamentoCreateInputMessage.setFor("datapagamentoCreateInput");
        datapagamentoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datapagamentoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PagamentoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel pedidovendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidovendaEditOutput.setFor("pedidovendaEditInput");
        pedidovendaEditOutput.setId("pedidovendaEditOutput");
        pedidovendaEditOutput.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaEditOutput);
        
        AutoComplete pedidovendaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidovendaEditInput.setId("pedidovendaEditInput");
        pedidovendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.pedidovenda}", PedidoVenda.class));
        pedidovendaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pagamentoBean.completePedidovenda}", List.class, new Class[] { String.class }));
        pedidovendaEditInput.setDropdown(true);
        pedidovendaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidovenda", String.class));
        pedidovendaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidovenda.datavenda}", String.class));
        pedidovendaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidovenda}", PedidoVenda.class));
        pedidovendaEditInput.setConverter(new PedidoVendaConverter());
        pedidovendaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidovendaEditInput);
        
        Message pedidovendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidovendaEditInputMessage.setId("pedidovendaEditInputMessage");
        pedidovendaEditInputMessage.setFor("pedidovendaEditInput");
        pedidovendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidovendaEditInputMessage);
        
        OutputLabel formaspagamentoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        formaspagamentoEditOutput.setFor("formaspagamentoEditInput");
        formaspagamentoEditOutput.setId("formaspagamentoEditOutput");
        formaspagamentoEditOutput.setValue("Formaspagamento:");
        htmlPanelGrid.getChildren().add(formaspagamentoEditOutput);
        
        SelectManyMenu formaspagamentoEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        formaspagamentoEditInput.setId("formaspagamentoEditInput");
        formaspagamentoEditInput.setConverter(new FormaPagamentoConverter());
        formaspagamentoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.selectedFormaspagamento}", List.class));
        UISelectItems formaspagamentoEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        formaspagamentoEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.allFormaPagamentoes}", List.class));
        formaspagamentoEditInput.setRequired(false);
        formaspagamentoEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "formaPagamento", String.class));
        formaspagamentoEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{formaPagamento}", String.class));
        formaspagamentoEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{formaPagamento}", FormaPagamento.class));
        formaspagamentoEditInput.getChildren().add(formaspagamentoEditInputItems);
        htmlPanelGrid.getChildren().add(formaspagamentoEditInput);
        
        Message formaspagamentoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        formaspagamentoEditInputMessage.setId("formaspagamentoEditInputMessage");
        formaspagamentoEditInputMessage.setFor("formaspagamentoEditInput");
        formaspagamentoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(formaspagamentoEditInputMessage);
        
        OutputLabel totalEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        totalEditOutput.setFor("totalEditInput");
        totalEditOutput.setId("totalEditOutput");
        totalEditOutput.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalEditOutput);
        
        InputText totalEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        totalEditInput.setId("totalEditInput");
        totalEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.total}", Double.class));
        totalEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(totalEditInput);
        
        Message totalEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        totalEditInputMessage.setId("totalEditInputMessage");
        totalEditInputMessage.setFor("totalEditInput");
        totalEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(totalEditInputMessage);
        
        OutputLabel datapagamentoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datapagamentoEditOutput.setFor("datapagamentoEditInput");
        datapagamentoEditOutput.setId("datapagamentoEditOutput");
        datapagamentoEditOutput.setValue("Datapagamento:");
        htmlPanelGrid.getChildren().add(datapagamentoEditOutput);
        
        Calendar datapagamentoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datapagamentoEditInput.setId("datapagamentoEditInput");
        datapagamentoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.datapagamento}", Date.class));
        datapagamentoEditInput.setNavigator(true);
        datapagamentoEditInput.setEffect("slideDown");
        datapagamentoEditInput.setPattern("dd/MM/yyyy");
        datapagamentoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datapagamentoEditInput);
        
        Message datapagamentoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datapagamentoEditInputMessage.setId("datapagamentoEditInputMessage");
        datapagamentoEditInputMessage.setFor("datapagamentoEditInput");
        datapagamentoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datapagamentoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PagamentoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText pedidovendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidovendaLabel.setId("pedidovendaLabel");
        pedidovendaLabel.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaLabel);
        
        HtmlOutputText pedidovendaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidovendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.pedidovenda}", PedidoVenda.class));
        pedidovendaValue.setConverter(new PedidoVendaConverter());
        htmlPanelGrid.getChildren().add(pedidovendaValue);
        
        HtmlOutputText formaspagamentoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        formaspagamentoLabel.setId("formaspagamentoLabel");
        formaspagamentoLabel.setValue("Formaspagamento:");
        htmlPanelGrid.getChildren().add(formaspagamentoLabel);
        
        SelectManyMenu formaspagamentoValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        formaspagamentoValue.setId("formaspagamentoValue");
        formaspagamentoValue.setConverter(new FormaPagamentoConverter());
        formaspagamentoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.selectedFormaspagamento}", List.class));
        UISelectItems formaspagamentoValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        formaspagamentoValue.setReadonly(true);
        formaspagamentoValue.setDisabled(true);
        formaspagamentoValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.formaspagamento}", Set.class));
        formaspagamentoValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "formaPagamento", String.class));
        formaspagamentoValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{formaPagamento}", String.class));
        formaspagamentoValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{formaPagamento}", FormaPagamento.class));
        formaspagamentoValue.getChildren().add(formaspagamentoValueItems);
        htmlPanelGrid.getChildren().add(formaspagamentoValue);
        
        HtmlOutputText totalLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        totalLabel.setId("totalLabel");
        totalLabel.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalLabel);
        
        HtmlOutputText totalValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        totalValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.total}", String.class));
        htmlPanelGrid.getChildren().add(totalValue);
        
        HtmlOutputText datapagamentoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datapagamentoLabel.setId("datapagamentoLabel");
        datapagamentoLabel.setValue("Datapagamento:");
        htmlPanelGrid.getChildren().add(datapagamentoLabel);
        
        HtmlOutputText datapagamentoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datapagamentoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pagamentoBean.pagamento.datapagamento}", Date.class));
        DateTimeConverter datapagamentoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datapagamentoValueConverter.setPattern("dd/MM/yyyy");
        datapagamentoValue.setConverter(datapagamentoValueConverter);
        htmlPanelGrid.getChildren().add(datapagamentoValue);
        
        return htmlPanelGrid;
    }
    
    public Pagamento PagamentoBean.getPagamento() {
        if (pagamento == null) {
            pagamento = new Pagamento();
        }
        return pagamento;
    }
    
    public void PagamentoBean.setPagamento(Pagamento pagamento) {
        this.pagamento = pagamento;
    }
    
    public List<PedidoVenda> PagamentoBean.completePedidovenda(String query) {
        List<PedidoVenda> suggestions = new ArrayList<PedidoVenda>();
        for (PedidoVenda pedidoVenda : PedidoVenda.findAllPedidoVendas()) {
            String pedidoVendaStr = String.valueOf(pedidoVenda.getDatavenda());
            if (pedidoVendaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pedidoVenda);
            }
        }
        return suggestions;
    }
    
    public List<FormaPagamento> PagamentoBean.getSelectedFormaspagamento() {
        return selectedFormaspagamento;
    }
    
    public void PagamentoBean.setSelectedFormaspagamento(List<FormaPagamento> selectedFormaspagamento) {
        if (selectedFormaspagamento != null) {
            pagamento.setFormaspagamento(new HashSet<FormaPagamento>(selectedFormaspagamento));
        }
        this.selectedFormaspagamento = selectedFormaspagamento;
    }
    
    public String PagamentoBean.onEdit() {
        if (pagamento != null && pagamento.getFormaspagamento() != null) {
            selectedFormaspagamento = new ArrayList<FormaPagamento>(pagamento.getFormaspagamento());
        }
        return null;
    }
    
    public boolean PagamentoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PagamentoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PagamentoBean.displayList() {
        createDialogVisible = false;
        findAllPagamentoes();
        return "pagamento";
    }
    
    public String PagamentoBean.displayCreateDialog() {
        pagamento = new Pagamento();
        createDialogVisible = true;
        return "pagamento";
    }
    
    public String PagamentoBean.persist() {
        String message = "";
        if (pagamento.getId() != null) {
            pagamento.merge();
            message = "message_successfully_updated";
        } else {
            pagamento.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Pagamento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPagamentoes();
    }
    
    public String PagamentoBean.delete() {
        pagamento.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Pagamento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPagamentoes();
    }
    
    public void PagamentoBean.reset() {
        pagamento = null;
        selectedFormaspagamento = null;
        createDialogVisible = false;
    }
    
    public void PagamentoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
