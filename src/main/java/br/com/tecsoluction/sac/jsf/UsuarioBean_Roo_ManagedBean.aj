// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Usuario;
import br.com.tecsoluction.sac.jsf.UsuarioBean;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect UsuarioBean_Roo_ManagedBean {
    
    declare @type: UsuarioBean: @ManagedBean(name = "usuarioBean");
    
    declare @type: UsuarioBean: @SessionScoped;
    
    private String UsuarioBean.name = "Usuarios";
    
    private Usuario UsuarioBean.usuario;
    
    private List<Usuario> UsuarioBean.allUsuarios;
    
    private boolean UsuarioBean.dataVisible = false;
    
    private List<String> UsuarioBean.columns;
    
    private HtmlPanelGrid UsuarioBean.createPanelGrid;
    
    private HtmlPanelGrid UsuarioBean.editPanelGrid;
    
    private HtmlPanelGrid UsuarioBean.viewPanelGrid;
    
    private boolean UsuarioBean.createDialogVisible = false;
    
    @PostConstruct
    public void UsuarioBean.init() {
        columns = new ArrayList<String>();
        columns.add("nome");
        columns.add("senha");
        columns.add("email");
        columns.add("tipo");
    }
    
    public String UsuarioBean.getName() {
        return name;
    }
    
    public List<String> UsuarioBean.getColumns() {
        return columns;
    }
    
    public List<Usuario> UsuarioBean.getAllUsuarios() {
        return allUsuarios;
    }
    
    public void UsuarioBean.setAllUsuarios(List<Usuario> allUsuarios) {
        this.allUsuarios = allUsuarios;
    }
    
    public String UsuarioBean.findAllUsuarios() {
        allUsuarios = Usuario.findAllUsuarios();
        dataVisible = !allUsuarios.isEmpty();
        return null;
    }
    
    public boolean UsuarioBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UsuarioBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UsuarioBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UsuarioBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UsuarioBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void UsuarioBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeCreateOutput.setFor("nomeCreateInput");
        nomeCreateOutput.setId("nomeCreateOutput");
        nomeCreateOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeCreateOutput);
        
        InputText nomeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeCreateInput.setId("nomeCreateInput");
        nomeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.nome}", String.class));
        nomeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeCreateInput);
        
        Message nomeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeCreateInputMessage.setId("nomeCreateInputMessage");
        nomeCreateInputMessage.setFor("nomeCreateInput");
        nomeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeCreateInputMessage);
        
        OutputLabel senhaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        senhaCreateOutput.setFor("senhaCreateInput");
        senhaCreateOutput.setId("senhaCreateOutput");
        senhaCreateOutput.setValue("Senha:");
        htmlPanelGrid.getChildren().add(senhaCreateOutput);
        
        InputText senhaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        senhaCreateInput.setId("senhaCreateInput");
        senhaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.senha}", String.class));
        senhaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(senhaCreateInput);
        
        Message senhaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        senhaCreateInputMessage.setId("senhaCreateInputMessage");
        senhaCreateInputMessage.setFor("senhaCreateInput");
        senhaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(senhaCreateInputMessage);
        
        OutputLabel emailCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailCreateOutput.setFor("emailCreateInput");
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputText emailCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.email}", String.class));
        emailCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        OutputLabel tipoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoCreateOutput.setFor("tipoCreateInput");
        tipoCreateOutput.setId("tipoCreateOutput");
        tipoCreateOutput.setValue("Tipo:");
        htmlPanelGrid.getChildren().add(tipoCreateOutput);
        
        InputText tipoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tipoCreateInput.setId("tipoCreateInput");
        tipoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.tipo}", String.class));
        tipoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoCreateInput);
        
        Message tipoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoCreateInputMessage.setId("tipoCreateInputMessage");
        tipoCreateInputMessage.setFor("tipoCreateInput");
        tipoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeEditOutput.setFor("nomeEditInput");
        nomeEditOutput.setId("nomeEditOutput");
        nomeEditOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeEditOutput);
        
        InputText nomeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeEditInput.setId("nomeEditInput");
        nomeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.nome}", String.class));
        nomeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeEditInput);
        
        Message nomeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeEditInputMessage.setId("nomeEditInputMessage");
        nomeEditInputMessage.setFor("nomeEditInput");
        nomeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeEditInputMessage);
        
        OutputLabel senhaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        senhaEditOutput.setFor("senhaEditInput");
        senhaEditOutput.setId("senhaEditOutput");
        senhaEditOutput.setValue("Senha:");
        htmlPanelGrid.getChildren().add(senhaEditOutput);
        
        InputText senhaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        senhaEditInput.setId("senhaEditInput");
        senhaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.senha}", String.class));
        senhaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(senhaEditInput);
        
        Message senhaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        senhaEditInputMessage.setId("senhaEditInputMessage");
        senhaEditInputMessage.setFor("senhaEditInput");
        senhaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(senhaEditInputMessage);
        
        OutputLabel emailEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        emailEditOutput.setFor("emailEditInput");
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputText emailEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.email}", String.class));
        emailEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        OutputLabel tipoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoEditOutput.setFor("tipoEditInput");
        tipoEditOutput.setId("tipoEditOutput");
        tipoEditOutput.setValue("Tipo:");
        htmlPanelGrid.getChildren().add(tipoEditOutput);
        
        InputText tipoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tipoEditInput.setId("tipoEditInput");
        tipoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.tipo}", String.class));
        tipoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoEditInput);
        
        Message tipoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoEditInputMessage.setId("tipoEditInputMessage");
        tipoEditInputMessage.setFor("tipoEditInput");
        tipoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UsuarioBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeLabel.setId("nomeLabel");
        nomeLabel.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeLabel);
        
        HtmlOutputText nomeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeValue.setId("nomeValue");
        nomeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.nome}", String.class));
        htmlPanelGrid.getChildren().add(nomeValue);
        
        HtmlOutputText senhaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        senhaLabel.setId("senhaLabel");
        senhaLabel.setValue("Senha:");
        htmlPanelGrid.getChildren().add(senhaLabel);
        
        HtmlOutputText senhaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        senhaValue.setId("senhaValue");
        senhaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.senha}", String.class));
        htmlPanelGrid.getChildren().add(senhaValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        HtmlOutputText emailValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.email}", String.class));
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText tipoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoLabel.setId("tipoLabel");
        tipoLabel.setValue("Tipo:");
        htmlPanelGrid.getChildren().add(tipoLabel);
        
        HtmlOutputText tipoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoValue.setId("tipoValue");
        tipoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{usuarioBean.usuario.tipo}", String.class));
        htmlPanelGrid.getChildren().add(tipoValue);
        
        return htmlPanelGrid;
    }
    
    public Usuario UsuarioBean.getUsuario() {
        if (usuario == null) {
            usuario = new Usuario();
        }
        return usuario;
    }
    
    public void UsuarioBean.setUsuario(Usuario usuario) {
        this.usuario = usuario;
    }
    
    public String UsuarioBean.onEdit() {
        return null;
    }
    
    public boolean UsuarioBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UsuarioBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UsuarioBean.displayList() {
        createDialogVisible = false;
        findAllUsuarios();
        return "usuario";
    }
    
    public String UsuarioBean.displayCreateDialog() {
        usuario = new Usuario();
        createDialogVisible = true;
        return "usuario";
    }
    
    public String UsuarioBean.persist() {
        String message = "";
        if (usuario.getId() != null) {
            usuario.merge();
            message = "message_successfully_updated";
        } else {
            usuario.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Usuario");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsuarios();
    }
    
    public String UsuarioBean.delete() {
        usuario.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Usuario");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUsuarios();
    }
    
    public void UsuarioBean.reset() {
        usuario = null;
        createDialogVisible = false;
    }
    
    public void UsuarioBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
