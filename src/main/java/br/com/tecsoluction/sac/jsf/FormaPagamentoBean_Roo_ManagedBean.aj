// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.FormaPagamento;
import br.com.tecsoluction.sac.jsf.FormaPagamentoBean;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect FormaPagamentoBean_Roo_ManagedBean {
    
    declare @type: FormaPagamentoBean: @ManagedBean(name = "formaPagamentoBean");
    
    declare @type: FormaPagamentoBean: @SessionScoped;
    
    private String FormaPagamentoBean.name = "FormaPagamentoes";
    
    private FormaPagamento FormaPagamentoBean.formaPagamento;
    
    private List<FormaPagamento> FormaPagamentoBean.allFormaPagamentoes;
    
    private boolean FormaPagamentoBean.dataVisible = false;
    
    private List<String> FormaPagamentoBean.columns;
    
    private HtmlPanelGrid FormaPagamentoBean.createPanelGrid;
    
    private HtmlPanelGrid FormaPagamentoBean.editPanelGrid;
    
    private HtmlPanelGrid FormaPagamentoBean.viewPanelGrid;
    
    private boolean FormaPagamentoBean.createDialogVisible = false;
    
    @PostConstruct
    public void FormaPagamentoBean.init() {
        columns = new ArrayList<String>();
        columns.add("nome");
        columns.add("tipo");
        columns.add("parcelas");
        columns.add("adm_porc");
    }
    
    public String FormaPagamentoBean.getName() {
        return name;
    }
    
    public List<String> FormaPagamentoBean.getColumns() {
        return columns;
    }
    
    public List<FormaPagamento> FormaPagamentoBean.getAllFormaPagamentoes() {
        return allFormaPagamentoes;
    }
    
    public void FormaPagamentoBean.setAllFormaPagamentoes(List<FormaPagamento> allFormaPagamentoes) {
        this.allFormaPagamentoes = allFormaPagamentoes;
    }
    
    public String FormaPagamentoBean.findAllFormaPagamentoes() {
        allFormaPagamentoes = FormaPagamento.findAllFormaPagamentoes();
        dataVisible = !allFormaPagamentoes.isEmpty();
        return null;
    }
    
    public boolean FormaPagamentoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void FormaPagamentoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid FormaPagamentoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void FormaPagamentoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid FormaPagamentoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void FormaPagamentoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid FormaPagamentoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void FormaPagamentoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid FormaPagamentoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeCreateOutput.setFor("nomeCreateInput");
        nomeCreateOutput.setId("nomeCreateOutput");
        nomeCreateOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeCreateOutput);
        
        InputText nomeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeCreateInput.setId("nomeCreateInput");
        nomeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.nome}", String.class));
        nomeCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeCreateInput);
        
        Message nomeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeCreateInputMessage.setId("nomeCreateInputMessage");
        nomeCreateInputMessage.setFor("nomeCreateInput");
        nomeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeCreateInputMessage);
        
        OutputLabel tipoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoCreateOutput.setFor("tipoCreateInput");
        tipoCreateOutput.setId("tipoCreateOutput");
        tipoCreateOutput.setValue("Tipo:");
        htmlPanelGrid.getChildren().add(tipoCreateOutput);
        
        InputText tipoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tipoCreateInput.setId("tipoCreateInput");
        tipoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.tipo}", String.class));
        tipoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoCreateInput);
        
        Message tipoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoCreateInputMessage.setId("tipoCreateInputMessage");
        tipoCreateInputMessage.setFor("tipoCreateInput");
        tipoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoCreateInputMessage);
        
        OutputLabel parcelasCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        parcelasCreateOutput.setFor("parcelasCreateInput");
        parcelasCreateOutput.setId("parcelasCreateOutput");
        parcelasCreateOutput.setValue("Parcelas:");
        htmlPanelGrid.getChildren().add(parcelasCreateOutput);
        
        InputText parcelasCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        parcelasCreateInput.setId("parcelasCreateInput");
        parcelasCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.parcelas}", String.class));
        parcelasCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(parcelasCreateInput);
        
        Message parcelasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parcelasCreateInputMessage.setId("parcelasCreateInputMessage");
        parcelasCreateInputMessage.setFor("parcelasCreateInput");
        parcelasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parcelasCreateInputMessage);
        
        OutputLabel adm_porcCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        adm_porcCreateOutput.setFor("adm_porcCreateInput");
        adm_porcCreateOutput.setId("adm_porcCreateOutput");
        adm_porcCreateOutput.setValue("Adm_porc:");
        htmlPanelGrid.getChildren().add(adm_porcCreateOutput);
        
        InputText adm_porcCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        adm_porcCreateInput.setId("adm_porcCreateInput");
        adm_porcCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.adm_porc}", String.class));
        adm_porcCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(adm_porcCreateInput);
        
        Message adm_porcCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        adm_porcCreateInputMessage.setId("adm_porcCreateInputMessage");
        adm_porcCreateInputMessage.setFor("adm_porcCreateInput");
        adm_porcCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(adm_porcCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FormaPagamentoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nomeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nomeEditOutput.setFor("nomeEditInput");
        nomeEditOutput.setId("nomeEditOutput");
        nomeEditOutput.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeEditOutput);
        
        InputText nomeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nomeEditInput.setId("nomeEditInput");
        nomeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.nome}", String.class));
        nomeEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nomeEditInput);
        
        Message nomeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nomeEditInputMessage.setId("nomeEditInputMessage");
        nomeEditInputMessage.setFor("nomeEditInput");
        nomeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nomeEditInputMessage);
        
        OutputLabel tipoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoEditOutput.setFor("tipoEditInput");
        tipoEditOutput.setId("tipoEditOutput");
        tipoEditOutput.setValue("Tipo:");
        htmlPanelGrid.getChildren().add(tipoEditOutput);
        
        InputText tipoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tipoEditInput.setId("tipoEditInput");
        tipoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.tipo}", String.class));
        tipoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoEditInput);
        
        Message tipoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoEditInputMessage.setId("tipoEditInputMessage");
        tipoEditInputMessage.setFor("tipoEditInput");
        tipoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoEditInputMessage);
        
        OutputLabel parcelasEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        parcelasEditOutput.setFor("parcelasEditInput");
        parcelasEditOutput.setId("parcelasEditOutput");
        parcelasEditOutput.setValue("Parcelas:");
        htmlPanelGrid.getChildren().add(parcelasEditOutput);
        
        InputText parcelasEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        parcelasEditInput.setId("parcelasEditInput");
        parcelasEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.parcelas}", String.class));
        parcelasEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(parcelasEditInput);
        
        Message parcelasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        parcelasEditInputMessage.setId("parcelasEditInputMessage");
        parcelasEditInputMessage.setFor("parcelasEditInput");
        parcelasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(parcelasEditInputMessage);
        
        OutputLabel adm_porcEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        adm_porcEditOutput.setFor("adm_porcEditInput");
        adm_porcEditOutput.setId("adm_porcEditOutput");
        adm_porcEditOutput.setValue("Adm_porc:");
        htmlPanelGrid.getChildren().add(adm_porcEditOutput);
        
        InputText adm_porcEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        adm_porcEditInput.setId("adm_porcEditInput");
        adm_porcEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.adm_porc}", String.class));
        adm_porcEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(adm_porcEditInput);
        
        Message adm_porcEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        adm_porcEditInputMessage.setId("adm_porcEditInputMessage");
        adm_porcEditInputMessage.setFor("adm_porcEditInput");
        adm_porcEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(adm_porcEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid FormaPagamentoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nomeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeLabel.setId("nomeLabel");
        nomeLabel.setValue("Nome:");
        htmlPanelGrid.getChildren().add(nomeLabel);
        
        HtmlOutputText nomeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nomeValue.setId("nomeValue");
        nomeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.nome}", String.class));
        htmlPanelGrid.getChildren().add(nomeValue);
        
        HtmlOutputText tipoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoLabel.setId("tipoLabel");
        tipoLabel.setValue("Tipo:");
        htmlPanelGrid.getChildren().add(tipoLabel);
        
        HtmlOutputText tipoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoValue.setId("tipoValue");
        tipoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.tipo}", String.class));
        htmlPanelGrid.getChildren().add(tipoValue);
        
        HtmlOutputText parcelasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parcelasLabel.setId("parcelasLabel");
        parcelasLabel.setValue("Parcelas:");
        htmlPanelGrid.getChildren().add(parcelasLabel);
        
        HtmlOutputText parcelasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        parcelasValue.setId("parcelasValue");
        parcelasValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.parcelas}", String.class));
        htmlPanelGrid.getChildren().add(parcelasValue);
        
        HtmlOutputText adm_porcLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        adm_porcLabel.setId("adm_porcLabel");
        adm_porcLabel.setValue("Adm_porc:");
        htmlPanelGrid.getChildren().add(adm_porcLabel);
        
        HtmlOutputText adm_porcValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        adm_porcValue.setId("adm_porcValue");
        adm_porcValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{formaPagamentoBean.formaPagamento.adm_porc}", String.class));
        htmlPanelGrid.getChildren().add(adm_porcValue);
        
        return htmlPanelGrid;
    }
    
    public FormaPagamento FormaPagamentoBean.getFormaPagamento() {
        if (formaPagamento == null) {
            formaPagamento = new FormaPagamento();
        }
        return formaPagamento;
    }
    
    public void FormaPagamentoBean.setFormaPagamento(FormaPagamento formaPagamento) {
        this.formaPagamento = formaPagamento;
    }
    
    public String FormaPagamentoBean.onEdit() {
        return null;
    }
    
    public boolean FormaPagamentoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void FormaPagamentoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String FormaPagamentoBean.displayList() {
        createDialogVisible = false;
        findAllFormaPagamentoes();
        return "formaPagamento";
    }
    
    public String FormaPagamentoBean.displayCreateDialog() {
        formaPagamento = new FormaPagamento();
        createDialogVisible = true;
        return "formaPagamento";
    }
    
    public String FormaPagamentoBean.persist() {
        String message = "";
        if (formaPagamento.getId() != null) {
            formaPagamento.merge();
            message = "message_successfully_updated";
        } else {
            formaPagamento.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "FormaPagamento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFormaPagamentoes();
    }
    
    public String FormaPagamentoBean.delete() {
        formaPagamento.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "FormaPagamento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllFormaPagamentoes();
    }
    
    public void FormaPagamentoBean.reset() {
        formaPagamento = null;
        createDialogVisible = false;
    }
    
    public void FormaPagamentoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
