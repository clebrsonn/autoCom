// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Cotacao;
import br.com.tecsoluction.sac.DevolucaoCompra;
import br.com.tecsoluction.sac.DevolucaoVenda;
import br.com.tecsoluction.sac.Estoque;
import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.PedidoCompra;
import br.com.tecsoluction.sac.PedidoVenda;
import br.com.tecsoluction.sac.Produto;
import br.com.tecsoluction.sac.Recebimento;
import br.com.tecsoluction.sac.jsf.ItemBean;
import br.com.tecsoluction.sac.jsf.converter.CotacaoConverter;
import br.com.tecsoluction.sac.jsf.converter.DevolucaoCompraConverter;
import br.com.tecsoluction.sac.jsf.converter.DevolucaoVendaConverter;
import br.com.tecsoluction.sac.jsf.converter.EstoqueConverter;
import br.com.tecsoluction.sac.jsf.converter.PedidoCompraConverter;
import br.com.tecsoluction.sac.jsf.converter.PedidoVendaConverter;
import br.com.tecsoluction.sac.jsf.converter.ProdutoConverter;
import br.com.tecsoluction.sac.jsf.converter.RecebimentoConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ItemBean_Roo_ManagedBean {
    
    declare @type: ItemBean: @ManagedBean(name = "itemBean");
    
    declare @type: ItemBean: @SessionScoped;
    
    private String ItemBean.name = "Items";
    
    private Item ItemBean.item;
    
    private List<Item> ItemBean.allItems;
    
    private boolean ItemBean.dataVisible = false;
    
    private List<String> ItemBean.columns;
    
    private HtmlPanelGrid ItemBean.createPanelGrid;
    
    private HtmlPanelGrid ItemBean.editPanelGrid;
    
    private HtmlPanelGrid ItemBean.viewPanelGrid;
    
    private boolean ItemBean.createDialogVisible = false;
    
    @PostConstruct
    public void ItemBean.init() {
        columns = new ArrayList<String>();
        columns.add("codigo");
        columns.add("descricao");
        columns.add("precounitario");
        columns.add("qtd");
        columns.add("precotototal");
    }
    
    public String ItemBean.getName() {
        return name;
    }
    
    public List<String> ItemBean.getColumns() {
        return columns;
    }
    
    public List<Item> ItemBean.getAllItems() {
        return allItems;
    }
    
    public void ItemBean.setAllItems(List<Item> allItems) {
        this.allItems = allItems;
    }
    
    public String ItemBean.findAllItems() {
        allItems = Item.findAllItems();
        dataVisible = !allItems.isEmpty();
        return null;
    }
    
    public boolean ItemBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ItemBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ItemBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ItemBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ItemBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ItemBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ItemBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ItemBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ItemBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codigoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codigoCreateOutput.setFor("codigoCreateInput");
        codigoCreateOutput.setId("codigoCreateOutput");
        codigoCreateOutput.setValue("Codigo:");
        htmlPanelGrid.getChildren().add(codigoCreateOutput);
        
        InputText codigoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codigoCreateInput.setId("codigoCreateInput");
        codigoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.codigo}", String.class));
        codigoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codigoCreateInput);
        
        Message codigoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codigoCreateInputMessage.setId("codigoCreateInputMessage");
        codigoCreateInputMessage.setFor("codigoCreateInput");
        codigoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codigoCreateInputMessage);
        
        OutputLabel descricaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descricaoCreateOutput.setFor("descricaoCreateInput");
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao:");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputText descricaoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.descricao}", String.class));
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        OutputLabel precounitarioCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precounitarioCreateOutput.setFor("precounitarioCreateInput");
        precounitarioCreateOutput.setId("precounitarioCreateOutput");
        precounitarioCreateOutput.setValue("Precounitario:");
        htmlPanelGrid.getChildren().add(precounitarioCreateOutput);
        
        InputText precounitarioCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precounitarioCreateInput.setId("precounitarioCreateInput");
        precounitarioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.precounitario}", Double.class));
        precounitarioCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precounitarioCreateInput);
        
        Message precounitarioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precounitarioCreateInputMessage.setId("precounitarioCreateInputMessage");
        precounitarioCreateInputMessage.setFor("precounitarioCreateInput");
        precounitarioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precounitarioCreateInputMessage);
        
        OutputLabel qtdCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        qtdCreateOutput.setFor("qtdCreateInput");
        qtdCreateOutput.setId("qtdCreateOutput");
        qtdCreateOutput.setValue("Qtd:");
        htmlPanelGrid.getChildren().add(qtdCreateOutput);
        
        InputText qtdCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        qtdCreateInput.setId("qtdCreateInput");
        qtdCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.qtd}", String.class));
        qtdCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(qtdCreateInput);
        
        Message qtdCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        qtdCreateInputMessage.setId("qtdCreateInputMessage");
        qtdCreateInputMessage.setFor("qtdCreateInput");
        qtdCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(qtdCreateInputMessage);
        
        OutputLabel precotototalCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precotototalCreateOutput.setFor("precotototalCreateInput");
        precotototalCreateOutput.setId("precotototalCreateOutput");
        precotototalCreateOutput.setValue("Precotototal:");
        htmlPanelGrid.getChildren().add(precotototalCreateOutput);
        
        InputText precotototalCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precotototalCreateInput.setId("precotototalCreateInput");
        precotototalCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.precotototal}", Double.class));
        precotototalCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precotototalCreateInput);
        
        Message precotototalCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precotototalCreateInputMessage.setId("precotototalCreateInputMessage");
        precotototalCreateInputMessage.setFor("precotototalCreateInput");
        precotototalCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precotototalCreateInputMessage);
        
        OutputLabel produtoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        produtoCreateOutput.setFor("produtoCreateInput");
        produtoCreateOutput.setId("produtoCreateOutput");
        produtoCreateOutput.setValue("Produto:");
        htmlPanelGrid.getChildren().add(produtoCreateOutput);
        
        AutoComplete produtoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        produtoCreateInput.setId("produtoCreateInput");
        produtoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.produto}", Produto.class));
        produtoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeProduto}", List.class, new Class[] { String.class }));
        produtoCreateInput.setDropdown(true);
        produtoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "produto", String.class));
        produtoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{produto.codebar} #{produto.marca} #{produto.descricao} #{produto.precocusto}", String.class));
        produtoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{produto}", Produto.class));
        produtoCreateInput.setConverter(new ProdutoConverter());
        produtoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(produtoCreateInput);
        
        Message produtoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        produtoCreateInputMessage.setId("produtoCreateInputMessage");
        produtoCreateInputMessage.setFor("produtoCreateInput");
        produtoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(produtoCreateInputMessage);
        
        OutputLabel pedidovendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidovendaCreateOutput.setFor("pedidovendaCreateInput");
        pedidovendaCreateOutput.setId("pedidovendaCreateOutput");
        pedidovendaCreateOutput.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaCreateOutput);
        
        AutoComplete pedidovendaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidovendaCreateInput.setId("pedidovendaCreateInput");
        pedidovendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.pedidovenda}", PedidoVenda.class));
        pedidovendaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completePedidovenda}", List.class, new Class[] { String.class }));
        pedidovendaCreateInput.setDropdown(true);
        pedidovendaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidovenda", String.class));
        pedidovendaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidovenda.datavenda}", String.class));
        pedidovendaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidovenda}", PedidoVenda.class));
        pedidovendaCreateInput.setConverter(new PedidoVendaConverter());
        pedidovendaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidovendaCreateInput);
        
        Message pedidovendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidovendaCreateInputMessage.setId("pedidovendaCreateInputMessage");
        pedidovendaCreateInputMessage.setFor("pedidovendaCreateInput");
        pedidovendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidovendaCreateInputMessage);
        
        OutputLabel pedidocompraCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidocompraCreateOutput.setFor("pedidocompraCreateInput");
        pedidocompraCreateOutput.setId("pedidocompraCreateOutput");
        pedidocompraCreateOutput.setValue("Pedidocompra:");
        htmlPanelGrid.getChildren().add(pedidocompraCreateOutput);
        
        AutoComplete pedidocompraCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidocompraCreateInput.setId("pedidocompraCreateInput");
        pedidocompraCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.pedidocompra}", PedidoCompra.class));
        pedidocompraCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completePedidocompra}", List.class, new Class[] { String.class }));
        pedidocompraCreateInput.setDropdown(true);
        pedidocompraCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidocompra", String.class));
        pedidocompraCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidocompra.datapedidocompra} #{pedidocompra.total}", String.class));
        pedidocompraCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidocompra}", PedidoCompra.class));
        pedidocompraCreateInput.setConverter(new PedidoCompraConverter());
        pedidocompraCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidocompraCreateInput);
        
        Message pedidocompraCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidocompraCreateInputMessage.setId("pedidocompraCreateInputMessage");
        pedidocompraCreateInputMessage.setFor("pedidocompraCreateInput");
        pedidocompraCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidocompraCreateInputMessage);
        
        OutputLabel recebimentoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        recebimentoCreateOutput.setFor("recebimentoCreateInput");
        recebimentoCreateOutput.setId("recebimentoCreateOutput");
        recebimentoCreateOutput.setValue("Recebimento:");
        htmlPanelGrid.getChildren().add(recebimentoCreateOutput);
        
        AutoComplete recebimentoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        recebimentoCreateInput.setId("recebimentoCreateInput");
        recebimentoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.recebimento}", Recebimento.class));
        recebimentoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeRecebimento}", List.class, new Class[] { String.class }));
        recebimentoCreateInput.setDropdown(true);
        recebimentoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "recebimento", String.class));
        recebimentoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{recebimento.datarecebimento} #{recebimento.status}", String.class));
        recebimentoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{recebimento}", Recebimento.class));
        recebimentoCreateInput.setConverter(new RecebimentoConverter());
        recebimentoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(recebimentoCreateInput);
        
        Message recebimentoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        recebimentoCreateInputMessage.setId("recebimentoCreateInputMessage");
        recebimentoCreateInputMessage.setFor("recebimentoCreateInput");
        recebimentoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(recebimentoCreateInputMessage);
        
        OutputLabel cotacaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cotacaoCreateOutput.setFor("cotacaoCreateInput");
        cotacaoCreateOutput.setId("cotacaoCreateOutput");
        cotacaoCreateOutput.setValue("Cotacao:");
        htmlPanelGrid.getChildren().add(cotacaoCreateOutput);
        
        AutoComplete cotacaoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        cotacaoCreateInput.setId("cotacaoCreateInput");
        cotacaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.cotacao}", Cotacao.class));
        cotacaoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeCotacao}", List.class, new Class[] { String.class }));
        cotacaoCreateInput.setDropdown(true);
        cotacaoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "cotacao", String.class));
        cotacaoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{cotacao.datacotacao} #{cotacao.status}", String.class));
        cotacaoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{cotacao}", Cotacao.class));
        cotacaoCreateInput.setConverter(new CotacaoConverter());
        cotacaoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(cotacaoCreateInput);
        
        Message cotacaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cotacaoCreateInputMessage.setId("cotacaoCreateInputMessage");
        cotacaoCreateInputMessage.setFor("cotacaoCreateInput");
        cotacaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cotacaoCreateInputMessage);
        
        OutputLabel devolucaocompraCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        devolucaocompraCreateOutput.setFor("devolucaocompraCreateInput");
        devolucaocompraCreateOutput.setId("devolucaocompraCreateOutput");
        devolucaocompraCreateOutput.setValue("Devolucaocompra:");
        htmlPanelGrid.getChildren().add(devolucaocompraCreateOutput);
        
        AutoComplete devolucaocompraCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        devolucaocompraCreateInput.setId("devolucaocompraCreateInput");
        devolucaocompraCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.devolucaocompra}", DevolucaoCompra.class));
        devolucaocompraCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeDevolucaocompra}", List.class, new Class[] { String.class }));
        devolucaocompraCreateInput.setDropdown(true);
        devolucaocompraCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "devolucaocompra", String.class));
        devolucaocompraCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{devolucaocompra.datacompra} #{devolucaocompra.status}", String.class));
        devolucaocompraCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{devolucaocompra}", DevolucaoCompra.class));
        devolucaocompraCreateInput.setConverter(new DevolucaoCompraConverter());
        devolucaocompraCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(devolucaocompraCreateInput);
        
        Message devolucaocompraCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        devolucaocompraCreateInputMessage.setId("devolucaocompraCreateInputMessage");
        devolucaocompraCreateInputMessage.setFor("devolucaocompraCreateInput");
        devolucaocompraCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(devolucaocompraCreateInputMessage);
        
        OutputLabel devolucaovendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        devolucaovendaCreateOutput.setFor("devolucaovendaCreateInput");
        devolucaovendaCreateOutput.setId("devolucaovendaCreateOutput");
        devolucaovendaCreateOutput.setValue("Devolucaovenda:");
        htmlPanelGrid.getChildren().add(devolucaovendaCreateOutput);
        
        AutoComplete devolucaovendaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        devolucaovendaCreateInput.setId("devolucaovendaCreateInput");
        devolucaovendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.devolucaovenda}", DevolucaoVenda.class));
        devolucaovendaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeDevolucaovenda}", List.class, new Class[] { String.class }));
        devolucaovendaCreateInput.setDropdown(true);
        devolucaovendaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "devolucaovenda", String.class));
        devolucaovendaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{devolucaovenda.datarecebimento} #{devolucaovenda.status}", String.class));
        devolucaovendaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{devolucaovenda}", DevolucaoVenda.class));
        devolucaovendaCreateInput.setConverter(new DevolucaoVendaConverter());
        devolucaovendaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(devolucaovendaCreateInput);
        
        Message devolucaovendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        devolucaovendaCreateInputMessage.setId("devolucaovendaCreateInputMessage");
        devolucaovendaCreateInputMessage.setFor("devolucaovendaCreateInput");
        devolucaovendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(devolucaovendaCreateInputMessage);
        
        OutputLabel estoqueCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estoqueCreateOutput.setFor("estoqueCreateInput");
        estoqueCreateOutput.setId("estoqueCreateOutput");
        estoqueCreateOutput.setValue("Estoque:");
        htmlPanelGrid.getChildren().add(estoqueCreateOutput);
        
        AutoComplete estoqueCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estoqueCreateInput.setId("estoqueCreateInput");
        estoqueCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.estoque}", Estoque.class));
        estoqueCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeEstoque}", List.class, new Class[] { String.class }));
        estoqueCreateInput.setDropdown(true);
        estoqueCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estoque", String.class));
        estoqueCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estoque.id}", String.class));
        estoqueCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estoque}", Estoque.class));
        estoqueCreateInput.setConverter(new EstoqueConverter());
        estoqueCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(estoqueCreateInput);
        
        Message estoqueCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estoqueCreateInputMessage.setId("estoqueCreateInputMessage");
        estoqueCreateInputMessage.setFor("estoqueCreateInput");
        estoqueCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estoqueCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ItemBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codigoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codigoEditOutput.setFor("codigoEditInput");
        codigoEditOutput.setId("codigoEditOutput");
        codigoEditOutput.setValue("Codigo:");
        htmlPanelGrid.getChildren().add(codigoEditOutput);
        
        InputText codigoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codigoEditInput.setId("codigoEditInput");
        codigoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.codigo}", String.class));
        codigoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codigoEditInput);
        
        Message codigoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codigoEditInputMessage.setId("codigoEditInputMessage");
        codigoEditInputMessage.setFor("codigoEditInput");
        codigoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codigoEditInputMessage);
        
        OutputLabel descricaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descricaoEditOutput.setFor("descricaoEditInput");
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao:");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputText descricaoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.descricao}", String.class));
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        OutputLabel precounitarioEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precounitarioEditOutput.setFor("precounitarioEditInput");
        precounitarioEditOutput.setId("precounitarioEditOutput");
        precounitarioEditOutput.setValue("Precounitario:");
        htmlPanelGrid.getChildren().add(precounitarioEditOutput);
        
        InputText precounitarioEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precounitarioEditInput.setId("precounitarioEditInput");
        precounitarioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.precounitario}", Double.class));
        precounitarioEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precounitarioEditInput);
        
        Message precounitarioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precounitarioEditInputMessage.setId("precounitarioEditInputMessage");
        precounitarioEditInputMessage.setFor("precounitarioEditInput");
        precounitarioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precounitarioEditInputMessage);
        
        OutputLabel qtdEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        qtdEditOutput.setFor("qtdEditInput");
        qtdEditOutput.setId("qtdEditOutput");
        qtdEditOutput.setValue("Qtd:");
        htmlPanelGrid.getChildren().add(qtdEditOutput);
        
        InputText qtdEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        qtdEditInput.setId("qtdEditInput");
        qtdEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.qtd}", String.class));
        qtdEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(qtdEditInput);
        
        Message qtdEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        qtdEditInputMessage.setId("qtdEditInputMessage");
        qtdEditInputMessage.setFor("qtdEditInput");
        qtdEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(qtdEditInputMessage);
        
        OutputLabel precotototalEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precotototalEditOutput.setFor("precotototalEditInput");
        precotototalEditOutput.setId("precotototalEditOutput");
        precotototalEditOutput.setValue("Precotototal:");
        htmlPanelGrid.getChildren().add(precotototalEditOutput);
        
        InputText precotototalEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precotototalEditInput.setId("precotototalEditInput");
        precotototalEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.precotototal}", Double.class));
        precotototalEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precotototalEditInput);
        
        Message precotototalEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precotototalEditInputMessage.setId("precotototalEditInputMessage");
        precotototalEditInputMessage.setFor("precotototalEditInput");
        precotototalEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precotototalEditInputMessage);
        
        OutputLabel produtoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        produtoEditOutput.setFor("produtoEditInput");
        produtoEditOutput.setId("produtoEditOutput");
        produtoEditOutput.setValue("Produto:");
        htmlPanelGrid.getChildren().add(produtoEditOutput);
        
        AutoComplete produtoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        produtoEditInput.setId("produtoEditInput");
        produtoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.produto}", Produto.class));
        produtoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeProduto}", List.class, new Class[] { String.class }));
        produtoEditInput.setDropdown(true);
        produtoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "produto", String.class));
        produtoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{produto.codebar} #{produto.marca} #{produto.descricao} #{produto.precocusto}", String.class));
        produtoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{produto}", Produto.class));
        produtoEditInput.setConverter(new ProdutoConverter());
        produtoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(produtoEditInput);
        
        Message produtoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        produtoEditInputMessage.setId("produtoEditInputMessage");
        produtoEditInputMessage.setFor("produtoEditInput");
        produtoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(produtoEditInputMessage);
        
        OutputLabel pedidovendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidovendaEditOutput.setFor("pedidovendaEditInput");
        pedidovendaEditOutput.setId("pedidovendaEditOutput");
        pedidovendaEditOutput.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaEditOutput);
        
        AutoComplete pedidovendaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidovendaEditInput.setId("pedidovendaEditInput");
        pedidovendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.pedidovenda}", PedidoVenda.class));
        pedidovendaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completePedidovenda}", List.class, new Class[] { String.class }));
        pedidovendaEditInput.setDropdown(true);
        pedidovendaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidovenda", String.class));
        pedidovendaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidovenda.datavenda}", String.class));
        pedidovendaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidovenda}", PedidoVenda.class));
        pedidovendaEditInput.setConverter(new PedidoVendaConverter());
        pedidovendaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidovendaEditInput);
        
        Message pedidovendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidovendaEditInputMessage.setId("pedidovendaEditInputMessage");
        pedidovendaEditInputMessage.setFor("pedidovendaEditInput");
        pedidovendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidovendaEditInputMessage);
        
        OutputLabel pedidocompraEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        pedidocompraEditOutput.setFor("pedidocompraEditInput");
        pedidocompraEditOutput.setId("pedidocompraEditOutput");
        pedidocompraEditOutput.setValue("Pedidocompra:");
        htmlPanelGrid.getChildren().add(pedidocompraEditOutput);
        
        AutoComplete pedidocompraEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        pedidocompraEditInput.setId("pedidocompraEditInput");
        pedidocompraEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.pedidocompra}", PedidoCompra.class));
        pedidocompraEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completePedidocompra}", List.class, new Class[] { String.class }));
        pedidocompraEditInput.setDropdown(true);
        pedidocompraEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "pedidocompra", String.class));
        pedidocompraEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{pedidocompra.datapedidocompra} #{pedidocompra.total}", String.class));
        pedidocompraEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{pedidocompra}", PedidoCompra.class));
        pedidocompraEditInput.setConverter(new PedidoCompraConverter());
        pedidocompraEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(pedidocompraEditInput);
        
        Message pedidocompraEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        pedidocompraEditInputMessage.setId("pedidocompraEditInputMessage");
        pedidocompraEditInputMessage.setFor("pedidocompraEditInput");
        pedidocompraEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(pedidocompraEditInputMessage);
        
        OutputLabel recebimentoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        recebimentoEditOutput.setFor("recebimentoEditInput");
        recebimentoEditOutput.setId("recebimentoEditOutput");
        recebimentoEditOutput.setValue("Recebimento:");
        htmlPanelGrid.getChildren().add(recebimentoEditOutput);
        
        AutoComplete recebimentoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        recebimentoEditInput.setId("recebimentoEditInput");
        recebimentoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.recebimento}", Recebimento.class));
        recebimentoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeRecebimento}", List.class, new Class[] { String.class }));
        recebimentoEditInput.setDropdown(true);
        recebimentoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "recebimento", String.class));
        recebimentoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{recebimento.datarecebimento} #{recebimento.status}", String.class));
        recebimentoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{recebimento}", Recebimento.class));
        recebimentoEditInput.setConverter(new RecebimentoConverter());
        recebimentoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(recebimentoEditInput);
        
        Message recebimentoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        recebimentoEditInputMessage.setId("recebimentoEditInputMessage");
        recebimentoEditInputMessage.setFor("recebimentoEditInput");
        recebimentoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(recebimentoEditInputMessage);
        
        OutputLabel cotacaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        cotacaoEditOutput.setFor("cotacaoEditInput");
        cotacaoEditOutput.setId("cotacaoEditOutput");
        cotacaoEditOutput.setValue("Cotacao:");
        htmlPanelGrid.getChildren().add(cotacaoEditOutput);
        
        AutoComplete cotacaoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        cotacaoEditInput.setId("cotacaoEditInput");
        cotacaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.cotacao}", Cotacao.class));
        cotacaoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeCotacao}", List.class, new Class[] { String.class }));
        cotacaoEditInput.setDropdown(true);
        cotacaoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "cotacao", String.class));
        cotacaoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{cotacao.datacotacao} #{cotacao.status}", String.class));
        cotacaoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{cotacao}", Cotacao.class));
        cotacaoEditInput.setConverter(new CotacaoConverter());
        cotacaoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(cotacaoEditInput);
        
        Message cotacaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        cotacaoEditInputMessage.setId("cotacaoEditInputMessage");
        cotacaoEditInputMessage.setFor("cotacaoEditInput");
        cotacaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(cotacaoEditInputMessage);
        
        OutputLabel devolucaocompraEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        devolucaocompraEditOutput.setFor("devolucaocompraEditInput");
        devolucaocompraEditOutput.setId("devolucaocompraEditOutput");
        devolucaocompraEditOutput.setValue("Devolucaocompra:");
        htmlPanelGrid.getChildren().add(devolucaocompraEditOutput);
        
        AutoComplete devolucaocompraEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        devolucaocompraEditInput.setId("devolucaocompraEditInput");
        devolucaocompraEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.devolucaocompra}", DevolucaoCompra.class));
        devolucaocompraEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeDevolucaocompra}", List.class, new Class[] { String.class }));
        devolucaocompraEditInput.setDropdown(true);
        devolucaocompraEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "devolucaocompra", String.class));
        devolucaocompraEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{devolucaocompra.datacompra} #{devolucaocompra.status}", String.class));
        devolucaocompraEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{devolucaocompra}", DevolucaoCompra.class));
        devolucaocompraEditInput.setConverter(new DevolucaoCompraConverter());
        devolucaocompraEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(devolucaocompraEditInput);
        
        Message devolucaocompraEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        devolucaocompraEditInputMessage.setId("devolucaocompraEditInputMessage");
        devolucaocompraEditInputMessage.setFor("devolucaocompraEditInput");
        devolucaocompraEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(devolucaocompraEditInputMessage);
        
        OutputLabel devolucaovendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        devolucaovendaEditOutput.setFor("devolucaovendaEditInput");
        devolucaovendaEditOutput.setId("devolucaovendaEditOutput");
        devolucaovendaEditOutput.setValue("Devolucaovenda:");
        htmlPanelGrid.getChildren().add(devolucaovendaEditOutput);
        
        AutoComplete devolucaovendaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        devolucaovendaEditInput.setId("devolucaovendaEditInput");
        devolucaovendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.devolucaovenda}", DevolucaoVenda.class));
        devolucaovendaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeDevolucaovenda}", List.class, new Class[] { String.class }));
        devolucaovendaEditInput.setDropdown(true);
        devolucaovendaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "devolucaovenda", String.class));
        devolucaovendaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{devolucaovenda.datarecebimento} #{devolucaovenda.status}", String.class));
        devolucaovendaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{devolucaovenda}", DevolucaoVenda.class));
        devolucaovendaEditInput.setConverter(new DevolucaoVendaConverter());
        devolucaovendaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(devolucaovendaEditInput);
        
        Message devolucaovendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        devolucaovendaEditInputMessage.setId("devolucaovendaEditInputMessage");
        devolucaovendaEditInputMessage.setFor("devolucaovendaEditInput");
        devolucaovendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(devolucaovendaEditInputMessage);
        
        OutputLabel estoqueEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estoqueEditOutput.setFor("estoqueEditInput");
        estoqueEditOutput.setId("estoqueEditOutput");
        estoqueEditOutput.setValue("Estoque:");
        htmlPanelGrid.getChildren().add(estoqueEditOutput);
        
        AutoComplete estoqueEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estoqueEditInput.setId("estoqueEditInput");
        estoqueEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.estoque}", Estoque.class));
        estoqueEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{itemBean.completeEstoque}", List.class, new Class[] { String.class }));
        estoqueEditInput.setDropdown(true);
        estoqueEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estoque", String.class));
        estoqueEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estoque.id}", String.class));
        estoqueEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estoque}", Estoque.class));
        estoqueEditInput.setConverter(new EstoqueConverter());
        estoqueEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(estoqueEditInput);
        
        Message estoqueEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estoqueEditInputMessage.setId("estoqueEditInputMessage");
        estoqueEditInputMessage.setFor("estoqueEditInput");
        estoqueEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estoqueEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ItemBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText codigoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codigoLabel.setId("codigoLabel");
        codigoLabel.setValue("Codigo:");
        htmlPanelGrid.getChildren().add(codigoLabel);
        
        HtmlOutputText codigoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codigoValue.setId("codigoValue");
        codigoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.codigo}", String.class));
        htmlPanelGrid.getChildren().add(codigoValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        HtmlOutputText descricaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.descricao}", String.class));
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        HtmlOutputText precounitarioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precounitarioLabel.setId("precounitarioLabel");
        precounitarioLabel.setValue("Precounitario:");
        htmlPanelGrid.getChildren().add(precounitarioLabel);
        
        HtmlOutputText precounitarioValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precounitarioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.precounitario}", String.class));
        htmlPanelGrid.getChildren().add(precounitarioValue);
        
        HtmlOutputText qtdLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        qtdLabel.setId("qtdLabel");
        qtdLabel.setValue("Qtd:");
        htmlPanelGrid.getChildren().add(qtdLabel);
        
        HtmlOutputText qtdValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        qtdValue.setId("qtdValue");
        qtdValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.qtd}", String.class));
        htmlPanelGrid.getChildren().add(qtdValue);
        
        HtmlOutputText precotototalLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precotototalLabel.setId("precotototalLabel");
        precotototalLabel.setValue("Precotototal:");
        htmlPanelGrid.getChildren().add(precotototalLabel);
        
        HtmlOutputText precotototalValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precotototalValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.precotototal}", String.class));
        htmlPanelGrid.getChildren().add(precotototalValue);
        
        HtmlOutputText produtoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        produtoLabel.setId("produtoLabel");
        produtoLabel.setValue("Produto:");
        htmlPanelGrid.getChildren().add(produtoLabel);
        
        HtmlOutputText produtoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        produtoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.produto}", Produto.class));
        produtoValue.setConverter(new ProdutoConverter());
        htmlPanelGrid.getChildren().add(produtoValue);
        
        HtmlOutputText pedidovendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidovendaLabel.setId("pedidovendaLabel");
        pedidovendaLabel.setValue("Pedidovenda:");
        htmlPanelGrid.getChildren().add(pedidovendaLabel);
        
        HtmlOutputText pedidovendaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidovendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.pedidovenda}", PedidoVenda.class));
        pedidovendaValue.setConverter(new PedidoVendaConverter());
        htmlPanelGrid.getChildren().add(pedidovendaValue);
        
        HtmlOutputText pedidocompraLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidocompraLabel.setId("pedidocompraLabel");
        pedidocompraLabel.setValue("Pedidocompra:");
        htmlPanelGrid.getChildren().add(pedidocompraLabel);
        
        HtmlOutputText pedidocompraValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        pedidocompraValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.pedidocompra}", PedidoCompra.class));
        pedidocompraValue.setConverter(new PedidoCompraConverter());
        htmlPanelGrid.getChildren().add(pedidocompraValue);
        
        HtmlOutputText recebimentoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        recebimentoLabel.setId("recebimentoLabel");
        recebimentoLabel.setValue("Recebimento:");
        htmlPanelGrid.getChildren().add(recebimentoLabel);
        
        HtmlOutputText recebimentoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        recebimentoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.recebimento}", Recebimento.class));
        recebimentoValue.setConverter(new RecebimentoConverter());
        htmlPanelGrid.getChildren().add(recebimentoValue);
        
        HtmlOutputText cotacaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cotacaoLabel.setId("cotacaoLabel");
        cotacaoLabel.setValue("Cotacao:");
        htmlPanelGrid.getChildren().add(cotacaoLabel);
        
        HtmlOutputText cotacaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        cotacaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.cotacao}", Cotacao.class));
        cotacaoValue.setConverter(new CotacaoConverter());
        htmlPanelGrid.getChildren().add(cotacaoValue);
        
        HtmlOutputText devolucaocompraLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        devolucaocompraLabel.setId("devolucaocompraLabel");
        devolucaocompraLabel.setValue("Devolucaocompra:");
        htmlPanelGrid.getChildren().add(devolucaocompraLabel);
        
        HtmlOutputText devolucaocompraValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        devolucaocompraValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.devolucaocompra}", DevolucaoCompra.class));
        devolucaocompraValue.setConverter(new DevolucaoCompraConverter());
        htmlPanelGrid.getChildren().add(devolucaocompraValue);
        
        HtmlOutputText devolucaovendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        devolucaovendaLabel.setId("devolucaovendaLabel");
        devolucaovendaLabel.setValue("Devolucaovenda:");
        htmlPanelGrid.getChildren().add(devolucaovendaLabel);
        
        HtmlOutputText devolucaovendaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        devolucaovendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.devolucaovenda}", DevolucaoVenda.class));
        devolucaovendaValue.setConverter(new DevolucaoVendaConverter());
        htmlPanelGrid.getChildren().add(devolucaovendaValue);
        
        HtmlOutputText estoqueLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estoqueLabel.setId("estoqueLabel");
        estoqueLabel.setValue("Estoque:");
        htmlPanelGrid.getChildren().add(estoqueLabel);
        
        HtmlOutputText estoqueValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estoqueValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.item.estoque}", Estoque.class));
        estoqueValue.setConverter(new EstoqueConverter());
        htmlPanelGrid.getChildren().add(estoqueValue);
        
        return htmlPanelGrid;
    }
    
    public Item ItemBean.getItem() {
        if (item == null) {
            item = new Item();
        }
        return item;
    }
    
    public void ItemBean.setItem(Item item) {
        this.item = item;
    }
    
    public List<Produto> ItemBean.completeProduto(String query) {
        List<Produto> suggestions = new ArrayList<Produto>();
        for (Produto produto : Produto.findAllProdutoes()) {
            String produtoStr = String.valueOf(produto.getCodebar() +  " "  + produto.getMarca() +  " "  + produto.getDescricao() +  " "  + produto.getPrecocusto());
            if (produtoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(produto);
            }
        }
        return suggestions;
    }
    
    public List<PedidoVenda> ItemBean.completePedidovenda(String query) {
        List<PedidoVenda> suggestions = new ArrayList<PedidoVenda>();
        for (PedidoVenda pedidoVenda : PedidoVenda.findAllPedidoVendas()) {
            String pedidoVendaStr = String.valueOf(pedidoVenda.getDatavenda());
            if (pedidoVendaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pedidoVenda);
            }
        }
        return suggestions;
    }
    
    public List<PedidoCompra> ItemBean.completePedidocompra(String query) {
        List<PedidoCompra> suggestions = new ArrayList<PedidoCompra>();
        for (PedidoCompra pedidoCompra : PedidoCompra.findAllPedidoCompras()) {
            String pedidoCompraStr = String.valueOf(pedidoCompra.getDatapedidocompra() +  " "  + pedidoCompra.getTotal());
            if (pedidoCompraStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(pedidoCompra);
            }
        }
        return suggestions;
    }
    
    public List<Recebimento> ItemBean.completeRecebimento(String query) {
        List<Recebimento> suggestions = new ArrayList<Recebimento>();
        for (Recebimento recebimento : Recebimento.findAllRecebimentoes()) {
            String recebimentoStr = String.valueOf(recebimento.getDatarecebimento() +  " "  + recebimento.getStatus());
            if (recebimentoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(recebimento);
            }
        }
        return suggestions;
    }
    
    public List<Cotacao> ItemBean.completeCotacao(String query) {
        List<Cotacao> suggestions = new ArrayList<Cotacao>();
        for (Cotacao cotacao : Cotacao.findAllCotacaos()) {
            String cotacaoStr = String.valueOf(cotacao.getDatacotacao() +  " "  + cotacao.getStatus());
            if (cotacaoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(cotacao);
            }
        }
        return suggestions;
    }
    
    public List<DevolucaoCompra> ItemBean.completeDevolucaocompra(String query) {
        List<DevolucaoCompra> suggestions = new ArrayList<DevolucaoCompra>();
        for (DevolucaoCompra devolucaoCompra : DevolucaoCompra.findAllDevolucaoCompras()) {
            String devolucaoCompraStr = String.valueOf(devolucaoCompra.getDatacompra() +  " "  + devolucaoCompra.getStatus());
            if (devolucaoCompraStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(devolucaoCompra);
            }
        }
        return suggestions;
    }
    
    public List<DevolucaoVenda> ItemBean.completeDevolucaovenda(String query) {
        List<DevolucaoVenda> suggestions = new ArrayList<DevolucaoVenda>();
        for (DevolucaoVenda devolucaoVenda : DevolucaoVenda.findAllDevolucaoVendas()) {
            String devolucaoVendaStr = String.valueOf(devolucaoVenda.getDatarecebimento() +  " "  + devolucaoVenda.getStatus());
            if (devolucaoVendaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(devolucaoVenda);
            }
        }
        return suggestions;
    }
    
    public List<Estoque> ItemBean.completeEstoque(String query) {
        List<Estoque> suggestions = new ArrayList<Estoque>();
        for (Estoque estoque : Estoque.findAllEstoques()) {
            String estoqueStr = String.valueOf(estoque.getId());
            if (estoqueStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(estoque);
            }
        }
        return suggestions;
    }
    
    public String ItemBean.onEdit() {
        return null;
    }
    
    public boolean ItemBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ItemBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ItemBean.displayList() {
        createDialogVisible = false;
        findAllItems();
        return "item";
    }
    
    public String ItemBean.displayCreateDialog() {
        item = new Item();
        createDialogVisible = true;
        return "item";
    }
    
    public String ItemBean.persist() {
        String message = "";
        if (item.getId() != null) {
            item.merge();
            message = "message_successfully_updated";
        } else {
            item.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Item");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllItems();
    }
    
    public String ItemBean.delete() {
        item.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Item");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllItems();
    }
    
    public void ItemBean.reset() {
        item = null;
        createDialogVisible = false;
    }
    
    public void ItemBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
