// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Categoria;
import br.com.tecsoluction.sac.Fornecedor;
import br.com.tecsoluction.sac.Imposto;
import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.Produto;
import br.com.tecsoluction.sac.jsf.ProdutoBean;
import br.com.tecsoluction.sac.jsf.converter.CategoriaConverter;
import br.com.tecsoluction.sac.jsf.converter.FornecedorConverter;
import br.com.tecsoluction.sac.jsf.converter.ImpostoConverter;
import br.com.tecsoluction.sac.jsf.converter.ItemConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ProdutoBean_Roo_ManagedBean {
    
    declare @type: ProdutoBean: @ManagedBean(name = "produtoBean");
    
    declare @type: ProdutoBean: @SessionScoped;
    
    private String ProdutoBean.name = "Produtoes";
    
    private Produto ProdutoBean.produto;
    
    private List<Produto> ProdutoBean.allProdutoes;
    
    private boolean ProdutoBean.dataVisible = false;
    
    private List<String> ProdutoBean.columns;
    
    private HtmlPanelGrid ProdutoBean.createPanelGrid;
    
    private HtmlPanelGrid ProdutoBean.editPanelGrid;
    
    private HtmlPanelGrid ProdutoBean.viewPanelGrid;
    
    private boolean ProdutoBean.createDialogVisible = false;
    
    private List<Imposto> ProdutoBean.selectedImpostos;
    
    @PostConstruct
    public void ProdutoBean.init() {
        columns = new ArrayList<String>();
        columns.add("codebar");
        columns.add("marca");
        columns.add("descricao");
        columns.add("precocusto");
        columns.add("precovenda");
    }
    
    public String ProdutoBean.getName() {
        return name;
    }
    
    public List<String> ProdutoBean.getColumns() {
        return columns;
    }
    
    public List<Produto> ProdutoBean.getAllProdutoes() {
        return allProdutoes;
    }
    
    public void ProdutoBean.setAllProdutoes(List<Produto> allProdutoes) {
        this.allProdutoes = allProdutoes;
    }
    
    public String ProdutoBean.findAllProdutoes() {
        allProdutoes = Produto.findAllProdutoes();
        dataVisible = !allProdutoes.isEmpty();
        return null;
    }
    
    public boolean ProdutoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ProdutoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ProdutoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ProdutoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ProdutoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ProdutoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ProdutoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ProdutoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ProdutoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codebarCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codebarCreateOutput.setFor("codebarCreateInput");
        codebarCreateOutput.setId("codebarCreateOutput");
        codebarCreateOutput.setValue("Codebar:");
        htmlPanelGrid.getChildren().add(codebarCreateOutput);
        
        InputText codebarCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codebarCreateInput.setId("codebarCreateInput");
        codebarCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.codebar}", String.class));
        codebarCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codebarCreateInput);
        
        Message codebarCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codebarCreateInputMessage.setId("codebarCreateInputMessage");
        codebarCreateInputMessage.setFor("codebarCreateInput");
        codebarCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codebarCreateInputMessage);
        
        OutputLabel categoriaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoriaCreateOutput.setFor("categoriaCreateInput");
        categoriaCreateOutput.setId("categoriaCreateOutput");
        categoriaCreateOutput.setValue("Categoria:");
        htmlPanelGrid.getChildren().add(categoriaCreateOutput);
        
        AutoComplete categoriaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoriaCreateInput.setId("categoriaCreateInput");
        categoriaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.categoria}", Categoria.class));
        categoriaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{produtoBean.completeCategoria}", List.class, new Class[] { String.class }));
        categoriaCreateInput.setDropdown(true);
        categoriaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoria", String.class));
        categoriaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoria.nome}", String.class));
        categoriaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoria}", Categoria.class));
        categoriaCreateInput.setConverter(new CategoriaConverter());
        categoriaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoriaCreateInput);
        
        Message categoriaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriaCreateInputMessage.setId("categoriaCreateInputMessage");
        categoriaCreateInputMessage.setFor("categoriaCreateInput");
        categoriaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriaCreateInputMessage);
        
        OutputLabel marcaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        marcaCreateOutput.setFor("marcaCreateInput");
        marcaCreateOutput.setId("marcaCreateOutput");
        marcaCreateOutput.setValue("Marca:");
        htmlPanelGrid.getChildren().add(marcaCreateOutput);
        
        InputText marcaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        marcaCreateInput.setId("marcaCreateInput");
        marcaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.marca}", String.class));
        marcaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(marcaCreateInput);
        
        Message marcaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        marcaCreateInputMessage.setId("marcaCreateInputMessage");
        marcaCreateInputMessage.setFor("marcaCreateInput");
        marcaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(marcaCreateInputMessage);
        
        OutputLabel descricaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descricaoCreateOutput.setFor("descricaoCreateInput");
        descricaoCreateOutput.setId("descricaoCreateOutput");
        descricaoCreateOutput.setValue("Descricao:");
        htmlPanelGrid.getChildren().add(descricaoCreateOutput);
        
        InputText descricaoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descricaoCreateInput.setId("descricaoCreateInput");
        descricaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.descricao}", String.class));
        descricaoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoCreateInput);
        
        Message descricaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoCreateInputMessage.setId("descricaoCreateInputMessage");
        descricaoCreateInputMessage.setFor("descricaoCreateInput");
        descricaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoCreateInputMessage);
        
        OutputLabel precocustoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precocustoCreateOutput.setFor("precocustoCreateInput");
        precocustoCreateOutput.setId("precocustoCreateOutput");
        precocustoCreateOutput.setValue("Precocusto:");
        htmlPanelGrid.getChildren().add(precocustoCreateOutput);
        
        InputText precocustoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precocustoCreateInput.setId("precocustoCreateInput");
        precocustoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.precocusto}", Double.class));
        precocustoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precocustoCreateInput);
        
        Message precocustoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precocustoCreateInputMessage.setId("precocustoCreateInputMessage");
        precocustoCreateInputMessage.setFor("precocustoCreateInput");
        precocustoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precocustoCreateInputMessage);
        
        OutputLabel precovendaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precovendaCreateOutput.setFor("precovendaCreateInput");
        precovendaCreateOutput.setId("precovendaCreateOutput");
        precovendaCreateOutput.setValue("Precovenda:");
        htmlPanelGrid.getChildren().add(precovendaCreateOutput);
        
        InputText precovendaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precovendaCreateInput.setId("precovendaCreateInput");
        precovendaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.precovenda}", Double.class));
        precovendaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precovendaCreateInput);
        
        Message precovendaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precovendaCreateInputMessage.setId("precovendaCreateInputMessage");
        precovendaCreateInputMessage.setFor("precovendaCreateInput");
        precovendaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precovendaCreateInputMessage);
        
        OutputLabel itemCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itemCreateOutput.setFor("itemCreateInput");
        itemCreateOutput.setId("itemCreateOutput");
        itemCreateOutput.setValue("Item:");
        htmlPanelGrid.getChildren().add(itemCreateOutput);
        
        AutoComplete itemCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        itemCreateInput.setId("itemCreateInput");
        itemCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.item}", Item.class));
        itemCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{produtoBean.completeItem}", List.class, new Class[] { String.class }));
        itemCreateInput.setDropdown(true);
        itemCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itemCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item.codigo} #{item.descricao} #{item.precounitario} #{item.qtd}", String.class));
        itemCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itemCreateInput.setConverter(new ItemConverter());
        itemCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(itemCreateInput);
        
        Message itemCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemCreateInputMessage.setId("itemCreateInputMessage");
        itemCreateInputMessage.setFor("itemCreateInput");
        itemCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemCreateInputMessage);
        
        OutputLabel qtdminCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        qtdminCreateOutput.setFor("qtdminCreateInput");
        qtdminCreateOutput.setId("qtdminCreateOutput");
        qtdminCreateOutput.setValue("Qtdmin:");
        htmlPanelGrid.getChildren().add(qtdminCreateOutput);
        
        InputText qtdminCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        qtdminCreateInput.setId("qtdminCreateInput");
        qtdminCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.qtdmin}", String.class));
        qtdminCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(qtdminCreateInput);
        
        Message qtdminCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        qtdminCreateInputMessage.setId("qtdminCreateInputMessage");
        qtdminCreateInputMessage.setFor("qtdminCreateInput");
        qtdminCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(qtdminCreateInputMessage);
        
        OutputLabel datavalidadeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datavalidadeCreateOutput.setFor("datavalidadeCreateInput");
        datavalidadeCreateOutput.setId("datavalidadeCreateOutput");
        datavalidadeCreateOutput.setValue("Datavalidade:");
        htmlPanelGrid.getChildren().add(datavalidadeCreateOutput);
        
        Calendar datavalidadeCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datavalidadeCreateInput.setId("datavalidadeCreateInput");
        datavalidadeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.datavalidade}", Date.class));
        datavalidadeCreateInput.setNavigator(true);
        datavalidadeCreateInput.setEffect("slideDown");
        datavalidadeCreateInput.setPattern("dd/MM/yyyy");
        datavalidadeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datavalidadeCreateInput);
        
        Message datavalidadeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datavalidadeCreateInputMessage.setId("datavalidadeCreateInputMessage");
        datavalidadeCreateInputMessage.setFor("datavalidadeCreateInput");
        datavalidadeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datavalidadeCreateInputMessage);
        
        OutputLabel loteCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        loteCreateOutput.setFor("loteCreateInput");
        loteCreateOutput.setId("loteCreateOutput");
        loteCreateOutput.setValue("Lote:");
        htmlPanelGrid.getChildren().add(loteCreateOutput);
        
        InputText loteCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        loteCreateInput.setId("loteCreateInput");
        loteCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.lote}", String.class));
        loteCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(loteCreateInput);
        
        Message loteCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        loteCreateInputMessage.setId("loteCreateInputMessage");
        loteCreateInputMessage.setFor("loteCreateInput");
        loteCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(loteCreateInputMessage);
        
        OutputLabel datacriacaoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoCreateOutput.setFor("datacriacaoCreateInput");
        datacriacaoCreateOutput.setId("datacriacaoCreateOutput");
        datacriacaoCreateOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoCreateOutput);
        
        Calendar datacriacaoCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoCreateInput.setId("datacriacaoCreateInput");
        datacriacaoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.datacriacao}", Date.class));
        datacriacaoCreateInput.setNavigator(true);
        datacriacaoCreateInput.setEffect("slideDown");
        datacriacaoCreateInput.setPattern("dd/MM/yyyy");
        datacriacaoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacriacaoCreateInput);
        
        Message datacriacaoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoCreateInputMessage.setId("datacriacaoCreateInputMessage");
        datacriacaoCreateInputMessage.setFor("datacriacaoCreateInput");
        datacriacaoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoCreateInputMessage);
        
        OutputLabel fornecedorCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fornecedorCreateOutput.setFor("fornecedorCreateInput");
        fornecedorCreateOutput.setId("fornecedorCreateOutput");
        fornecedorCreateOutput.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorCreateOutput);
        
        AutoComplete fornecedorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        fornecedorCreateInput.setId("fornecedorCreateInput");
        fornecedorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.fornecedor}", Fornecedor.class));
        fornecedorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{produtoBean.completeFornecedor}", List.class, new Class[] { String.class }));
        fornecedorCreateInput.setDropdown(true);
        fornecedorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "fornecedor", String.class));
        fornecedorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{fornecedor.nomefantasia} #{fornecedor.cnpj} #{fornecedor.razaosocial} #{fornecedor.inscricaoestadual}", String.class));
        fornecedorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{fornecedor}", Fornecedor.class));
        fornecedorCreateInput.setConverter(new FornecedorConverter());
        fornecedorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fornecedorCreateInput);
        
        Message fornecedorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fornecedorCreateInputMessage.setId("fornecedorCreateInputMessage");
        fornecedorCreateInputMessage.setFor("fornecedorCreateInput");
        fornecedorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fornecedorCreateInputMessage);
        
        OutputLabel impostosCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        impostosCreateOutput.setFor("impostosCreateInput");
        impostosCreateOutput.setId("impostosCreateOutput");
        impostosCreateOutput.setValue("Impostos:");
        htmlPanelGrid.getChildren().add(impostosCreateOutput);
        
        SelectManyMenu impostosCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        impostosCreateInput.setId("impostosCreateInput");
        impostosCreateInput.setConverter(new ImpostoConverter());
        impostosCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.selectedImpostos}", List.class));
        UISelectItems impostosCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        impostosCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{impostoBean.allImpostoes}", List.class));
        impostosCreateInput.setRequired(false);
        impostosCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "imposto", String.class));
        impostosCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{imposto}", String.class));
        impostosCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{imposto}", Imposto.class));
        impostosCreateInput.getChildren().add(impostosCreateInputItems);
        htmlPanelGrid.getChildren().add(impostosCreateInput);
        
        Message impostosCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        impostosCreateInputMessage.setId("impostosCreateInputMessage");
        impostosCreateInputMessage.setFor("impostosCreateInput");
        impostosCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(impostosCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProdutoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel codebarEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codebarEditOutput.setFor("codebarEditInput");
        codebarEditOutput.setId("codebarEditOutput");
        codebarEditOutput.setValue("Codebar:");
        htmlPanelGrid.getChildren().add(codebarEditOutput);
        
        InputText codebarEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codebarEditInput.setId("codebarEditInput");
        codebarEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.codebar}", String.class));
        codebarEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codebarEditInput);
        
        Message codebarEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codebarEditInputMessage.setId("codebarEditInputMessage");
        codebarEditInputMessage.setFor("codebarEditInput");
        codebarEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codebarEditInputMessage);
        
        OutputLabel categoriaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        categoriaEditOutput.setFor("categoriaEditInput");
        categoriaEditOutput.setId("categoriaEditOutput");
        categoriaEditOutput.setValue("Categoria:");
        htmlPanelGrid.getChildren().add(categoriaEditOutput);
        
        AutoComplete categoriaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        categoriaEditInput.setId("categoriaEditInput");
        categoriaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.categoria}", Categoria.class));
        categoriaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{produtoBean.completeCategoria}", List.class, new Class[] { String.class }));
        categoriaEditInput.setDropdown(true);
        categoriaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "categoria", String.class));
        categoriaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{categoria.nome}", String.class));
        categoriaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{categoria}", Categoria.class));
        categoriaEditInput.setConverter(new CategoriaConverter());
        categoriaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(categoriaEditInput);
        
        Message categoriaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        categoriaEditInputMessage.setId("categoriaEditInputMessage");
        categoriaEditInputMessage.setFor("categoriaEditInput");
        categoriaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(categoriaEditInputMessage);
        
        OutputLabel marcaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        marcaEditOutput.setFor("marcaEditInput");
        marcaEditOutput.setId("marcaEditOutput");
        marcaEditOutput.setValue("Marca:");
        htmlPanelGrid.getChildren().add(marcaEditOutput);
        
        InputText marcaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        marcaEditInput.setId("marcaEditInput");
        marcaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.marca}", String.class));
        marcaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(marcaEditInput);
        
        Message marcaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        marcaEditInputMessage.setId("marcaEditInputMessage");
        marcaEditInputMessage.setFor("marcaEditInput");
        marcaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(marcaEditInputMessage);
        
        OutputLabel descricaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descricaoEditOutput.setFor("descricaoEditInput");
        descricaoEditOutput.setId("descricaoEditOutput");
        descricaoEditOutput.setValue("Descricao:");
        htmlPanelGrid.getChildren().add(descricaoEditOutput);
        
        InputText descricaoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descricaoEditInput.setId("descricaoEditInput");
        descricaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.descricao}", String.class));
        descricaoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descricaoEditInput);
        
        Message descricaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descricaoEditInputMessage.setId("descricaoEditInputMessage");
        descricaoEditInputMessage.setFor("descricaoEditInput");
        descricaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descricaoEditInputMessage);
        
        OutputLabel precocustoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precocustoEditOutput.setFor("precocustoEditInput");
        precocustoEditOutput.setId("precocustoEditOutput");
        precocustoEditOutput.setValue("Precocusto:");
        htmlPanelGrid.getChildren().add(precocustoEditOutput);
        
        InputText precocustoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precocustoEditInput.setId("precocustoEditInput");
        precocustoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.precocusto}", Double.class));
        precocustoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precocustoEditInput);
        
        Message precocustoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precocustoEditInputMessage.setId("precocustoEditInputMessage");
        precocustoEditInputMessage.setFor("precocustoEditInput");
        precocustoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precocustoEditInputMessage);
        
        OutputLabel precovendaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        precovendaEditOutput.setFor("precovendaEditInput");
        precovendaEditOutput.setId("precovendaEditOutput");
        precovendaEditOutput.setValue("Precovenda:");
        htmlPanelGrid.getChildren().add(precovendaEditOutput);
        
        InputText precovendaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        precovendaEditInput.setId("precovendaEditInput");
        precovendaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.precovenda}", Double.class));
        precovendaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(precovendaEditInput);
        
        Message precovendaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        precovendaEditInputMessage.setId("precovendaEditInputMessage");
        precovendaEditInputMessage.setFor("precovendaEditInput");
        precovendaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(precovendaEditInputMessage);
        
        OutputLabel itemEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itemEditOutput.setFor("itemEditInput");
        itemEditOutput.setId("itemEditOutput");
        itemEditOutput.setValue("Item:");
        htmlPanelGrid.getChildren().add(itemEditOutput);
        
        AutoComplete itemEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        itemEditInput.setId("itemEditInput");
        itemEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.item}", Item.class));
        itemEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{produtoBean.completeItem}", List.class, new Class[] { String.class }));
        itemEditInput.setDropdown(true);
        itemEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itemEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item.codigo} #{item.descricao} #{item.precounitario} #{item.qtd}", String.class));
        itemEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itemEditInput.setConverter(new ItemConverter());
        itemEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(itemEditInput);
        
        Message itemEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itemEditInputMessage.setId("itemEditInputMessage");
        itemEditInputMessage.setFor("itemEditInput");
        itemEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itemEditInputMessage);
        
        OutputLabel qtdminEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        qtdminEditOutput.setFor("qtdminEditInput");
        qtdminEditOutput.setId("qtdminEditOutput");
        qtdminEditOutput.setValue("Qtdmin:");
        htmlPanelGrid.getChildren().add(qtdminEditOutput);
        
        InputText qtdminEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        qtdminEditInput.setId("qtdminEditInput");
        qtdminEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.qtdmin}", String.class));
        qtdminEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(qtdminEditInput);
        
        Message qtdminEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        qtdminEditInputMessage.setId("qtdminEditInputMessage");
        qtdminEditInputMessage.setFor("qtdminEditInput");
        qtdminEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(qtdminEditInputMessage);
        
        OutputLabel datavalidadeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datavalidadeEditOutput.setFor("datavalidadeEditInput");
        datavalidadeEditOutput.setId("datavalidadeEditOutput");
        datavalidadeEditOutput.setValue("Datavalidade:");
        htmlPanelGrid.getChildren().add(datavalidadeEditOutput);
        
        Calendar datavalidadeEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datavalidadeEditInput.setId("datavalidadeEditInput");
        datavalidadeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.datavalidade}", Date.class));
        datavalidadeEditInput.setNavigator(true);
        datavalidadeEditInput.setEffect("slideDown");
        datavalidadeEditInput.setPattern("dd/MM/yyyy");
        datavalidadeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datavalidadeEditInput);
        
        Message datavalidadeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datavalidadeEditInputMessage.setId("datavalidadeEditInputMessage");
        datavalidadeEditInputMessage.setFor("datavalidadeEditInput");
        datavalidadeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datavalidadeEditInputMessage);
        
        OutputLabel loteEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        loteEditOutput.setFor("loteEditInput");
        loteEditOutput.setId("loteEditOutput");
        loteEditOutput.setValue("Lote:");
        htmlPanelGrid.getChildren().add(loteEditOutput);
        
        InputText loteEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        loteEditInput.setId("loteEditInput");
        loteEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.lote}", String.class));
        loteEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(loteEditInput);
        
        Message loteEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        loteEditInputMessage.setId("loteEditInputMessage");
        loteEditInputMessage.setFor("loteEditInput");
        loteEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(loteEditInputMessage);
        
        OutputLabel datacriacaoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datacriacaoEditOutput.setFor("datacriacaoEditInput");
        datacriacaoEditOutput.setId("datacriacaoEditOutput");
        datacriacaoEditOutput.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoEditOutput);
        
        Calendar datacriacaoEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datacriacaoEditInput.setId("datacriacaoEditInput");
        datacriacaoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.datacriacao}", Date.class));
        datacriacaoEditInput.setNavigator(true);
        datacriacaoEditInput.setEffect("slideDown");
        datacriacaoEditInput.setPattern("dd/MM/yyyy");
        datacriacaoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(datacriacaoEditInput);
        
        Message datacriacaoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datacriacaoEditInputMessage.setId("datacriacaoEditInputMessage");
        datacriacaoEditInputMessage.setFor("datacriacaoEditInput");
        datacriacaoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datacriacaoEditInputMessage);
        
        OutputLabel fornecedorEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fornecedorEditOutput.setFor("fornecedorEditInput");
        fornecedorEditOutput.setId("fornecedorEditOutput");
        fornecedorEditOutput.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorEditOutput);
        
        AutoComplete fornecedorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        fornecedorEditInput.setId("fornecedorEditInput");
        fornecedorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.fornecedor}", Fornecedor.class));
        fornecedorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{produtoBean.completeFornecedor}", List.class, new Class[] { String.class }));
        fornecedorEditInput.setDropdown(true);
        fornecedorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "fornecedor", String.class));
        fornecedorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{fornecedor.nomefantasia} #{fornecedor.cnpj} #{fornecedor.razaosocial} #{fornecedor.inscricaoestadual}", String.class));
        fornecedorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{fornecedor}", Fornecedor.class));
        fornecedorEditInput.setConverter(new FornecedorConverter());
        fornecedorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fornecedorEditInput);
        
        Message fornecedorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fornecedorEditInputMessage.setId("fornecedorEditInputMessage");
        fornecedorEditInputMessage.setFor("fornecedorEditInput");
        fornecedorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fornecedorEditInputMessage);
        
        OutputLabel impostosEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        impostosEditOutput.setFor("impostosEditInput");
        impostosEditOutput.setId("impostosEditOutput");
        impostosEditOutput.setValue("Impostos:");
        htmlPanelGrid.getChildren().add(impostosEditOutput);
        
        SelectManyMenu impostosEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        impostosEditInput.setId("impostosEditInput");
        impostosEditInput.setConverter(new ImpostoConverter());
        impostosEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.selectedImpostos}", List.class));
        UISelectItems impostosEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        impostosEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{impostoBean.allImpostoes}", List.class));
        impostosEditInput.setRequired(false);
        impostosEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "imposto", String.class));
        impostosEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{imposto}", String.class));
        impostosEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{imposto}", Imposto.class));
        impostosEditInput.getChildren().add(impostosEditInputItems);
        htmlPanelGrid.getChildren().add(impostosEditInput);
        
        Message impostosEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        impostosEditInputMessage.setId("impostosEditInputMessage");
        impostosEditInputMessage.setFor("impostosEditInput");
        impostosEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(impostosEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ProdutoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText codebarLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codebarLabel.setId("codebarLabel");
        codebarLabel.setValue("Codebar:");
        htmlPanelGrid.getChildren().add(codebarLabel);
        
        HtmlOutputText codebarValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codebarValue.setId("codebarValue");
        codebarValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.codebar}", String.class));
        htmlPanelGrid.getChildren().add(codebarValue);
        
        HtmlOutputText categoriaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriaLabel.setId("categoriaLabel");
        categoriaLabel.setValue("Categoria:");
        htmlPanelGrid.getChildren().add(categoriaLabel);
        
        HtmlOutputText categoriaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        categoriaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.categoria}", Categoria.class));
        categoriaValue.setConverter(new CategoriaConverter());
        htmlPanelGrid.getChildren().add(categoriaValue);
        
        HtmlOutputText marcaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaLabel.setId("marcaLabel");
        marcaLabel.setValue("Marca:");
        htmlPanelGrid.getChildren().add(marcaLabel);
        
        HtmlOutputText marcaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        marcaValue.setId("marcaValue");
        marcaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.marca}", String.class));
        htmlPanelGrid.getChildren().add(marcaValue);
        
        HtmlOutputText descricaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoLabel.setId("descricaoLabel");
        descricaoLabel.setValue("Descricao:");
        htmlPanelGrid.getChildren().add(descricaoLabel);
        
        HtmlOutputText descricaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descricaoValue.setId("descricaoValue");
        descricaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.descricao}", String.class));
        htmlPanelGrid.getChildren().add(descricaoValue);
        
        HtmlOutputText precocustoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precocustoLabel.setId("precocustoLabel");
        precocustoLabel.setValue("Precocusto:");
        htmlPanelGrid.getChildren().add(precocustoLabel);
        
        HtmlOutputText precocustoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precocustoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.precocusto}", String.class));
        htmlPanelGrid.getChildren().add(precocustoValue);
        
        HtmlOutputText precovendaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precovendaLabel.setId("precovendaLabel");
        precovendaLabel.setValue("Precovenda:");
        htmlPanelGrid.getChildren().add(precovendaLabel);
        
        HtmlOutputText precovendaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        precovendaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.precovenda}", String.class));
        htmlPanelGrid.getChildren().add(precovendaValue);
        
        HtmlOutputText itemLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemLabel.setId("itemLabel");
        itemLabel.setValue("Item:");
        htmlPanelGrid.getChildren().add(itemLabel);
        
        HtmlOutputText itemValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itemValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.item}", Item.class));
        itemValue.setConverter(new ItemConverter());
        htmlPanelGrid.getChildren().add(itemValue);
        
        HtmlOutputText qtdminLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        qtdminLabel.setId("qtdminLabel");
        qtdminLabel.setValue("Qtdmin:");
        htmlPanelGrid.getChildren().add(qtdminLabel);
        
        HtmlOutputText qtdminValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        qtdminValue.setId("qtdminValue");
        qtdminValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.qtdmin}", String.class));
        htmlPanelGrid.getChildren().add(qtdminValue);
        
        HtmlOutputText datavalidadeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datavalidadeLabel.setId("datavalidadeLabel");
        datavalidadeLabel.setValue("Datavalidade:");
        htmlPanelGrid.getChildren().add(datavalidadeLabel);
        
        HtmlOutputText datavalidadeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datavalidadeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.datavalidade}", Date.class));
        DateTimeConverter datavalidadeValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datavalidadeValueConverter.setPattern("dd/MM/yyyy");
        datavalidadeValue.setConverter(datavalidadeValueConverter);
        htmlPanelGrid.getChildren().add(datavalidadeValue);
        
        HtmlOutputText loteLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        loteLabel.setId("loteLabel");
        loteLabel.setValue("Lote:");
        htmlPanelGrid.getChildren().add(loteLabel);
        
        HtmlOutputText loteValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        loteValue.setId("loteValue");
        loteValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.lote}", String.class));
        htmlPanelGrid.getChildren().add(loteValue);
        
        HtmlOutputText datacriacaoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoLabel.setId("datacriacaoLabel");
        datacriacaoLabel.setValue("Datacriacao:");
        htmlPanelGrid.getChildren().add(datacriacaoLabel);
        
        HtmlOutputText datacriacaoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datacriacaoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.datacriacao}", Date.class));
        DateTimeConverter datacriacaoValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datacriacaoValueConverter.setPattern("dd/MM/yyyy");
        datacriacaoValue.setConverter(datacriacaoValueConverter);
        htmlPanelGrid.getChildren().add(datacriacaoValue);
        
        HtmlOutputText fornecedorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fornecedorLabel.setId("fornecedorLabel");
        fornecedorLabel.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorLabel);
        
        HtmlOutputText fornecedorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fornecedorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.fornecedor}", Fornecedor.class));
        fornecedorValue.setConverter(new FornecedorConverter());
        htmlPanelGrid.getChildren().add(fornecedorValue);
        
        HtmlOutputText impostosLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        impostosLabel.setId("impostosLabel");
        impostosLabel.setValue("Impostos:");
        htmlPanelGrid.getChildren().add(impostosLabel);
        
        SelectManyMenu impostosValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        impostosValue.setId("impostosValue");
        impostosValue.setConverter(new ImpostoConverter());
        impostosValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.selectedImpostos}", List.class));
        UISelectItems impostosValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        impostosValue.setReadonly(true);
        impostosValue.setDisabled(true);
        impostosValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{produtoBean.produto.impostos}", Set.class));
        impostosValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "imposto", String.class));
        impostosValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{imposto}", String.class));
        impostosValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{imposto}", Imposto.class));
        impostosValue.getChildren().add(impostosValueItems);
        htmlPanelGrid.getChildren().add(impostosValue);
        
        return htmlPanelGrid;
    }
    
    public Produto ProdutoBean.getProduto() {
        if (produto == null) {
            produto = new Produto();
        }
        return produto;
    }
    
    public void ProdutoBean.setProduto(Produto produto) {
        this.produto = produto;
    }
    
    public List<Categoria> ProdutoBean.completeCategoria(String query) {
        List<Categoria> suggestions = new ArrayList<Categoria>();
        for (Categoria categoria : Categoria.findAllCategorias()) {
            String categoriaStr = String.valueOf(categoria.getNome());
            if (categoriaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(categoria);
            }
        }
        return suggestions;
    }
    
    public List<Item> ProdutoBean.completeItem(String query) {
        List<Item> suggestions = new ArrayList<Item>();
        for (Item item : Item.findAllItems()) {
            String itemStr = String.valueOf(item.getCodigo() +  " "  + item.getDescricao() +  " "  + item.getPrecounitario() +  " "  + item.getQtd());
            if (itemStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(item);
            }
        }
        return suggestions;
    }
    
    public List<Fornecedor> ProdutoBean.completeFornecedor(String query) {
        List<Fornecedor> suggestions = new ArrayList<Fornecedor>();
        for (Fornecedor fornecedor : Fornecedor.findAllFornecedors()) {
            String fornecedorStr = String.valueOf(fornecedor.getNomefantasia() +  " "  + fornecedor.getCnpj() +  " "  + fornecedor.getRazaosocial() +  " "  + fornecedor.getInscricaoestadual());
            if (fornecedorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(fornecedor);
            }
        }
        return suggestions;
    }
    
    public List<Imposto> ProdutoBean.getSelectedImpostos() {
        return selectedImpostos;
    }
    
    public void ProdutoBean.setSelectedImpostos(List<Imposto> selectedImpostos) {
        if (selectedImpostos != null) {
            produto.setImpostos(new HashSet<Imposto>(selectedImpostos));
        }
        this.selectedImpostos = selectedImpostos;
    }
    
    public String ProdutoBean.onEdit() {
        if (produto != null && produto.getImpostos() != null) {
            selectedImpostos = new ArrayList<Imposto>(produto.getImpostos());
        }
        return null;
    }
    
    public boolean ProdutoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ProdutoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ProdutoBean.displayList() {
        createDialogVisible = false;
        findAllProdutoes();
        return "produto";
    }
    
    public String ProdutoBean.displayCreateDialog() {
        produto = new Produto();
        createDialogVisible = true;
        return "produto";
    }
    
    public String ProdutoBean.persist() {
        String message = "";
        if (produto.getId() != null) {
            produto.merge();
            message = "message_successfully_updated";
        } else {
            produto.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Produto");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProdutoes();
    }
    
    public String ProdutoBean.delete() {
        produto.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Produto");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllProdutoes();
    }
    
    public void ProdutoBean.reset() {
        produto = null;
        selectedImpostos = null;
        createDialogVisible = false;
    }
    
    public void ProdutoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
