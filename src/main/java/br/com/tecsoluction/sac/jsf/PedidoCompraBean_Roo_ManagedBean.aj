// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Fornecedor;
import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.PedidoCompra;
import br.com.tecsoluction.sac.jsf.PedidoCompraBean;
import br.com.tecsoluction.sac.jsf.converter.FornecedorConverter;
import br.com.tecsoluction.sac.jsf.converter.ItemConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect PedidoCompraBean_Roo_ManagedBean {
    
    declare @type: PedidoCompraBean: @ManagedBean(name = "pedidoCompraBean");
    
    declare @type: PedidoCompraBean: @SessionScoped;
    
    private String PedidoCompraBean.name = "PedidoCompras";
    
    private PedidoCompra PedidoCompraBean.pedidoCompra;
    
    private List<PedidoCompra> PedidoCompraBean.allPedidoCompras;
    
    private boolean PedidoCompraBean.dataVisible = false;
    
    private List<String> PedidoCompraBean.columns;
    
    private HtmlPanelGrid PedidoCompraBean.createPanelGrid;
    
    private HtmlPanelGrid PedidoCompraBean.editPanelGrid;
    
    private HtmlPanelGrid PedidoCompraBean.viewPanelGrid;
    
    private boolean PedidoCompraBean.createDialogVisible = false;
    
    private List<Item> PedidoCompraBean.selectedItens;
    
    @PostConstruct
    public void PedidoCompraBean.init() {
        columns = new ArrayList<String>();
        columns.add("datapedidocompra");
        columns.add("total");
    }
    
    public String PedidoCompraBean.getName() {
        return name;
    }
    
    public List<String> PedidoCompraBean.getColumns() {
        return columns;
    }
    
    public List<PedidoCompra> PedidoCompraBean.getAllPedidoCompras() {
        return allPedidoCompras;
    }
    
    public void PedidoCompraBean.setAllPedidoCompras(List<PedidoCompra> allPedidoCompras) {
        this.allPedidoCompras = allPedidoCompras;
    }
    
    public String PedidoCompraBean.findAllPedidoCompras() {
        allPedidoCompras = PedidoCompra.findAllPedidoCompras();
        dataVisible = !allPedidoCompras.isEmpty();
        return null;
    }
    
    public boolean PedidoCompraBean.isDataVisible() {
        return dataVisible;
    }
    
    public void PedidoCompraBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid PedidoCompraBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void PedidoCompraBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid PedidoCompraBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void PedidoCompraBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid PedidoCompraBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void PedidoCompraBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid PedidoCompraBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datapedidocompraCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datapedidocompraCreateOutput.setFor("datapedidocompraCreateInput");
        datapedidocompraCreateOutput.setId("datapedidocompraCreateOutput");
        datapedidocompraCreateOutput.setValue("Datapedidocompra:");
        htmlPanelGrid.getChildren().add(datapedidocompraCreateOutput);
        
        Calendar datapedidocompraCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datapedidocompraCreateInput.setId("datapedidocompraCreateInput");
        datapedidocompraCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.datapedidocompra}", Date.class));
        datapedidocompraCreateInput.setNavigator(true);
        datapedidocompraCreateInput.setEffect("slideDown");
        datapedidocompraCreateInput.setPattern("dd/MM/yyyy");
        datapedidocompraCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(datapedidocompraCreateInput);
        
        Message datapedidocompraCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datapedidocompraCreateInputMessage.setId("datapedidocompraCreateInputMessage");
        datapedidocompraCreateInputMessage.setFor("datapedidocompraCreateInput");
        datapedidocompraCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datapedidocompraCreateInputMessage);
        
        OutputLabel itensCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensCreateOutput.setFor("itensCreateInput");
        itensCreateOutput.setId("itensCreateOutput");
        itensCreateOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensCreateOutput);
        
        SelectManyMenu itensCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensCreateInput.setId("itensCreateInput");
        itensCreateInput.setConverter(new ItemConverter());
        itensCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.selectedItens}", List.class));
        UISelectItems itensCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensCreateInput.setRequired(false);
        itensCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensCreateInput.getChildren().add(itensCreateInputItems);
        htmlPanelGrid.getChildren().add(itensCreateInput);
        
        Message itensCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensCreateInputMessage.setId("itensCreateInputMessage");
        itensCreateInputMessage.setFor("itensCreateInput");
        itensCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensCreateInputMessage);
        
        OutputLabel fornecedorCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fornecedorCreateOutput.setFor("fornecedorCreateInput");
        fornecedorCreateOutput.setId("fornecedorCreateOutput");
        fornecedorCreateOutput.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorCreateOutput);
        
        AutoComplete fornecedorCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        fornecedorCreateInput.setId("fornecedorCreateInput");
        fornecedorCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.fornecedor}", Fornecedor.class));
        fornecedorCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pedidoCompraBean.completeFornecedor}", List.class, new Class[] { String.class }));
        fornecedorCreateInput.setDropdown(true);
        fornecedorCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "fornecedor", String.class));
        fornecedorCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{fornecedor.nomefantasia} #{fornecedor.cnpj} #{fornecedor.razaosocial} #{fornecedor.inscricaoestadual}", String.class));
        fornecedorCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{fornecedor}", Fornecedor.class));
        fornecedorCreateInput.setConverter(new FornecedorConverter());
        fornecedorCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fornecedorCreateInput);
        
        Message fornecedorCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fornecedorCreateInputMessage.setId("fornecedorCreateInputMessage");
        fornecedorCreateInputMessage.setFor("fornecedorCreateInput");
        fornecedorCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fornecedorCreateInputMessage);
        
        OutputLabel totalCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        totalCreateOutput.setFor("totalCreateInput");
        totalCreateOutput.setId("totalCreateOutput");
        totalCreateOutput.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalCreateOutput);
        
        InputText totalCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        totalCreateInput.setId("totalCreateInput");
        totalCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.total}", Double.class));
        totalCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(totalCreateInput);
        
        Message totalCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        totalCreateInputMessage.setId("totalCreateInputMessage");
        totalCreateInputMessage.setFor("totalCreateInput");
        totalCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(totalCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PedidoCompraBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel datapedidocompraEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        datapedidocompraEditOutput.setFor("datapedidocompraEditInput");
        datapedidocompraEditOutput.setId("datapedidocompraEditOutput");
        datapedidocompraEditOutput.setValue("Datapedidocompra:");
        htmlPanelGrid.getChildren().add(datapedidocompraEditOutput);
        
        Calendar datapedidocompraEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        datapedidocompraEditInput.setId("datapedidocompraEditInput");
        datapedidocompraEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.datapedidocompra}", Date.class));
        datapedidocompraEditInput.setNavigator(true);
        datapedidocompraEditInput.setEffect("slideDown");
        datapedidocompraEditInput.setPattern("dd/MM/yyyy");
        datapedidocompraEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(datapedidocompraEditInput);
        
        Message datapedidocompraEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        datapedidocompraEditInputMessage.setId("datapedidocompraEditInputMessage");
        datapedidocompraEditInputMessage.setFor("datapedidocompraEditInput");
        datapedidocompraEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(datapedidocompraEditInputMessage);
        
        OutputLabel itensEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensEditOutput.setFor("itensEditInput");
        itensEditOutput.setId("itensEditOutput");
        itensEditOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensEditOutput);
        
        SelectManyMenu itensEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensEditInput.setId("itensEditInput");
        itensEditInput.setConverter(new ItemConverter());
        itensEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.selectedItens}", List.class));
        UISelectItems itensEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensEditInput.setRequired(false);
        itensEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensEditInput.getChildren().add(itensEditInputItems);
        htmlPanelGrid.getChildren().add(itensEditInput);
        
        Message itensEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensEditInputMessage.setId("itensEditInputMessage");
        itensEditInputMessage.setFor("itensEditInput");
        itensEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensEditInputMessage);
        
        OutputLabel fornecedorEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fornecedorEditOutput.setFor("fornecedorEditInput");
        fornecedorEditOutput.setId("fornecedorEditOutput");
        fornecedorEditOutput.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorEditOutput);
        
        AutoComplete fornecedorEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        fornecedorEditInput.setId("fornecedorEditInput");
        fornecedorEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.fornecedor}", Fornecedor.class));
        fornecedorEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{pedidoCompraBean.completeFornecedor}", List.class, new Class[] { String.class }));
        fornecedorEditInput.setDropdown(true);
        fornecedorEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "fornecedor", String.class));
        fornecedorEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{fornecedor.nomefantasia} #{fornecedor.cnpj} #{fornecedor.razaosocial} #{fornecedor.inscricaoestadual}", String.class));
        fornecedorEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{fornecedor}", Fornecedor.class));
        fornecedorEditInput.setConverter(new FornecedorConverter());
        fornecedorEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fornecedorEditInput);
        
        Message fornecedorEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fornecedorEditInputMessage.setId("fornecedorEditInputMessage");
        fornecedorEditInputMessage.setFor("fornecedorEditInput");
        fornecedorEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fornecedorEditInputMessage);
        
        OutputLabel totalEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        totalEditOutput.setFor("totalEditInput");
        totalEditOutput.setId("totalEditOutput");
        totalEditOutput.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalEditOutput);
        
        InputText totalEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        totalEditInput.setId("totalEditInput");
        totalEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.total}", Double.class));
        totalEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(totalEditInput);
        
        Message totalEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        totalEditInputMessage.setId("totalEditInputMessage");
        totalEditInputMessage.setFor("totalEditInput");
        totalEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(totalEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid PedidoCompraBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText datapedidocompraLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datapedidocompraLabel.setId("datapedidocompraLabel");
        datapedidocompraLabel.setValue("Datapedidocompra:");
        htmlPanelGrid.getChildren().add(datapedidocompraLabel);
        
        HtmlOutputText datapedidocompraValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        datapedidocompraValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.datapedidocompra}", Date.class));
        DateTimeConverter datapedidocompraValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        datapedidocompraValueConverter.setPattern("dd/MM/yyyy");
        datapedidocompraValue.setConverter(datapedidocompraValueConverter);
        htmlPanelGrid.getChildren().add(datapedidocompraValue);
        
        HtmlOutputText itensLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itensLabel.setId("itensLabel");
        itensLabel.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensLabel);
        
        SelectManyMenu itensValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensValue.setId("itensValue");
        itensValue.setConverter(new ItemConverter());
        itensValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.selectedItens}", List.class));
        UISelectItems itensValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensValue.setReadonly(true);
        itensValue.setDisabled(true);
        itensValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.itens}", Set.class));
        itensValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensValue.getChildren().add(itensValueItems);
        htmlPanelGrid.getChildren().add(itensValue);
        
        HtmlOutputText fornecedorLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fornecedorLabel.setId("fornecedorLabel");
        fornecedorLabel.setValue("Fornecedor:");
        htmlPanelGrid.getChildren().add(fornecedorLabel);
        
        HtmlOutputText fornecedorValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fornecedorValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.fornecedor}", Fornecedor.class));
        fornecedorValue.setConverter(new FornecedorConverter());
        htmlPanelGrid.getChildren().add(fornecedorValue);
        
        HtmlOutputText totalLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        totalLabel.setId("totalLabel");
        totalLabel.setValue("Total:");
        htmlPanelGrid.getChildren().add(totalLabel);
        
        HtmlOutputText totalValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        totalValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{pedidoCompraBean.pedidoCompra.total}", String.class));
        htmlPanelGrid.getChildren().add(totalValue);
        
        return htmlPanelGrid;
    }
    
    public PedidoCompra PedidoCompraBean.getPedidoCompra() {
        if (pedidoCompra == null) {
            pedidoCompra = new PedidoCompra();
        }
        return pedidoCompra;
    }
    
    public void PedidoCompraBean.setPedidoCompra(PedidoCompra pedidoCompra) {
        this.pedidoCompra = pedidoCompra;
    }
    
    public List<Item> PedidoCompraBean.getSelectedItens() {
        return selectedItens;
    }
    
    public void PedidoCompraBean.setSelectedItens(List<Item> selectedItens) {
        if (selectedItens != null) {
            pedidoCompra.setItens(new HashSet<Item>(selectedItens));
        }
        this.selectedItens = selectedItens;
    }
    
    public List<Fornecedor> PedidoCompraBean.completeFornecedor(String query) {
        List<Fornecedor> suggestions = new ArrayList<Fornecedor>();
        for (Fornecedor fornecedor : Fornecedor.findAllFornecedors()) {
            String fornecedorStr = String.valueOf(fornecedor.getNomefantasia() +  " "  + fornecedor.getCnpj() +  " "  + fornecedor.getRazaosocial() +  " "  + fornecedor.getInscricaoestadual());
            if (fornecedorStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(fornecedor);
            }
        }
        return suggestions;
    }
    
    public String PedidoCompraBean.onEdit() {
        if (pedidoCompra != null && pedidoCompra.getItens() != null) {
            selectedItens = new ArrayList<Item>(pedidoCompra.getItens());
        }
        return null;
    }
    
    public boolean PedidoCompraBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void PedidoCompraBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String PedidoCompraBean.displayList() {
        createDialogVisible = false;
        findAllPedidoCompras();
        return "pedidoCompra";
    }
    
    public String PedidoCompraBean.displayCreateDialog() {
        pedidoCompra = new PedidoCompra();
        createDialogVisible = true;
        return "pedidoCompra";
    }
    
    public String PedidoCompraBean.persist() {
        String message = "";
        if (pedidoCompra.getId() != null) {
            pedidoCompra.merge();
            message = "message_successfully_updated";
        } else {
            pedidoCompra.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "PedidoCompra");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPedidoCompras();
    }
    
    public String PedidoCompraBean.delete() {
        pedidoCompra.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "PedidoCompra");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllPedidoCompras();
    }
    
    public void PedidoCompraBean.reset() {
        pedidoCompra = null;
        selectedItens = null;
        createDialogVisible = false;
    }
    
    public void PedidoCompraBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
