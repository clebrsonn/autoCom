// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.com.tecsoluction.sac.jsf;

import br.com.tecsoluction.sac.Estoque;
import br.com.tecsoluction.sac.Item;
import br.com.tecsoluction.sac.jsf.EstoqueBean;
import br.com.tecsoluction.sac.jsf.converter.ItemConverter;
import br.com.tecsoluction.sac.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UISelectItems;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectmanymenu.SelectManyMenu;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect EstoqueBean_Roo_ManagedBean {
    
    declare @type: EstoqueBean: @ManagedBean(name = "estoqueBean");
    
    declare @type: EstoqueBean: @SessionScoped;
    
    private String EstoqueBean.name = "Estoques";
    
    private Estoque EstoqueBean.estoque;
    
    private List<Estoque> EstoqueBean.allEstoques;
    
    private boolean EstoqueBean.dataVisible = false;
    
    private List<String> EstoqueBean.columns;
    
    private HtmlPanelGrid EstoqueBean.createPanelGrid;
    
    private HtmlPanelGrid EstoqueBean.editPanelGrid;
    
    private HtmlPanelGrid EstoqueBean.viewPanelGrid;
    
    private boolean EstoqueBean.createDialogVisible = false;
    
    private List<Item> EstoqueBean.selectedItens;
    
    @PostConstruct
    public void EstoqueBean.init() {
        columns = new ArrayList<String>();
    }
    
    public String EstoqueBean.getName() {
        return name;
    }
    
    public List<String> EstoqueBean.getColumns() {
        return columns;
    }
    
    public List<Estoque> EstoqueBean.getAllEstoques() {
        return allEstoques;
    }
    
    public void EstoqueBean.setAllEstoques(List<Estoque> allEstoques) {
        this.allEstoques = allEstoques;
    }
    
    public String EstoqueBean.findAllEstoques() {
        allEstoques = Estoque.findAllEstoques();
        dataVisible = !allEstoques.isEmpty();
        return null;
    }
    
    public boolean EstoqueBean.isDataVisible() {
        return dataVisible;
    }
    
    public void EstoqueBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid EstoqueBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void EstoqueBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid EstoqueBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void EstoqueBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid EstoqueBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void EstoqueBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid EstoqueBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel itensCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensCreateOutput.setFor("itensCreateInput");
        itensCreateOutput.setId("itensCreateOutput");
        itensCreateOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensCreateOutput);
        
        SelectManyMenu itensCreateInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensCreateInput.setId("itensCreateInput");
        itensCreateInput.setConverter(new ItemConverter());
        itensCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estoqueBean.selectedItens}", List.class));
        UISelectItems itensCreateInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensCreateInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensCreateInput.setRequired(false);
        itensCreateInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensCreateInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensCreateInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensCreateInput.getChildren().add(itensCreateInputItems);
        htmlPanelGrid.getChildren().add(itensCreateInput);
        
        Message itensCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensCreateInputMessage.setId("itensCreateInputMessage");
        itensCreateInputMessage.setFor("itensCreateInput");
        itensCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid EstoqueBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel itensEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        itensEditOutput.setFor("itensEditInput");
        itensEditOutput.setId("itensEditOutput");
        itensEditOutput.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensEditOutput);
        
        SelectManyMenu itensEditInput = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensEditInput.setId("itensEditInput");
        itensEditInput.setConverter(new ItemConverter());
        itensEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estoqueBean.selectedItens}", List.class));
        UISelectItems itensEditInputItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensEditInputItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itemBean.allItems}", List.class));
        itensEditInput.setRequired(false);
        itensEditInputItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensEditInputItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensEditInputItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensEditInput.getChildren().add(itensEditInputItems);
        htmlPanelGrid.getChildren().add(itensEditInput);
        
        Message itensEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        itensEditInputMessage.setId("itensEditInputMessage");
        itensEditInputMessage.setFor("itensEditInput");
        itensEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(itensEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid EstoqueBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText itensLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        itensLabel.setId("itensLabel");
        itensLabel.setValue("Itens:");
        htmlPanelGrid.getChildren().add(itensLabel);
        
        SelectManyMenu itensValue = (SelectManyMenu) application.createComponent(SelectManyMenu.COMPONENT_TYPE);
        itensValue.setId("itensValue");
        itensValue.setConverter(new ItemConverter());
        itensValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estoqueBean.selectedItens}", List.class));
        UISelectItems itensValueItems = (UISelectItems) application.createComponent(UISelectItems.COMPONENT_TYPE);
        itensValue.setReadonly(true);
        itensValue.setDisabled(true);
        itensValueItems.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estoqueBean.estoque.itens}", Set.class));
        itensValueItems.setValueExpression("var", expressionFactory.createValueExpression(elContext, "item", String.class));
        itensValueItems.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{item}", String.class));
        itensValueItems.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{item}", Item.class));
        itensValue.getChildren().add(itensValueItems);
        htmlPanelGrid.getChildren().add(itensValue);
        
        return htmlPanelGrid;
    }
    
    public Estoque EstoqueBean.getEstoque() {
        if (estoque == null) {
            estoque = new Estoque();
        }
        return estoque;
    }
    
    public void EstoqueBean.setEstoque(Estoque estoque) {
        this.estoque = estoque;
    }
    
    public List<Item> EstoqueBean.getSelectedItens() {
        return selectedItens;
    }
    
    public void EstoqueBean.setSelectedItens(List<Item> selectedItens) {
        if (selectedItens != null) {
            estoque.setItens(new HashSet<Item>(selectedItens));
        }
        this.selectedItens = selectedItens;
    }
    
    public String EstoqueBean.onEdit() {
        if (estoque != null && estoque.getItens() != null) {
            selectedItens = new ArrayList<Item>(estoque.getItens());
        }
        return null;
    }
    
    public boolean EstoqueBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void EstoqueBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String EstoqueBean.displayList() {
        createDialogVisible = false;
        findAllEstoques();
        return "estoque";
    }
    
    public String EstoqueBean.displayCreateDialog() {
        estoque = new Estoque();
        createDialogVisible = true;
        return "estoque";
    }
    
    public String EstoqueBean.persist() {
        String message = "";
        if (estoque.getId() != null) {
            estoque.merge();
            message = "message_successfully_updated";
        } else {
            estoque.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Estoque");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllEstoques();
    }
    
    public String EstoqueBean.delete() {
        estoque.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Estoque");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllEstoques();
    }
    
    public void EstoqueBean.reset() {
        estoque = null;
        selectedItens = null;
        createDialogVisible = false;
    }
    
    public void EstoqueBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
